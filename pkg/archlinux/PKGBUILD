####
# Maintainer: Kamil Cukrowski <kamilcukrowski@gmail.com>

pkgbase=
pkgname=kamilscripts
pkgver=$(git describe --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g')
pkgrel=2
epoch=
pkgdesc='These are Kamil Cukrowski private/public scripts. Do not use.'
arch=('any')
url="https://gitlab.com/Kamcuk/$pkgname"
license=('MIT' 'custom:Beerware')
groups=()
depends=(bash bash-completion git vim)
makedepends=()
checkdepends=()
optdepends=(python reflector)
provides=()
conflicts=()
replaces=(kamil-scripts)
backup=(etc/bash_completion.d/kamil-scripts.sh)
options=()
install="$pkgname.install"
changelog=
source=(PKGBUILD)
noextract=()
md5sums=('SKIP')
validpgpkeys=()


assert() {
	if ! eval "$1"; then
		local _assertion="$1"
		shift
		echo "Assertion $_assertion failed: " "$@" >&2
		exit 2
	fi
}

create_symlinks() {
	local srcdir lntgt destdir srcname destname src dest files tmp
	srcdir="$1"
	lntgtdir="$2"
	destdir="$3"
	srcname="$4"
	destname="$5"
	assert '[ -d "$srcdir" ]' ""
	assert '[ -d "$destdir" ]' ""

	lntgt=$(readlink -m "$lntgtdir"/"$srcname")
	src=$(readlink -m "$srcdir/$srcname")
	dest=$(readlink -m "$destdir"/"$destname")

	assert '[ -d "$src" ]' "Director '$src' not found."
	assert 'ls -1qA "$src" | grep -q .' "Directory '$src' is empty."

	echo "create_symlinks: $lntgt/* -> $dest"

	# create the root directory
	mkdir -v -p "$dest"

	# create all directories that needed to be created
	{ cd "$src" && find . -mindepth 1 -type d -print0; } |
	cut -z -c3- |
	xargs -t -0 -I{} mkdir -p -v "$dest"/{}

	# create all the files symlinks
	{ cd "$src" && find . -mindepth 1 -type f -print0; } |
	cut -z -c3- |
	xargs -t -0 -I{} ln -v -s "$lntgt"/{} "$dest"/{}

	# symlinks stay as they are
	{ cd "$src" && find . -mindepth 1 -type l -print0; } |
	cut -z -c3- |
	xargs -t -0 -I{} cp -n -v -d "$lntgt"/{} "$dest"/{}

	# check that there are no other file types in the source dir
	{ cd "$src" && find . -mindepth 1 -not \( -type d -or -type f -or -type l \); } |
	{
		if read a; then
			assert 'false' "There are files in the $src directory that are not handled by the script: '$src/$a'" 
		fi
	}
}

package() { (

	local DIR
	set -euo pipefail -e errtrace
	rm -v PKGBUILD
	
	DIR=$(git rev-parse --show-toplevel)

	while read -r from to; do
		create_symlinks "$DIR" /usr/lib/kamilscripts "$pkgdir" "$from" "$to"
		echo
	done <<'EOF'
		bin               /usr/bin
		systemd           /usr/lib/systemd
		bash-completions  /usr/share/bash-completion/completions
EOF

	chown root:root -v -R "$pkgdir"/*

); }

