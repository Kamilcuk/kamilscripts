#!/bin/bash

# Private functions ###########################

dir=/usr/lib/kamilscripts

logpipe() {
	sed 's/^/kamilscripts: /'
}

archzfs_add() {
	local key=F75D9D76
	if ! pacman-key -l 2>/dev/null | grep -q "$key\$"; then
		echo "Adding archzfs key to pacman-key"
		pacman-key -r "$key"
		pacman-key --lsign-key "$key"
		echo "archzfs added to pacman keyring"
	else
		echo "archzfs key already added to pacman keyring"
	fi
}

systemctl_reload() {
	if hash systemctl >/dev/null; then
		systemctl daemon-reload || :
	fi
}

git_repo_update() {
	httpsrc='https://gitlab.com/Kamcuk/kamilscripts.git'
	if [ -d "$dir"/.git ]; then
		echo "git -C $dir pull"
		timeout 5 git -C "$dir" pull
	else
		echo "Initializing git repository in $dir"
		[ -d "$dir" ] && rmdir -v "$dir"
		echo "git clone $httpsrc $dir"
		timeout 30 git clone "$httpsrc" "$dir"
	fi
}

git_repo_remove() {
	echo "Removing everything from $dir directory"
	rm -rf "$dir"
}

provision_cfg_files() {
	local add mark
	add=${1:-}
	mark="# %s kamilscript MANAGED BLOCK"
	export PATH=$PATH:$dir/bin
	blockinfile.sh $add -m "$mark" -b "Include = $dir/etc/pacman.conf" /etc/pacman.conf
	blockinfile.sh $add -m "$mark" -b "[ -r $dir/etc/bash.bashrc ] && source $dir/etc/bash.bashrc" /etc/bash.bashrc
	blockinfile.sh $add -m "\"$mark" -b "runtime! $dir/etc/vimrc" /etc/vimrc
	if [ -e '/etc/ssh/ssh_config' ]; then
		blockinfile.sh $add -m "$mark" -b "Include $dir/etc/ssh_config" /etc/ssh/ssh_config
	fi
}

unprovision_cfg_files() {
	provision_cfg_files -d
}

post_install_or_upgrade() {
	systemctl_reload
	archzfs_add
	git_repo_update
	provision_cfg_files
}

remove() {
	export PATH=$PATH:$dir/bin
	systemctl_reload
	unprovision_cfg_files
	git_repo_remove
}

# Public functions #############################

## arg 1:  the new package version
pre_install() {
	:
}

## arg 1:  the new package version
post_install() {
	post_install_or_upgrade 2>&1 | logpipe
}

## arg 1:  the new package version
## arg 2:  the old package version
pre_upgrade() {
	:
}

## arg 1:  the new package version
## arg 2:  the old package version
post_upgrade() {
	post_install_or_upgrade 2>&1 | logpipe
}

## arg 1:  the old package version
pre_remove() {
	remove 2>&1 | logpipe
}

## arg 1:  the old package version
post_remove() {
	:
}

