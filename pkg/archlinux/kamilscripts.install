#!/bin/bash

# Private functions ###########################

dir=/usr/lib/kamilscripts

logpipe() {
	sed 's/^/kamilscripts: /'
}

archzfs_add() {
	if ! pacman-key -l 2>/dev/null | grep -q "archzfs\$"; then
		echo "Adding archzfs key to pacman-key"
		curl -L https://archzfs.com/archzfs.gpg |  pacman-key -a -
		pacman-key --lsign-key "$(curl -L https://git.io/JsfVS)"
		curl -L https://git.io/Jsfw2 > /etc/pacman.d/mirrorlist-archzfs
		echo "archzfs added to pacman keyring"
	else
		echo "archzfs key already added to pacman keyring"
	fi
}

systemctl_reload() {
	if hash systemctl >/dev/null; then
		systemctl daemon-reload || :
	fi
}

git_repo_update() {
	httpsrc='https://gitlab.com/Kamcuk/kamilscripts.git'
	if [ -d "$dir"/.git ]; then
		user=$(stat --printf="%U" "$dir"/.git) ||:
		echo "sudo -u $user git -C $dir pull"
		timeout 5 sudo -u "$user" git -C "$dir" pull ||:
	else
		echo "Initializing git repository in $dir"
		[ -d "$dir" ] && rmdir -v "$dir"
		echo "git clone $httpsrc $dir"
		timeout 30 git clone "$httpsrc" "$dir"
	fi
}

git_repo_remove() {
	echo "Removing everything from $dir directory"
	rm -rf "$dir"
}

provision_cfg_files() {
	local mark file
	mark="# %s kamilscript MANAGED BLOCK"
	export PATH=$PATH:$dir/bin
	case "$(uname -a)" in
	*arm*) file="arm.conf"; ;;
	*) file="pacman.conf"; ;;
	esac
	blockinfile.sh "$@" -m "$mark" -b "Include = $dir/etc/pacman.d/$file" /etc/pacman.conf
}

unprovision_cfg_files() {
	provision_cfg_files -d
}

post_install_or_upgrade() {
	systemctl_reload
	archzfs_add
	git_repo_update
	provision_cfg_files
	echo "Add gnupg kamilcukrowski keys to pacman"
	curl https://kamcuk.gitlab.io/arch-repo/kamilcukrowski-public-gpg.txt | gpg --homedir /etc/pacman.d/gnupg --import
	curl https://kamcuk.gitlab.io/arch-repo/kamilcukrowski-ownertrust-gpg.txt | gpg --homedir /etc/pacman.d/gnupg --import-ownertrust

}

remove() {
	export PATH=$PATH:$dir/bin
	systemctl_reload
	unprovision_cfg_files
	git_repo_remove
}

# Public functions #############################

## arg 1:  the new package version
pre_install() {
	:
}

## arg 1:  the new package version
post_install() {
	post_install_or_upgrade 2>&1 | logpipe
}

## arg 1:  the new package version
## arg 2:  the old package version
pre_upgrade() {
	:
}

## arg 1:  the new package version
## arg 2:  the old package version
post_upgrade() {
	post_install_or_upgrade 2>&1 | logpipe
}

## arg 1:  the old package version
pre_remove() {
	remove 2>&1 | logpipe
}

## arg 1:  the old package version
post_remove() {
	:
}

