" kamilscripts/vim/vimrc

" Init {{{

source $VIMRUNTIME/defaults.vim

if $LC_CTYPE == 'pl_PL.UTF-8'
	source $VIMRUNTIME/delmenu.vim
	set langmenu=pl_PL.UTF-8
	language pl_PL.UTF-8
	source $VIMRUNTIME/menu.vim
endif

" }}}
" Load kamilscripts and add runtime paths {{{

for i in [
		\ '/usr/lib/kamilscripts/',
		\ $HOME . '/.config/kamilscripts/kamilscripts/',
		\ $HOME . '/.local/kamilscripts/',
		\ $HOME . '/.config/kamilscripts/',
		\ ]
	if isdirectory(i) && isdirectory(i. '/vim')
		let g:kamilscripts = i
		break
	endif
endfor
unlet i

" set the runtime path to include Vundle and initialize
if exists("g:kamilscripts") && filereadable(g:kamilscripts . 'vim/bundle/vim-pathogen/autoload/pathogen.vim')
	execute 'source ' . g:kamilscripts . '/vim/bundle/vim-pathogen/autoload/pathogen.vim'
	execute pathogen#infect(
				\ g:kamilscripts . 'vim',
				\ g:kamilscripts . 'vim/bundle/{}',
				\ g:kamilscripts . 'vim/ebundle/{}/{}' )
else
	autocmd VimEnter * echom "~/.vimrc: ERROR: No g:kamilscripts"
endif

" }}}
" Global configuration {{{

" HOW-TO make vim not suck Out of the Box
set nocompatible   " This option has the effect of making Vim either more Vi-compatible, or make Vim behave in a more useful way.
set ruler          " Show the line and column number of the cursor position, separated by a comma
set laststatus=2   " The value of this option influences when the last window will have a status line:
set showcmd        " Show (partial) command in the last line of the screen.
set showmode       " If in Insert, Replace or Visual mode put a message on the last line.
set incsearch      " While typing a search command, show where the pattern, as it was typed so far, matches.
set ignorecase     " Ignore case in search patterns.
set smartcase      " Override the 'ignorecase' option if the search pattern contains upper case characters.
set hlsearch       " When there is a previous search pattern, highlight all its matches.
set number
set relativenumber
set autowriteall
set hidden
set swapfile      " When this option is not empty a swap file is synced to disk after writing to it.
set writebackup   " Make a backup before overwriting a file.
set nobackup      " Turn on backup option
set autoindent    " Copy indent from current line when starting a new line
set history=5000
set pastetoggle=<F2>
filetype plugin indent on
syntax enable
set encoding=utf-8
set nofoldenable

set tabstop=4      " The width of a hard tabstop measured in spaces -- effectively the (maximum) width of an actual tab character.
set shiftwidth=4   " The size of an indent. It's also measured in spaces, so if your code base indents with tab characters then you want shiftwidth to equal the number of tab characters times tabstop. This is also used by things like the =, > and < commands.
set softtabstop=0  " Setting this to a non-zero value other than tabstop will make the tab key (in insert mode) insert a combination of spaces (and possibly tabs) to simulate tab stops at this width.
set noexpandtab    " Enabling this will make the tab key (in insert mode) insert spaces instead of tab characters. This also affects the behavior of the retab command.
set nosmarttab     " Enabling this will make the tab key (in insert mode) insert spaces or tabs to go to the next indent of the next tabstop when the cursor is at the beginning of a line (i.e. the only preceding characters are whitespace).

" https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode
set backspace=indent,eol,start  " let backspece delete everything in intsert mode

" Tell vim to remember certain things when we
set viminfo='100,/50,:5000,<800,@500,h,n~/.cache/vim/viminfo
"           |    |   |     |    |    | + viminfo file path
"           |    |   |     |    |    + disable 'hlsearch' loading viminfo
"           |    |   |     |    + items in the input-line history
"           |    |   |     + number of lines for each register
"           |    |   + items in the command-line history
"           |    + search history saved
"           + number of edited files for which marks are remembered

" https://vim.fandom.com/wiki/Folding
setlocal foldmethod=syntax
setlocal foldnestmax=10
setlocal nofoldenable
setlocal foldlevel=0

set wildignore+=*/node_modules/*,_site,*/__pycache__/,*/venv/*,*/target/*,*/.vim$,\~$,*/.log,*/.aux,*/.cls,*/.aux,*/.bbl,*/.blg,*/.fls,*/.fdb*/,*/.toc,*/.out,*/.glo,*/.log,*/.ist,*/.fdb_latexmk
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe

set cmdheight=2

set shell=bash


if 0
	" change backupdir to temporary directory
	" not needed - all caches are now stored in cache
	let myvimbackupdir = '/tmp/.vimbackupdir-'.$USER.'/'
	if !isdirectory(myvimbackupdir) | call mkdir(myvimbackupdir) | call setfperm(myvimbackupdir, 'rxwrxwrxw') | endif
	execute 'set backupdir^='.myvimbackupdir
	execute 'set directory^='.myvimbackupdir
	execute 'set backupskip^='.myvimbackupdir.'*'
	unlet myvimbackupdir
endif

" I do not like mouse
set mouse=
autocmd BufEnter ?* set mouse=

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=20000

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

set signcolumn=yes

" }}}
" Some view things {{{

" See kamilscript/autoload/viewrestore.vim
" call viewrestore#enable()

" Highlight current line when leaving buffer buffer
" https://vim.fandom.com/wiki/Highlight_current_line
if 0 | augroup CursorLine
	au!
	au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
	au WinLeave * setlocal nocursorline
augroup END | endif
set cursorline
set nocursorcolumn

" Change cursor to | in insert mode.
" https://vi.stackexchange.com/questions/9131/i-cant-switch-to-cursor-in-insert-mode
if has('vim')
	let &NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
else
	let &t_SI = "\<esc>[5 q"
	let &t_SR = "\<esc>[5 q"
	let &t_EI = "\<esc>[2 q"
endif

" }}}
" Automatically generate tags for my documentation files {{{

" Automatically generate tags for custom documentation files
" https://vim.fandom.com/wiki/Add_your_note_files_to_Vim_help
autocmd BufWritePost ~/.vim/doc/* :helptags ~/.vim/doc
if exists('g:kamilscripts')
	autocmd BufWritePost g:kamilscripts . "/vim/doc/*" :helptags g:kamilscripts . "/vim/doc"
endif

" }}}
" Miscellaneous {{{

" https://vim.fandom.com/wiki/Cscope
if has('cscope') && has('quickfix')
	set cscopetag
	set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-,a-
endif

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
	if (has("nvim"))
		"For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
		let $NVIM_TUI_ENABLE_TRUE_COLOR=1
	endif
	"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
	"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
	" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
	if (has("termguicolors"))
		set termguicolors
	endif
endif

" netrw
let g:netrw_home = $XDG_CACHE_HOME.'/vim'
let g:netrw_dirhistmax = 0
" Disable netrw gx mapping., search openbrowser-open
let g:netrw_nogx = 0

" See :help doxygen.vim
let g:load_doxygen_syntax=1

" }}}
" Plugins {{{

if exists('g:kamilscripts')
	let &spellfile = g:kamilscripts . "vim/spellfiles/en.utf-8.add"
endif

function KcPluginEnabled(name)
	for i in pathogen#split(&rtp)
		if fnamemodify(i, ':t') =~ a:name
			return 1
		endif
	endfor
	return 0
endfunction

packadd! editexisting

" Termdebug configuration
let g:termdebug_use_prompt = 0
let g:termdebug_wide = 163
hi debugPC term=reverse ctermbg=lightblue guibg=lightblue
hi debugBreakpoint term=reverse ctermbg=red guibg=red

" open-browser.vim plugin
nmap gx <Plug>(openbrowser-open)
vmap gx <Plug>(openbrowser-open)

" Disable syntastic for C and C++, where coc-clangd is used.
" https://stackoverflow.com/questions/31818109/how-to-selectively-disable-checkers-for-certain-file-types-when-using-syntastic
let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "passive_filetypes": [
	\ "c",
	\ "c++",
	\ "vim",
	\ ]}

" https://github.com/thoughtbot/dotfiles/pull/641
" Set tags for fugitive
set tags^=./.git/tags;

" luochen1990/rainbow configuration
let g:rainbow_active = 1 " be active
let g:rainbow_conf = {'separately':{
			\ 'cmake': 0,
			\ 'c': 0,
			\ 'cpp': 0,
			\ }}

" coc.nvim
if exists("g:kamilscripts")
	let g:coc_config_home = g:kamilscripts . "vim/coc-settings"
endif
let g:coc_global_extensions	= [
			\ 'coc-clangd', 'coc-cmake', 'coc-highlight', 'coc-json', 'coc-vimlsp', 
			\ 'coc-python', 'coc-yaml' ]

if KcPluginEnabled('vim-airline')
	let g:airline#extensions#tabline#enabled = 1
endif

if KcPluginEnabled('vim-workspace')
	let g:workspace_create_new_tabs = 0
	let g:workspace_session_directory = $HOME . '/.vim/sessions/'
	let g:workspace_persist_undo_history = 1  " enabled = 1 (default), disabled = 0
	let g:workspace_undodir = $HOME . '/.vim/undodir/'
	let g:workspace_nocompatible = 0
	let g:workspace_session_disable_on_args = 1
endif

if KcPluginEnabled('vim-tips')
	let g:vim_tips_tips_frequency = 0.5
endif

" morhetz/gruvbox
"let g:gruvbox_contrast_dark = 'hard'
"let g:gruvbox_contrast_light = 'hard'
"let g:gruvbox_guisp_fallback = "bg"

" https://github.com/derekwyatt/vim-fswitch
"let g:fsnonewfiles = 0
"autocmd FileType c,cpp  let b:fswitchlocs = './,../include,reg:/src/include/'
"autocmd BufEnter *.c    let b:fswitchdst = 'h'
"autocmd BufEnter *.h    let b:fswitchdst = 'c,cpp'
"autocmd BufEnter *.cpp  let b:fswitchdst = 'h,hpp'
"autocmd BufEnter *.hpp  let b:fswitchdst = 'cpp'

" https://github.com/aperezdc/vim-template
let g:templates_no_autocmd = 1
if exists('g:kamilscripts')
	let g:templates_directory = [ g:kamilscripts . "/vim/templates/" ]
endif

if 0
	" Add nice versions of background jobs if available
	" The nice versions are within kamilscripts/bin
	if !exists('g:ycm_server_python_interpreter') && executable(',nicepython3')
		let g:ycm_server_python_interpreter = ',nicepython3'
	endif
	if get(g:, 'ycm_clangd_binary_path', '/usr/bin/clangd') == '/usr/bin/clangd' && executable(',niceclangd')
		let g:ycm_clangd_binary_path = ',niceclangd'
	endif
	if !exists('g:gutentags_cscope_executable') && executable(',nicecscope')
		let g:gutentags_cscope_executable = ',nicecscope'
	endif
	if !exists('g:gutentags_ctags_executable') && executable(',nicectags')
		let g:gutentags_ctags_executable = ',nicectags'
	endif
endif

" ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
" https://github.com/FelikZ/ctrlp-py-matcher
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
let g:ctrlp_extensions = []
" ctrlp oldfiles plugin
let g:ctrlp_extensions += ['oldfiles']
command! CtrlPoldfiles call ctrlp#init(ctrlp#oldfiles#id())

" https://github.com/ggreer/the_silver_searcher
if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif

if 0
	" gen_tags.vim
	let g:loaded_gentags#ctags = 0
	let g:gen_tags#gtags_auto_gen = 1
	let g:gen_tags#gtags_auto_update = 1
	let g:gen_tags#blacklist = [ $HOME ]
	let g:gen_tags#statusline = 0
	let g:gen_tags#gtags_default_map = 0
	let g:gen_tags#use_cache_dir = 0
	let g:gen_tags#cache_dir = ".cache"
endif

" goldenratio
" Don't resize automatically.
let g:golden_ratio_autocommand = 0
" Mnemonic: - is next to =, but instead of resizing equally, all windows are
" resized to focus on the current.
nmap <C-w>- <Plug>(golden_ratio_resize)
" Fill screen with current window.
nnoremap <C-w>+ <C-w><Bar><C-w>_

if 0 " KcPluginEnabled('youcompleteme')
	if !exists('g:ycm_clangd_binary_path') && filereadable('/usr/bin/clangd')
		let g:ycm_clangd_binary_path = '/usr/bin/clangd'
	endif
	let g:ycm_autoclose_preview_window_after_completion = 1
	let g:ycm_confirm_extra_conf = 0
	let g:ycm_auto_hover = ''
	let g:ycm_enable_hover = 1
	nnoremap <leader>d  :YcmShowDetailedDiagnostic<CR>
	nnoremap <leader>Q  :YcmDiags<CR> " matches [q ]q moves from the other thingi
	" https://gitter.im/Valloric/YouCompleteMe?at=5d3183545ea6e644ecdf5a7a
	nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
	nnoremap <leader>gr :YcmCompleter GoToReferences<CR>
	nnoremap <leader>gt :YcmCompleter GoToInclude<CR>
	nnoremap <leader>gf :YcmCompleter FixIt<CR>
	nnoremap <leader>gK :YcmCompleter GetDoc<CR>
	nnoremap <leader>gR :YcmCompleter RefactorRename<Space>
	nnoremap <leader>gF :YcmCompleter Format<CR>
	"
	let g:ycm_collect_identifiers_from_tags_files = 1
	"
	let g:ycm_global_ycm_extra_conf = g:kamilscripts . 'vim/youcompleteme/ycm_extra_conf.py'
	let g:ycmconf_loglevel = 0
	let g:ycmconf_extra_flags = []
	let g:ycm_extra_conf_vim_data = [ 'g:ycmconf_loglevel', 'g:ycmconf_extra_flags' ]
endif

if 0 " KcPluginEnabled('gutentags')
	let g:gutentags_dont_load = 1
	let g:gutentags_ctags_exclude = [
		\ '*.git', '*.svg', '*.hg', '.git', '.github',
		\ '*/tests/*', '_build', '.build', 'build', '.clangd',
		\ 'dist', '*sites/*/files/*',
		\ 'bin', 'node_modules', 'bower_components', 'cache', 'compiled',
		\ 'docs', 'example', 'bundle', 'vendor', '*.md',
		\ '*-lock.json', '*.lock', '*bundle*.js', '*build*.js',
		\ '.*rc*', '*.json', '*.html', '*.min.*', '*.map', '*.bak',
		\ '*.zip', '*.pyc', '*.class', '*.sln', '*.Master', '*.csproj', '*.tmp',
		\ '*.csproj.user', '*.cache', '*.pdb', 'tags*', 'cscope.*', '*.css',
		\ '*.less', '*.scss', '*.exe', '*.dll', '*.mp3', '*.ogg', '*.flac', '*.swp', '*.swo',
		\ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
		\ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
		\ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
		\ '*.map', '*.ld', '*.txt', '.vscode', '*.key',
		\ '*.json', '*.cproject', '*.project', 
		\ ]
	let g:gutentags_modules = ['ctags', 'gtags_cscope']
	let g:gutentags_generate_on_new = 1
	let g:gutentags_generate_on_missing = 1
	let g:gutentags_generate_on_write = 1
	let g:gutentags_generate_on_empty_buffer = 0
	let g:gutentags_cscope_build_inverted_index = 1
	let g:gutentags_ctags_extra_args = [
		\ '--tag-relative=yes',
		\ '-h=.c.h.cpp.hpp.asm.cmake.make',
		\ '--fields=+ailmnS',
		\ ]
	let g:gutentags_ctags_exclude += [
		\ '*/Unity/examples',
		\ '*/Unity/extra',
		\ '*/Unity/test',
		\ '_build_tools/*/examples',
		\ ]
	let g:gutentags_trace = 0
	let g:gutentags_find_args = " -path ./_build -prune -o -regextype egrep -regex .*\.(cpp|hpp|[hcsS])$ "
endif

" smooth-scroll
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 5, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 5, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 5, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 5, 4)<CR>

" https://github.com/samoshkin/vim-mergetool
function s:on_mergetool_set_layout(split)
	set syntax=off
	set nospell
endfunction
let g:MergetoolSetLayoutCallback = function('s:on_mergetool_set_layout')
let g:mergetool_layout = 'lmr'

" showmarks
let g:showmarks_add_maps = 0
let g:showmarks_ignore_type = 'hpq'

" }}}
" Color scheme {{{
colorscheme kamilcuk
" }}}
" Shortcuts {{{

" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
" https://vim.fandom.com/wiki/Map_semicolon_to_colon
map ; :
noremap ;; ;
" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

" Close quickfix window with ESC
" https://github.com/mhinz/vim-grepper/issues/117
"augroup vimrcQfClose
"    autocmd!
"    autocmd FileType qf if mapcheck('<esc>', 'n') ==# '' | nnoremap <buffer><silent> <esc> :cclose<bar>lclose<CR> | endif
"augroup END

nnoremap <leader>w :ToggleWorkspace<CR>

" https://vim.fandom.com/wiki/Search_and_replace_the_word_under_the_cursor
nnoremap <leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

if 0
	function g:MyCscope(arg)
		cexpr []
		execute 'botright copen ' get(g:, 'dispatch_quickfix_height', '')
		wincmd p
		cscope find s:arg <cword>
	endfunction
	nnoremap <leader>fa :call MyCscope("a")<CR>
	nnoremap <leader>fs :call MyCscope("s")<CR>
	nnoremap <leader>fd :call MyCscope("d")<CR>
	nnoremap <leader>fc :call MyCscope("c")<CR>
	nnoremap <leader>ft :call MyCscope("t")<CR>
	nnoremap <leader>fe :call MyCscope("e")<CR>
	nnoremap <leader>ff :call MyCscope("f")<CR>
	nnoremap <leader>fi :call MyCscope("i")<CR>
	nnoremap <leader>fg :call MyCscope("g")<CR>
endif

if KcPluginEnabled('nerdtree.vim')
	nmap <C-n> :NERDTreeToggle<CR>
	let NERDTreeAutoDeleteBuffer = 1
	let NERDTreeMinimalUI = 1
endif

nmap <C-w><C-e> :bdelete<CR>

if &diff
	function MLayoutCompletion(ArgLead, CmdLine, CursorPos)
		return [ "mr", "lmr", "bmr", "LBR" ]
	endfunction
	command MLayout -nargs=1 -complete=customlist, :MergetoolToggleLayout <q-args><CR>
	nmap <leader>mt <plug>(MergetoolToggle)
	nmap <expr> <C-Left> &diff? '<Plug>(MergetoolDiffExchangeLeft)' : '<C-Left>'
	nmap <expr> <C-Right> &diff? '<Plug>(MergetoolDiffExchangeRight)' : '<C-Right>'
	nmap <expr> <C-Down> &diff? '<Plug>(MergetoolDiffExchangeDown)' : '<C-Down>'
	nmap <expr> <C-Up> &diff? '<Plug>(MergetoolDiffExchangeUp)' : '<C-Up>'
endif

if expand('%') =~ ".git/rebase-merge/git-rebase-todo"
	nmap <leader>o :normal oexec git gui<CR><Esc><Down>
endif

command VimConfig :edit ~/.vimrc

" }}}
" coc.nvim {{{

" https://github.com/neoclide/coc.nvim/blob/master/README.md#example-vim-configuration

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
	  \ pumvisible() ? "\<C-n>" :
	  \ <SID>check_back_space() ? "\<TAB>" :
	  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> <leader>k :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup coc-nvim-mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" yay I'm here

" Remap <C-f> and <C-b> for scroll float windows/popups.
" Note coc#float#scroll works on neovim >= 0.4.3 or vim >= 8.2.0750
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
"nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" }}}
" Project specific {{{

" Seamlessly detect cmake out-of-source build errors in subdirectories
let &errorformat = '../../../%f:%l:%c: %m,../../%f:%l:%c: %m,../%f:%l:%c: %m,' . &errorformat

if getcwd() == "/home/work/beacon"
	let g:beacon_hw = "4.7"
	let g:coc_config_home = g:kamilscripts . "vim/coc-settings/beacon"
	function! Qfunc(...)
		execute "Dispatch -compiler=make unbuffer make hw=" . g:beacon_hw . " " . a:1
	endfunction
	autocmd BufEnter ?* let b:dispatch = ":Qdebug"
	command Qdebug    call Qfunc("debug")
	command Qrelease  call Qfunc("release pcb_test=0")
	command Qprogram  call Qfunc("program")

	let g:termdebugger = 'arm-none-eabi-gdb'
	command QDebug  call Dbg_jlink_start({
				\ "file": "_build/onemeter.elf",
				\ "jlink_args": " -device nRF51822_xxAC -if swd -select USB "
				\ })
endif

" }}}

" vim: filetype=vim:foldmethod=marker
