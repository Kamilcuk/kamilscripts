" kamilscripts/vim/vimrc

" Init {{{1

if get(g:, 'loaded_kamilscripts_vimrc', 0)
	finish
endif
let g:loaded_kamilscripts_vimrc = 1

" Ignore missing terminfo - ie. wrong TERM.
if 0 && &t_cm == ""
	" It still _will_ work with 99% of nowadays terminals anyway.
	echo dupa
	let &t_cm = "\<esc>[%i%p1%d;%p2%dH"
endif

if !has('nvim') && filereadable(expand('$VIMRUNTIME/defaults.vim'))
	source $VIMRUNTIME/defaults.vim
endif

if 0 && $LC_CTYPE == 'pl_PL.UTF-8'
	source $VIMRUNTIME/delmenu.vim
	set langmenu=pl_PL.UTF-8
	language pl_PL.UTF-8
	source $VIMRUNTIME/menu.vim
endif

" }}}
" Global configuration {{{1

if !isdirectory(expand('~/.vim'))
	call mkdir(expand('~/.vim'))
endif

" HOW-TO make vim not suck Out of the Box
set nocompatible   " This option has the effect of making Vim either more Vi-compatible, or make Vim behave in a more useful way.
set ruler          " Show the line and column number of the cursor position, separated by a comma
set laststatus=2   " The value of this option influences when the last window will have a status line:
set showcmd        " Show (partial) command in the last line of the screen.
set showmode       " If in Insert, Replace or Visual mode put a message on the last line.
set incsearch      " While typing a search command, show where the pattern, as it was typed so far, matches.
set ignorecase     " Ignore case in search patterns.
set smartcase      " Override the 'ignorecase' option if the search pattern contains upper case characters.
set hlsearch       " When there is a previous search pattern, highlight all its matches.
set number
set relativenumber
set autowriteall
set hidden
set swapfile
set writebackup
set nobackup
set autoindent
set history=5000
set pastetoggle=<F2>
filetype plugin indent on
syntax enable
set encoding=UTF-8
set nofoldenable
set modeline

set tabstop=4      " The width of a hard tabstop measured in spaces -- effectively the (maximum) width of an actual tab character.
set shiftwidth=4   " The size of an indent. It's also measured in spaces, so if your code base indents with tab characters then you want shiftwidth to equal the number of tab characters times tabstop. This is also used by things like the =, > and < commands.
set softtabstop=0  " Setting this to a non-zero value other than tabstop will make the tab key (in insert mode) insert a combination of spaces (and possibly tabs) to simulate tab stops at this width.
set noexpandtab    " Enabling this will make the tab key (in insert mode) insert spaces instead of tab characters. This also affects the behavior of the retab command.
set nosmarttab     " Enabling this will make the tab key (in insert mode) insert spaces or tabs to go to the next indent of the next tabstop when the cursor is at the beginning of a line (i.e. the only preceding characters are whitespace).

" https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode
set backspace=indent,eol,start  " let backspece delete everything in intsert mode

" https://stackoverflow.com/questions/2288756/how-to-set-working-current-directory-in-vim
"set autochdir
"Messes up any plugin configuration

" https://vi.stackexchange.com/questions/19680/how-can-i-make-vim-not-use-the-entire-screen-for-spelling-suggestions
set spellsuggest+=10

" Tell vim to remember certain things when we
let tmp = expand(!has('nvim') ? '~/.cache/vim/viminfo' : '~/.local/share/nvim/shada/main.shada')
if !isdirectory(fnamemodify(tmp, ':h'))
	call mkdir(fnamemodify(tmp, ':h'), 'p')
endif
" Remove ~/.viminfo
if filereadable(expand('~/.viminfo'))
	silent !mkdir -p ~/.cache/vim && mv ~/.viminfo ~/.cache/vim/viminfo.old
endif
let &viminfo="'100,/50,:5000,<800,@500,h,n" . tmp
"             |    |   |     |    |    | + viminfo file path
"             |    |   |     |    |    + disable 'hlsearch' loading viminfo
"             |    |   |     |    + items in the input-line history
"             |    |   |     + number of lines for each register
"             |    |   + items in the command-line history
"             |    + search history saved
"             + number of edited files for which marks are remembered
unlet tmp

" https://stackoverflow.com/questions/17936130/vim-undo-undo-changes-after-file-write
if has('persistent_undo')    "check if your vim version supports it
	set undofile             "turn on the feature
	if !has('nvim')
		set undodir=~/.vim/undo  "directory where the undo files will be stored
	endif
endif

" https://vim.fandom.com/wiki/Folding
set foldmethod=syntax
set foldnestmax=10
set nofoldenable
set foldlevel=0

set wildignore+=*/node_modules/*,_site,*/__pycache__/,*/venv/*,*/target/*,*/.vim$,\~$,*/.log,*/.aux,*/.cls
set wildignore+=*/.aux,*/.bbl,*/.blg,*/.fls,*/.fdb*/,*/.toc,*/.out,*/.glo,*/.log,*/.ist,*/.fdb_latexmk
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe

set cmdheight=2

if executable('bash')
	set shell=bash
endif

set exrc

" I do not like mouse
set mouse=
autocmd BufEnter ?* set mouse=

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
if v:version >= 800
	set shortmess+=c
endif

if v:version >= 800
	let &signcolumn='yes'.(!has('nvim')?'':':2')
endif

set scrolloff=6

" https://github.com/thaerkh/vim-workspace/issues/11
set sessionoptions-=blank

set display+=uhex

" https://stackoverflow.com/questions/36724209/disable-beep-of-linux-bash-on-windows-10
set visualbell

" }}}
" Load kamilscripts {{{1

if !exists('g:kamilscripts')
	for i in [
			\ '/usr/lib/kamilscripts/',
			\ $HOME . '/.config/kamilscripts/kamilscripts/',
			\ $HOME . '/.local/kamilscripts/',
			\ $HOME . '/.config/kamilscripts/',
			\ $HOME . '/.kamilscripts/',
			\ ]
		if isdirectory(i) && isdirectory(i.'/vim') && isdirectory(i.'/.git')
			let g:kamilscripts = i
			break
		endif
	endfor
	unlet i
endif

if !exists('g:kamilscripts')
	echoe '~/.vimrc: ERROR: No g:kamilscripts'
else
	execute 'set rtp^=' . g:kamilscripts . 'vim'
	let &spellfile = g:kamilscripts . "vim/spellfiles/en.utf-8.add"
endif

" Automatically generate tags for custom documentation files
" https://vim.fandom.com/wiki/Add_your_note_files_to_Vim_help
autocmd BufWritePost ~/.vim/doc/* :helptags ~/.vim/doc
if exists('g:kamilscripts')
	autocmd BufWritePost g:kamilscripts . "/vim/doc/*" :helptags g:kamilscripts . "/vim/doc"
endif

" }}}
" Load plugins with vim-plug {{{1
"
if !filereadable(expand('~/.vim/plugged/vim-plug/plug.vim'))
	if !isdirectory(expand('~/.vim/plugged/vim-plug/'))
		call mkdir(expand('~/.vim/plugged/vim-plug/'), "p")
	endif
	!git clone https://github.com/junegunn/vim-plug ~/.vim/plugged/vim-plug/
endif

if exists('g:kamilscripts') && filereadable(expand('~/.vim/plugged/vim-plug/plug.vim'))

	command -nargs=+ -bar KcPlug8 " Empty. Only enable in vim version above 800
	command -nargs=+ -bar KcPlugCoc " Empty. Only enable when coc is able to be enabled
	if v:version >= 800
		command! -nargs=+ -bar KcPlug8 call plug#(<args>)
		if executable('node') && executable('npm') && executable('yarn')
			command! -nargs=+ -bar KcPlugCoc call plug#(<args>)
		endif
	endif
	function KcUpdate()
		PlugUpgrade
		PlugUpdate
		if exists(':CocUpdate')
			CocUpdate
		endif
		call kc#Redir('!cd '.g:kamilscripts.' && ./update.sh', 0, 0, 0)
	endfunction
	command Update call KcUpdate()

	filetype off
	execute 'source ~/.vim/plugged/vim-plug/plug.vim'
	call plug#begin('~/.vim/plugged')

	" My Plugins
	" Plug 'tpope/vim-dispatch' " Asynchronous build and test dispatcher
	Plug 'kamilcuk/vim-dispatch'
	"KcPlug8 g:kamilscripts . 'vim/ebundle/my/dbg'
	"KcPlug8 'puremourning/vimspector'
	" Plug g:kamilscripts . 'vim/bundle/vim-dispatch' " Vim dispatch patched, see below
	" staging2
	Plug 'ojroques/vim-oscyank'
	Plug 'subnut/visualstar.vim'
	Plug 'flwyd/nerdtree-harvest'
	" Plug 'abdalrahman-ali/vim-remembers' Changes working directory!
	Plug  'joshzcold/DrawIt'
	"Plug 'LucHermitte/lh-vim-lib'
	"Plug 'LucHermitte/lh-tags'
	"Plug 'LucHermitte/lh-dev'
	"Plug 'LucHermitte/lh-style'
	"Plug 'LucHermitte/lh-brackets'
	"Plug 'LucHermitte/vim-refactor'
	"Plug '907th/vim-auto-save'
	Plug 'chr4/nginx.vim'
	KcPlug8 'lervag/vimtex', { 'for': 'tex' } " The plugin for tex
	" aaa_staging
	Plug 'junegunn/fzf' " fzf.vim needs it
	Plug 'junegunn/fzf.vim' " Things you can do with fzf and Vim
	KcPlug8 'kamykn/spelunker.vim' " Improved vim spelling plugin
	if exists('hunspell') || exists('aspell')
		KcPlug8 'konfekt/vim-DetectSpellLang' " make Vim autodetect the spellcheck language
	endif
	if exists('languagetool')
		Plug 'dpelle/vim-LanguageTool'
	endif
	Plug 'honza/vim-snippets' " vim-snipmate default snippets
	" Utilities
	Plug 'kamilcuk/vim-showmarks' " Show marks in file, patched to fix some stuff
	Plug 'kamilcuk/vim-ctrlp-oldfiles' " Search old files with ctrlp
	Plug 'arecarn/vim-crunch'
	Plug 'sbdchd/neoformat'
	" Generic
	Plug 'Konfekt/FastFold'
	Plug 'vim-scripts/LargeFile'
	Plug 'wellle/targets.vim'
	Plug 'airblade/vim-gitgutter'
	Plug 'mhinz/vim-hugefile'
	Plug 'tpope/vim-sensible' " Defaults everyone can agree on
	" Integration
	Plug 'salcode/vim-interactive-rebase-reverse' " reverse order commits during a Git rebase
	Plug 'tpope/vim-fugitive' " A Git wrapper so awesome, :Git
	Plug 'shumphrey/fugitive-gitlab.vim' " An extension to fugitive.vim for gitlab support
	Plug 'tpope/vim-rhubarb' " GitHub extension for fugitive.vim
	" Languages
	KcPlugCoc 'neoclide/coc.nvim', {'branch': 'release'}
	KcPlugCoc 'antoinemadec/coc-fzf' " Use FZF instead of coc.nvim built-in fuzzy finder
	KcPlugCoc 'jackguo380/vim-lsp-cxx-highlight', {'for': ['c', 'cpp']}
	Plug 'vim-syntastic/syntastic'
	"Plug 'derekwyatt/vim-fswitch'
	" Puppet https://voxpupuli.org/blog/2019/04/08/puppet-lsp-vim/
	Plug 'editorconfig/editorconfig-vim'
	Plug 'mrk21/yaml-vim'
	Plug 'rodjek/vim-puppet'
	Plug 'vim-ruby/vim-ruby'
	Plug 'lingua-pupuli/puppet-vscode'
	" utils
	Plug 'vimwiki/vimwiki' " make notes
	Plug 'sk1418/HowMuch' " calculate stuff
	Plug 'chrisbra/NrrwRgn' " select region and copy it to new buffer with :NR
	Plug 'mileszs/ack.vim' " Use ag/ack/ar grep faster alternatives
	KcPlug8 'jlanzarotta/bufexplorer' " Easier buffer opening/splitting/navigating
	Plug 'suy/vim-ctrlp-commandline' " Search ctrlp in command line also
	Plug 'FelikZ/ctrlp-py-matcher' " Faster ctrl-p matcher with python
	Plug 'kien/ctrlp.vim' " File searcher. THE file searcher.
	Plug 'idbrii/golden-ratio' " Automatic resizing of Vim windows to the golden ratio.
	Plug 'fidian/hexmode' " Vim plugin to edit binary files in a hex mode automatically.
	Plug 'preservim/nerdcommenter' " Comment lines with <leader>c<space>
	Plug 'preservim/nerdtree' " The file browser.
	Plug 'tyru/open-browser.vim' " Open URI with better browser 'gx'
	Plug 'luochen1990/rainbow' " Rainbow Parentheses
	Plug 'godlygeek/tabular' " Vim script for text filtering and alignment
	Plug 'tpope/vim-abolish' " abolish.vim: easily search for, substitute, and abbreviate multiple variants of a word
	Plug 'gyim/vim-boxdraw'
	" Plug 'aperezdc/vim-template' " Simple templates plugin for Vim
	Plug 'kamilcuk/vim-template', {'dir': '~/.vim/plugged/kamilcuk-vim-template'}
	Plug 'junegunn/vim-easy-align' " A Vim alignment plugin.
	Plug 'tpope/vim-eunuch' " Helpers for UNIX :SudoWrite :Delete :Remove :Rename
	Plug 'samoshkin/vim-mergetool' " Efficient way of using Vim as a Git mergetool
	Plug 'terryma/vim-smooth-scroll'
	Plug 'tpope/vim-surround' " quoting/parenthesizing made simple
	Plug 'dhruvasagar/vim-table-mode' "
	Plug 'tpope/vim-unimpaired' " Pairs of handy bracket mappings
	" For vim plugins
	Plug 'tpope/vim-repeat' " enable repeating supported plugin maps with .
	Plug 'tpope/vim-scriptease' " A Vim plugin for Vim plugins
	" view
	"Plug 'wimstefan/Lightning'
	"Plug 'yankcrime/direwolf'
	Plug 'NLKNguyen/papercolor-theme'
	"Plug 'junegunn/seoul256.vim'
	KcPlug8 'vim-airline/vim-airline'
	KcPlug8 'vim-airline/vim-airline-themes'
	"Plug 'endel/vim-github-colorscheme'
	"Plug 'jonathanfilip/vim-lucius'
	"Plug 'rakr/vim-one'
	" zzz_utils
	"Plug 'thaerkh/vim-workspace'
	Plug 'kamilcuk/vim-workspace'

	call plug#end()
	filetype on

	delcommand KcPlug8
	delcommand KcPlugCoc
endif

" }}}
" Some view things {{{1

" See kamilscript/autoload/viewrestore.vim
call kc#viewrestore#enable()

" Highlight current line when leaving buffer buffer
" https://vim.fandom.com/wiki/Highlight_current_line
if 0 | augroup CursorLine
	au!
	au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
	au WinLeave * setlocal nocursorline
augroup END | endif
set nocursorline
set nocursorcolumn

" Change cursor to | in insert mode.
" https://vi.stackexchange.com/questions/9131/i-cant-switch-to-cursor-in-insert-mode
if has('nvim')
	let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
else
	let &t_SI = "\<esc>[5 q"
	if v:version >= 800
		let &t_SR = "\<esc>[5 q"
	endif
	let &t_EI = "\<esc>[2 q"
endif

" }}}
" Miscellaneous configuration {{{1

" https://vim.fandom.com/wiki/Cscope
if has('cscope') && has('quickfix')
	set cscopetag
	if v:version >= 800
		set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-,a-
	endif
endif

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if 0 && empty($TMUX)
	if has("nvim")
		"For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
		let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
	endif
	"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
	"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
	" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
	if has("termguicolors")
		set termguicolors
	endif
endif

" netrw
let g:netrw_home = $XDG_CACHE_HOME.'/vim'
let g:netrw_dirhistmax = 0
" Disable netrw gx mapping., search openbrowser-open
let g:netrw_nogx = 0

" See :help doxygen.vim
let g:load_doxygen_syntax=1

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
augroup vimrc-incsearch-highlight
	autocmd!
	if exists('+CmdlineEnter')
		autocmd CmdlineEnter [/\?] :set hlsearch
		autocmd CmdlineLeave [/\?] :set nohlsearch
	endif
augroup END

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
" Disable paste
augroup Cancel_Paste
	autocmd!
	autocmd InsertLeave * if &paste | set nopaste | echo 'nopaste' | endif
augroup END

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
" Reload vim and config automatically
if 0
augroup UpdateVim
	autocmd!
	autocmd UpdateVim BufWritePost ~/vimrc source ~/vimrc | redraw | silent doautocmd ColorScheme
	if has('gui_running')
		if filereadable($MYGVIMRC)
			source $MYGVIMRC | echo 'Source .gvimrc'
		endif
	endif
	autocmd FocusLost * :wa
	autocmd VimResized * redraw!
	autocmd VimResized * wincmd =
augroup END
endif

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
" Set tmux title
if exists('$TMUX')
	augroup TmuxTitle
		autocmd BufReadPost,FileReadPost,BufNewFile,BufEnter *
					\ call system("tmux rename-window 'vim | " . expand("%:t") . "'")
		autocmd VimLeave * call system("tmux setw automatic-rename")
	augroup END
endif

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
if has('nvim')
	augroup nvim
		autocmd!
		autocmd BufEnter term://* startinsert
		"Do everything possible to prevent numbers and cursorline in term buffer
		autocmd BufEnter,BufWinLeave,BufWinEnter,WinEnter,InsertLeave term://* setlocal nonumber norelativenumber nocursorline
		autocmd TermOpen * setlocal nonumber norelativenumber
		autocmd BufEnter,WinEnter * if &buftype == 'terminal' | startinsert | set nocursorline | endif
		" TODO: Tidy this up as there must be a way not to run this for fzf term buffers using an if statement
		if exists('+winhighlight') "&& &filetype !=? 'fzf'
			" autocmd TermOpen call s:highlight_myterm()
			" Clear highlight for fzf buffers because yuck
			au FileType fzf setl winhighlight=
		endif
		autocmd TermOpen * set bufhidden=hide
		autocmd FileType fzf tnoremap <nowait><buffer> <esc> <c-g> "Close FZF in neovim with esc
	augroup END
	au BufWinEnter * if &buftype == 'terminal' | setlocal bufhidden=hide | endif
endif

autocmd! BufReadPost .clangd set syntax=yaml filetype=yaml

" }}}
" Plugins configuration {{{1

if kc#plugin#enabled('vim-oscyank')
	autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | OSCYankReg " | endif
endif


" Termdebug configuration
let g:termdebug_use_prompt = 0
let g:termdebug_wide = 163

" Disable syntastic for C and C++, where coc-clangd is used.
" https://stackoverflow.com/questions/31818109/how-to-selectively-disable-checkers-for-certain-file-types-when-using-syntastic
if kc#plugin#enabled('syntastic') && kc#plugin#enabled('coc.nvim')
	let g:syntastic_mode_map = {
	    \ "mode": "active",
	    \ "passive_filetypes": [
		\ "c",
		\ "cpp",
		\ "python",
		\ "json",
		\ "vim",
		\ "bin",
		\ "cmake",
		\ "ruby",
		\ "java",
		\ "html",
		\ "sh",
		\ "systemd",
		\ 'json',
		\ ]}
endif

" https://github.com/thoughtbot/dotfiles/pull/641
" Set tags for fugitive
set tags^=./.git/tags;

" luochen1990/rainbow configuration
if kc#plugin#enabled('rainbow')
	let g:rainbow_active = 1 " be active
	let g:rainbow_conf = {'separately':{
				\ 'cmake': 0,
				\ 'c': 0,
				\ 'cpp': 0,
				\ }}
endif

if kc#plugin#enabled('vim-airline')
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#buffer_nr_show = 1
endif

if kc#plugin#enabled('vim-workspace')
	let g:workspace_create_new_tabs = 0
	let g:workspace_session_directory = $HOME . '/.vim/sessions/'
	let g:workspace_persist_undo_history = 1  " enabled = 1 (default), disabled = 0
	let g:workspace_undodir = $HOME . '/.vim/undodir/'
	let g:workspace_nocompatible = 0
	let g:workspace_session_disable_on_args = 1
endif

if kc#plugin#enabled('vim-tips')
	let g:vim_tips_tips_frequency = 0.5
	let g:vim_tips_tips_frequency = 1
endif

" morhetz/gruvbox
"let g:gruvbox_contrast_dark = 'hard'
"let g:gruvbox_contrast_light = 'hard'
"let g:gruvbox_guisp_fallback = "bg"

" https://github.com/derekwyatt/vim-fswitch
"let g:fsnonewfiles = 0
"autocmd FileType c,cpp  let b:fswitchlocs = './,../include,reg:/src/include/'
"autocmd BufEnter *.c    let b:fswitchdst = 'h'
"autocmd BufEnter *.h    let b:fswitchdst = 'c,cpp'
"autocmd BufEnter *.cpp  let b:fswitchdst = 'h,hpp'
"autocmd BufEnter *.hpp  let b:fswitchdst = 'cpp'

" https://github.com/aperezdc/vim-template
if kc#plugin#enabled('vim-template')
	let g:templates_no_autocmd = 1
	let g:templates_global_name_prefix = "=template=."
	let g:templates_directory = [ g:kamilscripts . "/vim/templates/" ]
	let g:templates_user_variables = [
		\ ['GUARDPATH', 'KcVimTemplateGuardpath'],
		\ ['RANDOM', 'KcVimTemplateRandom'],
		\ ]
	function! KcVimTemplateGuardpath()
		return toupper(substitute(expand("%:p:."), "[^a-zA-Z0-9]", "_", "g")) . "_"
	endfunction
	function! KcVimTemplateRandom()
		return system('uuidgen')[:-2]
	endfunction
endif

if 0
	" Add nice versions of background jobs if available
	" The nice versions are within kamilscripts/bin
	if !exists('g:ycm_server_python_interpreter') && executable(',nicepython3')
		let g:ycm_server_python_interpreter = ',nicepython3'
	endif
	if get(g:, 'ycm_clangd_binary_path', '/usr/bin/clangd') == '/usr/bin/clangd' && executable(',niceclangd')
		let g:ycm_clangd_binary_path = ',niceclangd'
	endif
	if !exists('g:gutentags_cscope_executable') && executable(',nicecscope')
		let g:gutentags_cscope_executable = ',nicecscope'
	endif
	if !exists('g:gutentags_ctags_executable') && executable(',nicectags')
		let g:gutentags_ctags_executable = ',nicectags'
	endif
endif

" ctrlp
if kc#plugin#enabled('ctrlp.vim')
	let g:ctrlp_custom_ignore = {
				\ 'dir':  '\v[\/]\.(git|hg|svn)$',
				\ 'file': '\v\.(exe|so|dll)$',
				\ }
	let g:ctrlp_show_hidden = 1
	" https://github.com/FelikZ/ctrlp-py-matcher
	let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
	let g:ctrlp_extensions = []
	" Preserve cache
	let g:ctrlp_clear_cache_on_exit = 1
	let g:ctrlp_cache_dir = $HOME.'/.cache/vim/ctrlp'
	" ctrlp oldfiles plugin
	let g:ctrlp_extensions += ['oldfiles']
	let g:ctrlp_working_path_mode = ''
	command! CtrlPoldfiles call ctrlp#init(ctrlp#oldfiles#id())
endif

" https://github.com/ggreer/the_silver_searcher
if kc#plugin#enabled('ack.vim')
	if executable('ag')
		let g:ackprg = 'ag --vimgrep -u'
	elseif executable('rg')
		let g:ackprg = 'rg --vimgrep'
	else
		" defaults
	endif
endif

"if 0 || kc#plugin#enabled('gen_tags.vim')
	"let g:loaded_gentags#ctags = 0
	"let g:gen_tags#gtags_auto_gen = 1
	"let g:gen_tags#gtags_auto_update = 1
	"let g:gen_tags#blacklist = [ $HOME ]
	"let g:gen_tags#statusline = 0
	"let g:gen_tags#gtags_default_map = 0
	"let g:gen_tags#use_cache_dir = 0
	"let g:gen_tags#cache_dir = ".cache"
"endif

" goldenratio
" Don't resize automatically.
let g:golden_ratio_autocommand = 0
" Mnemonic: - is next to =, but instead of resizing equally, all windows are
" resized to focus on the current.
nmap <C-w>- <Plug>(golden_ratio_resize)
" Fill screen with current window.
nnoremap <C-w>+ <C-w><Bar><C-w>_

"if 0 || kc#plugin#enabled('youcompleteme')
	"if !exists('g:ycm_clangd_binary_path') && filereadable('/usr/bin/clangd')
		"let g:ycm_clangd_binary_path = '/usr/bin/clangd'
	"endif
	"let g:ycm_autoclose_preview_window_after_completion = 1
	"let g:ycm_confirm_extra_conf = 0
	"let g:ycm_auto_hover = ''
	"let g:ycm_enable_hover = 1
	"nnoremap <leader>d  :YcmShowDetailedDiagnostic<CR>
	"nnoremap <leader>Q  :YcmDiags<CR> " matches [q ]q moves from the other thingi
	"" https://gitter.im/Valloric/YouCompleteMe?at=5d3183545ea6e644ecdf5a7a
	"nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
	"nnoremap <leader>gr :YcmCompleter GoToReferences<CR>
	"nnoremap <leader>gt :YcmCompleter GoToInclude<CR>
	"nnoremap <leader>gf :YcmCompleter FixIt<CR>
	"nnoremap <leader>gK :YcmCompleter GetDoc<CR>
	"nnoremap <leader>gR :YcmCompleter RefactorRename<Space>
	"nnoremap <leader>gF :YcmCompleter Format<CR>
	""
	"let g:ycm_collect_identifiers_from_tags_files = 1
	""
	"let g:ycm_global_ycm_extra_conf = g:kamilscripts . 'vim/youcompleteme/ycm_extra_conf.py'
	"let g:ycmconf_loglevel = 0
	"let g:ycmconf_extra_flags = []
	"let g:ycm_extra_conf_vim_data = [ 'g:ycmconf_loglevel', 'g:ycmconf_extra_flags' ]
"endif

"if 0 || kc#plugin#enabled('gutentags')
	"let g:gutentags_dont_load = 1
	"let g:gutentags_ctags_exclude = [
		"\ '*.git', '*.svg', '*.hg', '.git', '.github',
		"\ '*/tests/*', '_build', '.build', 'build', '.clangd',
		"\ 'dist', '*sites/*/files/*',
		"\ 'bin', 'node_modules', 'bower_components', 'cache', 'compiled',
		"\ 'docs', 'example', 'bundle', 'vendor', '*.md',
		"\ '*-lock.json', '*.lock', '*bundle*.js', '*build*.js',
		"\ '.*rc*', '*.json', '*.html', '*.min.*', '*.map', '*.bak',
		"\ '*.zip', '*.pyc', '*.class', '*.sln', '*.Master', '*.csproj', '*.tmp',
		"\ '*.csproj.user', '*.cache', '*.pdb', 'tags*', 'cscope.*', '*.css',
		"\ '*.less', '*.scss', '*.exe', '*.dll', '*.mp3', '*.ogg', '*.flac', '*.swp', '*.swo',
		"\ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
		"\ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
		"\ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
		"\ '*.map', '*.ld', '*.txt', '.vscode', '*.key',
		"\ '*.json', '*.cproject', '*.project',
		"\ ]
	"let g:gutentags_modules = ['ctags', 'gtags_cscope']
	"let g:gutentags_generate_on_new = 1
	"let g:gutentags_generate_on_missing = 1
	"let g:gutentags_generate_on_write = 1
	"let g:gutentags_generate_on_empty_buffer = 0
	"let g:gutentags_cscope_build_inverted_index = 1
	"let g:gutentags_ctags_extra_args = [
		"\ '--tag-relative=yes',
		"\ '-h=.c.h.cpp.hpp.asm.cmake.make',
		"\ '--fields=+ailmnS',
		"\ ]
	"let g:gutentags_ctags_exclude += [
		"\ '*/Unity/examples',
		"\ '*/Unity/extra',
		"\ '*/Unity/test',
		"\ '_build_tools/*/examples',
		"\ ]
	"let g:gutentags_trace = 0
	"let g:gutentags_find_args = " -path ./_build -prune -o -regextype egrep -regex .*\.(cpp|hpp|[hcsS])$ "
"endif

if kc#plugin#enabled('smooth-scroll')
	noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 5, 2)<CR>
	noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 5, 2)<CR>
	noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 5, 4)<CR>
	noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 5, 4)<CR>
endif

if kc#plugin#enabled('vim-mergetool')
	function s:on_mergetool_set_layout(split)
		set syntax=off
		set nospell
	endfunction
	let g:MergetoolSetLayoutCallback = function('s:on_mergetool_set_layout')
	let g:mergetool_layout = 'lmr'
endif

if kc#plugin#enabled('showmarks')
	let g:showmarks_enable = 0
	let g:showmarks_add_maps = 0
	let g:showmarks_ignore_type = 'hpq'
endif

if kc#plugin#enabled('nerdcommenter')
	" use // instead of /* */ in C by default
	let g:NERDAltDelims_c = 1
	let g:NERDAltDelims_java = 1
endif

if kc#plugin#enabled('spelunker.vim')
	" Disable by default - use ZT to enable
	let g:enable_spelunker_vim = 0
endif

if kc#plugin#enabled('vimspector')
	let g:vimspector_enable_mappings = 'HUMAN'
endif

if kc#plugin#enabled('Colorizer')
	let g:colorizer_auto_color = 1
	" sets g:colorizer_custom_colors with xterm256 colors
	call kc#xterm256colornames#colorizer()
endif

if kc#plugin#enabled('vim-DetectSpellLang')
	let g:detectspelllang_langs = {}
	let g:detectspelllang_langs.aspell = [ 'en_US', 'pl_PL' ]
	let g:detectspelllang_langs.hunspell = [ 'en_US', 'pl_PL' ]
endif

function KcDispatchComplete_firstErrorHasValidFile() abort
	" Check if the first valid error in quickfix has a valid file
	for i in getqflist()
		if !i.valid | continue | endif
		if file_readable(bufname(i.bufnr))
			echo bufname(i.bufnr)
			return 1
		endif
		break
	endfor
	return 0
endfunction
function KcDispatchComplete() abort
	Copen
	if KcDispatchComplete_firstErrorHasValidFile()
		" If we can navigate to the file with the first error, then
		" instantaneously navigate to it.
		cc 1
		cn
	else
		" Otherwise on success or file not found,
		" let the cursor stay where it is.
		normal G
		wincmd p
	endif
endfunction
augroup KcDispatchComplete
	au!
	" DispatchComplete is my patch to vim-dispath
	autocmd User DispatchComplete call KcDispatchComplete()
augroup END
let g:dispatch_quickfix_height = &lines / 3

if kc#plugin#enabled('vimwiki')
	let g:vimwiki_list = [{'path': '~/vimwiki/',
						  \ 'syntax': 'markdown', 'ext': '.md'}]
endif

function! s:GoogleSearchSelection() abort
	execute 'OpenBrowser http://www.google.pl/search?q=' . kc#UrlEncode(kc#VisualSelection())
endfunction
vmap <leader>G :call <SID>GoogleSearchSelection()<CR>

if kc#plugin#enabled('vim-eunuch')
	"delcommand W
	"delcommand Wall
	cmap W!! SudoWrite
endif

if kc#plugin#enabled('neoformat')
	let g:neoformat_scheme_schemeformat = {
				\ 'exe': ',scheme-format',
				\ 'stdin': 1,
				\ }
	let g:neoformat_enabled_scheme = ['schemeformat']
endif

" }}}
" Custom maps and functions {{{1

" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
" Map semicolon to colon and double semicolon to semicolon.
" https://vim.fandom.com/wiki/Map_semicolon_to_colon
map ; :
noremap ;; ;
" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

" Disable entering ex mode
" https://stackoverflow.com/questions/1269689/to-disable-entering-ex-mode-in-vim
nnoremap Q <Nop>

" Close quickfix window with ESC
" https://github.com/mhinz/vim-grepper/issues/117
"augroup vimrcQfClose
"    autocmd!
"    autocmd FileType qf if mapcheck('<esc>', 'n') ==# '' | nnoremap <buffer><silent> <esc> :cclose<bar>lclose<CR> | endif
"augroup END

if kc#plugin#enabled('vim-workspace')
	nnoremap <leader>W :ToggleWorkspace<CR>
endif

" https://vim.fandom.com/wiki/Search_and_replace_the_word_under_the_cursor
nnoremap <leader>S :%s/\<<C-r><C-w>\>/<C-r><C-w>/g<Left><Left>

" https://castel.dev/post/lecture-notes-1/
inoremap <C-l>     <c-g>u<Esc>[s1z=`]a<c-g>u
"nnoremap <leader>p <c-g>u<Esc>[s1z=`]a<c-g>u

if 0
	function g:MyCscope(arg)
		cexpr []
		execute 'botright copen ' get(g:, 'dispatch_quickfix_height', '')
		wincmd p
		cscope find s:arg <cword>
	endfunction
	nnoremap <leader>fa :call MyCscope("a")<CR>
	nnoremap <leader>fs :call MyCscope("s")<CR>
	nnoremap <leader>fd :call MyCscope("d")<CR>
	nnoremap <leader>fc :call MyCscope("c")<CR>
	nnoremap <leader>ft :call MyCscope("t")<CR>
	nnoremap <leader>fe :call MyCscope("e")<CR>
	nnoremap <leader>ff :call MyCscope("f")<CR>
	nnoremap <leader>fi :call MyCscope("i")<CR>
	nnoremap <leader>fg :call MyCscope("g")<CR>
endif

if kc#plugin#enabled('nerdtree')
	nmap <C-n> :NERDTreeToggle<CR>
	let NERDTreeBookmarksFile = expand('~/.vim/NERDTreeBookmarks')
	let NERDTreeAutoDeleteBuffer = 1
	let NERDTreeMinimalUI = 0
	augroup NERDTree
		autocmd!
		" Close vim if only window is a Nerd Tree
		autocmd BufEnter * if winnr("$") == 1 && exists("b:NERTree") && b:NERDTree.isTabTree() | q | endif
	augroup END
endif

nmap <C-w><C-e> :bdelete<CR>

if &diff
	augroup DiffGoToFirstDiff
		autocmd!
		autocmd VimEnter *? norm ]c[c
	augroup END
	function MLayoutCompletion(ArgLead, CmdLine, CursorPos)
		return [ "mr", "lmr", "bmr", "LBR" ]
	endfunction
	command MLayout -nargs=1 -complete=customlist, :MergetoolToggleLayout <q-args><CR>
	nmap <leader>mt <plug>(MergetoolToggle)
	nmap <expr> <C-Left>    !&diff ? '<C-Left>'  : '<Plug>(MergetoolDiffExchangeLeft)  ]c<CR>'
	nmap <expr> <C-Right>   !&diff ? '<C-Right>' : '<Plug>(MergetoolDiffExchangeRight) ]c<CR>'
	nmap <expr> <C-Down>    !&diff ? '<C-Down>'  : '<Plug>(MergetoolDiffExchangeDown)  ]c<CR>'
	nmap <expr> <C-Up>      !&diff ? '<C-Up>'    : '<Plug>(MergetoolDiffExchangeUp)    ]c<CR>'
endif

command! VimConfig :edit ~/.vimrc

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
augroup Code Comments
	au!
	" Horizontal Rule (78 char long)
	autocmd FileType vim
				\ nnoremap <silent><buffer> <leader>hr 0i" -----------------------------------------------------------------------------<ESC>^1l
	autocmd FileType javascript,php,c,cpp,css
				\ nnoremap <silent><buffer> <leader>hr 0i/* ------------------------------------------------------------------------- */<ESC>^2l
	autocmd FileType python,perl,ruby,sh,zsh,conf,bash,yaml
				\ nnoremap <silent><buffer> <leader>hr 0i###############################################################################<ESC>^1l
augroup END

if kc#plugin#enabled('open-browser.vim')
	nmap gx <Plug>(openbrowser-open)
	vmap gx <Plug>(openbrowser-open)
endif

" https://vi.stackexchange.com/questions/10728/splitting-a-line-into-two/10731
nnoremap <leader>s i<CR><Esc>

" Add `:Format` command to format current buffer.
"command! -nargs=0 Format :call CocAction('format')
" neoformat/plugin/neoformat.vim
command! -nargs=? -bar -range=% -bang -complete=customlist,neoformat#CompleteFormatters Format
            \ call neoformat#Neoformat(<bang>0, <q-args>, <line1>, <line2>)

" https://gist.github.com/romainl/eae0a260ab9c135390c30cd370c20cd7
command! -nargs=1 -complete=command -bar -range Redir silent call kc#Redir(<q-args>, <range>, <line1>, <line2>)

" }}}
" coc.nvim {{{1

if kc#plugin#enabled('coc.nvim')

let g:coc_config_home = g:kamilscripts . "vim/coc-settings"

let g:coc_global_extensions	= [
			\ 'coc-highlight',
			\ 'coc-yank',
			\ 'coc-diagnostic',
			\ 'coc-kite',
			\ ]
" Dynamically installed coc extension depending on filetype.
let g:coc_global_extensions_dynamics = {
			\ 'cmake': ['coc-cmake'],
			\ 'vim': ['coc-vimlsp'],
			\ 'python': ['coc-python'],
			\ 'c': ['coc-clangd'],
			\ 'cpp': ['coc-clangd'],
			\ 'yaml': ['coc-yaml'],
			\ 'tex': ['coc-vimtex'],
			\ 'pp': ['coc-solargraph'],
			\ }
augroup CocGlobalExtensions
	au!
	execute 'autocmd FileType '.join(keys(g:coc_global_extensions_dynamics), ',').' '
				\ .'let g:coc_global_extensions += g:coc_global_extensions_dynamics[&filetype]'
augroup END

" https://github.com/neoclide/coc-highlight
autocmd CursorHold ?* silent call CocActionAsync('highlight')

" This has been taken from the readme:
" https://github.com/neoclide/coc.nvim/blob/master/README.md#example-vim-configuration

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if 0
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
	  \ pumvisible() ? "\<C-n>" :
	  \ <SID>check_back_space() ? "\<TAB>" :
	  \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
else
" https://github.com/neoclide/coc-snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
endif

let g:coc_snippet_next = '<tab>'

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
" DIFFERENCE TO ORIGINAL - gr and gd already mean something in vim,
" map these with leader in front
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> <leader>k :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup coc-nvim-mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" yay I'm here

if v:version >= 8.2 || has("nvim-0.4.3")
	" Remap <C-f> and <C-b> for scroll float windows/popups.
	" Note coc#float#scroll works on neovim >= 0.4.3 or vim >= 8.2.0750
	nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
	nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
	inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
	inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

	" NeoVim-only mapping for visual mode scroll
	" Useful on signatureHelp after jump placeholder of snippet expansion
	if has('nvim')
	  vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#nvim_scroll(1, 1) : "\<C-f>"
	  vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#nvim_scroll(0, 1) : "\<C-b>"
	endif
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
nnoremap <silent><nowait> <space>b  :<C-u>CocList diagnostics --current-buf<CR>
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>

if kc#plugin#enabled('coc-fzf')
	" Mapping from https://github.com/antoinemadec/coc-fzf
	nnoremap <silent><nowait> <space>a  :<C-u>CocFzfList diagnostics<CR>
	nnoremap <silent><nowait> <space>e  :<C-u>CocFzfList extensions<CR>
	nnoremap <silent><nowait> <space>c  :<C-u>CocFzfList commands<CR>
	nnoremap <silent><nowait> <space>o  :<C-u>CocFzfList outline<CR>
	nnoremap <silent><nowait> <space>l  :<C-u>CocFzfList location<CR>
	nnoremap <silent><nowait> <space>s  :<C-u>CocFzfList symbols<CR>
	nnoremap <silent><nowait> <space>p  :<C-u>CocFzfListResume<CR>
	nnoremap <silent><nowait> <space>b  :<C-u>CocFzfList diagnostics --current-buf<CR>
endif " kc#plugin#enabled('coc-fzf')

endif " kc#plugin#enabled('coc.nvim')

" }}}
" vimtex Configuration {{{1

let g:vimtex_view_method = 'mupdf'
"let g:livepreview_previewer = 'evince'

augroup KcLatex
	autocmd!
	autocmd FileType tex :TexItemize <f6> :s/^ */\\item /<cr>'<O\begin{itemize}<esc>'>o\end{itemize}<esc>
augroup END

" }}}
" Color scheme {{{1

set background=dark
colorscheme kamilcuk

" }}}
" Project specific {{{1

" Seamlessly detect cmake out-of-source build errors in subdirectories
set errorformat^=../%f:%l:%c:\ %m
set errorformat^=../../%f:%l:%c:\ %m
set errorformat^=../../../%f:%l:%c:\ %m
" Detect ctest -V errors
let &errorformat.=',%\d%\+/%\d%\+ Test #%l: %f %[.*]%#Failed  %m'
" Detect AddressSanitizer errors
" #2 0x555f87c5271d in DataContainer::getName[abi:cxx11]() const /tmp/1.cpp:8
let &errorformat.=',%+G    #%\d%\+ 0x%[0-9a-fA-F]%\+ in %.%# %f:%l'

if getcwd() =~ "/etc/nginx" || expand('%') =~ "/etc/nginx"
	let &makeprg="sudo nginx -t && sudo nginx -s reload"
endif

if getcwd() =~ "/home/kamil/ncbj/puppet"
	set errorformat=""
	"
	"       error during compilation: Evaluation Error: Error while evaluating a Resource Statement, Unknown resource type: 'cron' (file: /home/kamil/ncbj/puppet/diz_zwierzak/spec/fixtures/modules/diz_zwierzak/manifests/gcalendar_server_booking.pp, line: 53, column: 3) on node leonidas.cis.gov.pl
	"let &errorformat.='       error during compilation: %m (file: %f\, line: %l\, column: %c) %.%#'
	"let &errorformat.=',       error during compilation: %m \(file: %f\, line: %l\) %.%#'
	let &errorformat.='       error during compilation: %m \(file: %f\, line: %l%.%#'
	let &errorformat.=',       error during compilation: %m (file: %f) %.%#'
	"       error during compilation: Parameter source failed on File[Provision /etc/pip.conf configuration]: ....
	let &errorformat.=',%E       error during compilation: %m'
	"       ' (file: /home/kamil/ncbj/puppet/diz_zwierzak/spec/fixtures/modules/diz_zwierzak/manifests/pip.pp, line: 8)
	let &errorformat.=',%Z       %m (file: %f\, line: %l, column: %c)%.%#'
	let &errorformat.=',%Z       %m (file: %f\, line: %l)%.%#'
	let &errorformat.=',%Z       %m (file: %f)%.%#'
	"       # Set the pip repository to use nexus
	"       [global]
	"       index = https://nexus.services.idea.edu.pl/repository/pypi-all/pypi
	"       index-url = https://nexus.services.idea.edu.pl/repository/pypi-all/simple
	let &errorformat.=',%C       %m'
	let &errorformat.=',%C      ' " just an empty line..

	let &errorformat.=',pdk %m (%f:%l:%c)'
	let &errorformat.=',pdk %m (%f:%l)'
	let &errorformat.=',pdk %m (%f)'
	" rspec ./spec/classes/zwierzak/limits_spec.rb:10 # diz_domain::zwierzak::limits on centos-7-x86_64 is expected to compile into a catalogue without dependency cycles
	let &errorformat.=',rspec %f:%l # %m'
	" Match directory that ,pdk changes to when unit testing
	" ,pdk: info: + 'cd' '/home/kamil/ncbj/puppet/diz_domain'
	let &errorformat.=',%D\,pdk: info: + ''cd'' ''%f'''
	" pdk (INFO): Validator 'puppet-epp' skipped for '/home/kamil/ncbj/puppet/diz_domain'. No files matching '["**/*.epp"]' found to validate.
	let &errorformat.=',%Dpdk (INFO): Validator ''%.%#'' skipped for ''%f''%.%#'

	let &makeprg = ",pdk unit_test"
	"let &makeprg="cat /tmp/1"
endif

if getcwd() =~ '/home/kamil/myprojects/ckd'
	let g:coc_start_at_startup=0
endif

if getcwd() =~ '/home/kamil/ncbj/chronos-ansible'
	let &makeprg = 'ansible-playbook site.yml --diff --check'
endif

" }}}
" Custom functions {{{1

function KcRestartXbindkeys()
	! if pid=$(pgrep -u "$(id -u)" xbindkeys); then kill -HUP "$pid"; else xbindkeys; fi
endfunction
autocmd BufWritePost .xbindkeysrc.scm silent! call KcRestartXbindkeys()
autocmd BufWritePost .xbindkeysrc     silent! call KcRestartXbindkeys()

" }}}

" vim: filetype=vim:foldmethod=marker:nofoldenable

