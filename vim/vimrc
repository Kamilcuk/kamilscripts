" kamilscripts/vim/vimrc

" Init {{{1

" if get(g:, 'loaded_kamilscripts_vimrc', 0)
" 	finish
" endif
" let g:loaded_kamilscripts_vimrc = 1

if !has('nvim') && filereadable(expand('$VIMRUNTIME/defaults.vim'))
	source $VIMRUNTIME/defaults.vim
endif

if $LC_CTYPE ==? 'pl_PL.UTF-8'
	source $VIMRUNTIME/delmenu.vim
	set langmenu=pl_PL.UTF-8
	language pl_PL.UTF-8
	source $VIMRUNTIME/menu.vim
endif

" }}}
" Global vim configuration {{{1

if !isdirectory(expand('~/.vim'))
	call mkdir(expand('~/.vim'))
endif

" HOW-TO make vim not suck Out of the Box
" set nocompatible   " This option has the effect of making Vim either more Vi-compatible, or make Vim behave in a more useful way.
set ruler          " Show the line and column number of the cursor position, separated by a comma
set laststatus=2   " The value of this option influences when the last window will have a status line:
set showcmd        " Show (partial) command in the last line of the screen.
set showmode       " If in Insert, Replace or Visual mode put a message on the last line.
set incsearch      " While typing a search command, show where the pattern, as it was typed so far, matches.
set ignorecase     " Ignore case in search patterns.
set smartcase      " Override the 'ignorecase' option if the search pattern contains upper case characters.
set hlsearch       " When there is a previous search pattern, highlight all its matches.
set number
set relativenumber
set autowriteall
set hidden
set swapfile
set writebackup
set nobackup
set nowritebackup
set autoindent
set history=5000
set pastetoggle=<F2>
filetype plugin indent on
syntax enable
set encoding=utf-8
scriptencoding utf-8
set nofoldenable
set modeline

set tabstop=4      " The width of a hard tabstop measured in spaces -- effectively the (maximum) width of an actual tab character.
set shiftwidth=4   " The size of an indent. It's also measured in spaces, so if your code base indents with tab characters then you want shiftwidth to equal the number of tab characters times tabstop. This is also used by things like the =, > and < commands.
set softtabstop=0  " Setting this to a non-zero value other than tabstop will make the tab key (in insert mode) insert a combination of spaces (and possibly tabs) to simulate tab stops at this width.
set noexpandtab    " Enabling this will make the tab key (in insert mode) insert spaces instead of tab characters. This also affects the behavior of the retab command.
set nosmarttab     " Enabling this will make the tab key (in insert mode) insert spaces or tabs to go to the next indent of the next tabstop when the cursor is at the beginning of a line (i.e. the only preceding characters are whitespace).

" https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode
set backspace=indent,eol,start  " let backspece delete everything in intsert mode

" https://stackoverflow.com/questions/2288756/how-to-set-working-current-directory-in-vim
"set autochdir
"Messes up any plugin configuration

" https://vi.stackexchange.com/questions/19680/how-can-i-make-vim-not-use-the-entire-screen-for-spelling-suggestions
set spellsuggest+=10
" Include correct word in spellsuggestiong if it is correct. See :h spellsuggest()
function Kc_spell_suggest_correct_word()
	if len(spellbadword(v:val)[0])
		return []
	endif
	if v:lang ==? 'pl_PL.UTF-8'
		echo 'Słowo "'.v:val.'" jest poprawne.'
	else
		echo 'The word "'.v:val.'" is correct.'
	endif
	return [[v:val.'_is_correct', 1]]
endfunction
set spellsuggest=expr:Kc_spell_suggest_correct_word(),10

" Tell vim to remember certain things when we
let tmp = expand(!has('nvim') ? '~/.cache/vim/viminfo' : '~/.local/share/nvim/shada/main.shada')
if !isdirectory(fnamemodify(tmp, ':h'))
	call mkdir(fnamemodify(tmp, ':h'), 'p')
endif
" Remove ~/.viminfo
if filereadable(expand('~/.viminfo'))
	silent !mkdir -p ~/.cache/vim && mv ~/.viminfo ~/.cache/vim/viminfo.old
endif
let &viminfo="'100,/50,:5000,<800,@500,h,n" . tmp
"             |    |   |     |    |    | + viminfo file path
"             |    |   |     |    |    + disable 'hlsearch' loading viminfo
"             |    |   |     |    + items in the input-line history
"             |    |   |     + number of lines for each register
"             |    |   + items in the command-line history
"             |    + search history saved
"             + number of edited files for which marks are remembered
unlet tmp

" https://stackoverflow.com/questions/17936130/vim-undo-undo-changes-after-file-write
if has('persistent_undo')    "check if your vim version supports it
	set undofile             "turn on the feature
	if !has('nvim')
		set undodir=~/.vim/undo  "directory where the undo files will be stored
	endif
endif

" https://vim.fandom.com/wiki/Folding
set foldmethod=syntax
set foldnestmax=10
set nofoldenable
set foldlevel=0

" https://gist.github.com/eduardocereto/3088543
set wildignore+=*/node_modules/*,_site,*/__pycache__/,*/venv/*,*/target/*,*/.vim$,\~$,*/.log,*/.aux,*/.cls
set wildignore+=*/.aux,*/.bbl,*/.blg,*/.fls,*/.fdb*/,*/.toc,*/.out,*/.glo,*/.log,*/.ist,*/.fdb_latexmk
set wildignore+=*.egg-info/**
set wildignore+=*.o,*.obj,.git,*.pyc
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe

set cmdheight=2

if executable('bash')
	set shell=bash
endif

set exrc

" I do not like mouse
set mouse=
augroup NoMouse
	autocmd!
	autocmd BufEnter ?* set mouse=
augroup END

" https://github.com/neoclide/coc.nvim
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
if v:version >= 800
	set shortmess+=c
endif

if has('nvim-0.4.5')
	set signcolumn=auto:3-9
elseif has('nvim')
	set signcolumn=auto:3
elseif v:version >= 800
	set signcolumn=yes
endif

set scrolloff=6

set display+=uhex

" https://stackoverflow.com/questions/36724209/disable-beep-of-linux-bash-on-windows-10
set visualbell

" Additional unicode visual pairs.
set matchpairs=(:),{:},[:],❰:❱,≤:≥,«:»

" }}}
" Global plugin independent configuration {{{1

" Highlight current line when leaving buffer buffer
" https://vim.fandom.com/wiki/Highlight_current_line
if 1 | augroup CursorLine
	au!
	au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
	au WinLeave * setlocal nocursorline
augroup END | endif
set nocursorline
set nocursorcolumn

" Change cursor to | in insert mode.
" https://vi.stackexchange.com/questions/9131/i-cant-switch-to-cursor-in-insert-mode
if has('nvim')
	if ! has('nvim-0.2')
		let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
	endif
else
	let &t_SI = "\<esc>[5 q"
	if v:version >= 800
		let &t_SR = "\<esc>[5 q"
	endif
	let &t_EI = "\<esc>[2 q"
endif

" https://stackoverflow.com/a/16988346/9072753
syntax match nonascii "[^\x00-\x7F]"
highlight nonascii guibg=Red ctermbg=2

if has('nvim')
	let g:ft_man_folding_enable = 0
	let g:man_hardwrap = 0
endif

" https://github.com/vim/vim/blob/master/runtime/defaults.vim#L90
if 1
	" Put these in an autocmd group, so that you can revert them with:
	" ":augroup vimStartup | exe 'au!' | augroup END"
	augroup vimStartup
		au!

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid, when inside an event handler
		" (happens when dropping a file on gvim) and for a commit message (it's
		" likely a different one than last time).
		autocmd BufReadPost *
					\ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
					\ |   exe "normal! g`\""
					\ | endif

	augroup END

	" Quite a few people accidentally type "q:" instead of ":q" and get confused
	" by the command line window.  Give a hint about how to get out.
	" If you don't like this you can put this in your vimrc:
	" ":augroup vimHints | exe 'au!' | augroup END"
	augroup vimHints
		au!
		autocmd CmdwinEnter *
					\ echohl Todo |
					\ echo 'You discovered the command-line window! You can close it with ":q".' |
					\ echohl None
	augroup END
endif

" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
" Map semicolon to colon and double semicolon to semicolon.
" https://vim.fandom.com/wiki/Map_semicolon_to_colon
map ; :
noremap ;; ;
" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

" Disable entering ex mode
" https://stackoverflow.com/questions/1269689/to-disable-entering-ex-mode-in-vim
nnoremap Q <Nop>

" Close quickfix window with ESC
" https://github.com/mhinz/vim-grepper/issues/117
augroup vimrcQfClose
	autocmd!
	autocmd FileType qf if mapcheck('<esc>', 'n') ==# '' | nnoremap <buffer><silent> <esc> :cclose<bar>lclose<CR> | endif
augroup END

" https://vim.fandom.com/wiki/Search_and_replace_the_word_under_the_cursor
nnoremap <leader>S :%s/\<<C-r><C-w>\>/<C-r><C-w>/g<Left><Left>

" https://castel.dev/post/lecture-notes-1/
inoremap <C-l>     <c-g>u<Esc>[s1z=`]a<c-g>u
"nnoremap <leader>p <c-g>u<Esc>[s1z=`]a<c-g>u

if 0
	function g:MyCscope(arg)
		cexpr []
		execute 'botright copen ' get(g:, 'dispatch_quickfix_height', '')
		wincmd p
		cscope find s:arg <cword>
	endfunction
	nnoremap <leader>fa :call MyCscope("a")<CR>
	nnoremap <leader>fs :call MyCscope("s")<CR>
	nnoremap <leader>fd :call MyCscope("d")<CR>
	nnoremap <leader>fc :call MyCscope("c")<CR>
	nnoremap <leader>ft :call MyCscope("t")<CR>
	nnoremap <leader>fe :call MyCscope("e")<CR>
	nnoremap <leader>ff :call MyCscope("f")<CR>
	nnoremap <leader>fi :call MyCscope("i")<CR>
	nnoremap <leader>fg :call MyCscope("g")<CR>
endif

nmap <C-w><C-e> :bdelete<CR>

if &diff
	augroup DiffGoToFirstDiff
		autocmd!
		autocmd VimEnter *? norm ]c[c
	augroup END
endif

command! VimConfig :edit ~/.vimrc
command! VimLocalConfig :edit ~/.vim/vimrc
if filereadable(expand('~/.vim/vimrc'))
	source ~/.vim/vimrc
endif

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
augroup Code Comments
	au!
	" Horizontal Rule (78 char long)
	autocmd FileType vim,lua
				\ nnoremap <silent><buffer> <leader>hr 0i" -----------------------------------------------------------------------------<ESC>^1l
	autocmd FileType javascript,php,c,cpp,css
				\ nnoremap <silent><buffer> <leader>hr 0i/* ------------------------------------------------------------------------- */<ESC>^2l
	autocmd FileType python,perl,ruby,sh,zsh,conf,bash,yaml,make,cmake
				\ nnoremap <silent><buffer> <leader>hr 0i###############################################################################<ESC>^1l
	autocmd FileType lua
				\ nnoremap <silent><buffer> <leader>hr 0i-------------------------------------------------------------------------------<ESC>^1l
augroup END

" https://vi.stackexchange.com/questions/10728/splitting-a-line-into-two/10731
nnoremap <leader>s i<CR><Esc>

" https://github.com/thoughtbot/dotfiles/pull/641
" Set tags for fugitive
set tags^=./.git/tags;

" }}}
" Miscellaneous configuration {{{1

" Duplicate the bahavior of Home key as in Eclipse, that I'm used to.
"jump to first non-whitespace on line, jump to begining of line if already at first non-whitespace
"https://superuser.com/questions/301109/move-cursor-to-beginning-of-non-whitespace-characters-in-a-line-in-vim
nmap <silent> <Home> :call LineHome()<cr>
inoremap <silent> <Home> <C-R>=LineHome()<CR>
"map ^[[1~ :call LineHome()<CR>:echo<CR>
"imap ^[[1~ <C-R>=LineHome()<CR>
function! LineHome()
  let x = col('.')
  execute 'normal ^'
  if x == col('.')
    execute 'normal 0'
  endif
  return ''
endfunction

" https://vim.fandom.com/wiki/Cscope
if has('cscope') && has('quickfix')
	set cscopetag
	if v:version >= 800
		set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-,a-
	endif
endif

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if 0 && empty($TMUX)
	if has('nvim')
		"For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
		let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
	endif
	"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
	"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
	" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
	if has('termguicolors')
		set termguicolors
	endif
endif

" netrw
let g:netrw_home = $XDG_CACHE_HOME.'/vim'
let g:netrw_dirhistmax = 0
" Disable netrw gx mapping., search openbrowser-open
let g:netrw_nogx = 0

" See :help doxygen.vim
let g:load_doxygen_syntax=1

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
if exists('+CmdlineEnter')
	augroup vimrc-incsearch-highlight
		autocmd!
		autocmd CmdlineEnter [/\?] :set hlsearch
		autocmd CmdlineLeave [/\?] :set nohlsearch
	augroup END
endif

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
" Disable paste
augroup Cancel_Paste
	autocmd!
	autocmd InsertLeave * if &paste | set nopaste | echo 'nopaste' | endif
augroup END

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
" Reload vim and config automatically
if 0
augroup UpdateVim
	autocmd!
	autocmd UpdateVim BufWritePost ~/vimrc source ~/vimrc | redraw | silent doautocmd ColorScheme
	if has('gui_running')
		if filereadable($MYGVIMRC)
			source $MYGVIMRC | echo 'Source .gvimrc'
		endif
	endif
	autocmd FocusLost * :wa
	autocmd VimResized * redraw!
	autocmd VimResized * wincmd =
augroup END
endif

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
" Set tmux title
if exists('$TMUX')
	augroup TmuxTitle
		autocmd BufReadPost,FileReadPost,BufNewFile *
					\ call system(printf(
					\ "tmux rename-window '%s %s'", expand("%:t"), has("nvim") ? "nvim" : "vim"
					\ ))
		autocmd VimLeave * call system("tmux setw automatic-rename")
	augroup END
endif

" https://raw.githubusercontent.com/Akin909/Dotfiles/ee774ce0f0ce591e852e207e209c95ae3811f388/vim/configs/autocommands.vim
if has('nvim')
	augroup vimrc-nvim
		autocmd!
		autocmd BufEnter term://* startinsert
		"Do everything possible to prevent numbers and cursorline in term buffer
		autocmd BufEnter,BufWinLeave,BufWinEnter,WinEnter,InsertLeave term://* setlocal nonumber norelativenumber nocursorline
		autocmd TermOpen * setlocal nonumber norelativenumber
		autocmd BufEnter,WinEnter * if &buftype == 'terminal' | startinsert | set nocursorline | endif
		" TODO: Tidy this up as there must be a way not to run this for fzf term buffers using an if statement
		if exists('+winhighlight') "&& &filetype !=? 'fzf'
			" autocmd TermOpen call s:highlight_myterm()
			" Clear highlight for fzf buffers because yuck
			autocmd FileType fzf setl winhighlight=
		endif
		autocmd TermOpen * set bufhidden=hide
		autocmd FileType fzf tnoremap <nowait><buffer> <esc> <c-g> "Close FZF in neovim with esc
		autocmd BufWinEnter * if &buftype == 'terminal' | setlocal bufhidden=hide | endif
	augroup END
endif


" Termdebug configuration
let g:termdebug_use_prompt = 0
let g:termdebug_wide = 163

" }}}
" GUI Settings {{{
if has('ide')
endif
" }}}
" Load kamilscripts {{{1

" https://stackoverflow.com/questions/4976776/how-to-get-path-to-the-current-vimscript-being-executed
let g:kamilscripts = fnamemodify(resolve(expand('<sfile>:p')), ':h:h').'/'
if !isdirectory(g:kamilscripts.'vim')
	echoe expand('<sfile>').' ERROR: No g:kamilscripts = '.g:kamilscripts
endif

let &runtimepath .= ','.fnameescape(g:kamilscripts).'vim'
let &spellfile = g:kamilscripts.'vim/spellfiles/en.utf-8.add'

" Automatically generate tags for custom documentation files
" https://vim.fandom.com/wiki/Add_your_note_files_to_Vim_help
augroup KcDoc
	autocmd!
	autocmd BufWritePost ~/.vim/doc/* :helptags ~/.vim/doc
	autocmd BufWritePost g:kamilscripts.'/vim/doc/*' :helptags g:kamilscripts.'/vim/doc'
augroup END

if 0
	" https://gist.github.com/romainl/eae0a260ab9c135390c30cd370c20cd7
	command! -nargs=+ -complete=command -bar -range Redir silent call kc#Redir(<q-args>, <range>, <line1>, <line2>)
endif

if hostname() ==# 'rpi3'
	" Raspberri pi is not able to process that much.
	colorscheme elflord
	finish
endif

" }}}
" Load plugins with vim-plug {{{1

if !filereadable(expand('~/.vim/plugged/vim-plug/plug.vim'))
	if executable('git')
		if !isdirectory(expand('~/.vim/plugged/vim-plug/'))
			call mkdir(expand('~/.vim/plugged/vim-plug/'), 'p')
		endif
		!git clone https://github.com/junegunn/vim-plug ~/.vim/plugged/vim-plug/
	else
		call kc#log('no git executable, could not clone vim-plug')
	endif
endif

if filereadable(expand('~/.vim/plugged/vim-plug/plug.vim'))
	source ~/.vim/plugged/vim-plug/plug.vim
	let plugdir = '~/.vim/plugged/'

	if v:version >= 800
		command! -nargs=+ -bar KcPlug8 call plug#(<args>)
		if executable('node') && executable('npm') && executable('yarn')
			command! -nargs=+ -bar KcPlugCoc call plug#(<args>)
		else
			command -nargs=+ -bar KcPlugCoc " Empty. Only enable when coc is able to be enabled
			call kc#log('No node or npm or yarn')
		endif
	else
		command -nargs=+ -bar KcPlug8 " Empty. Only enable in vim version above 800
		call kc#log('v:version < 800')
	endif

	function KcUpdate()
		PlugUpdate
		sleep 3
		if exists(':CocUpdate')
			CocUpdate
			sleep 3
		else
			call kc#log('no CocUpdate')
		endif
		sleep 3
		call kc#Redir('!cd '.g:kamilscripts.' && ./update.sh', 0, 0, 0)
	endfunction
	command Update call KcUpdate()

	call plug#begin(plugdir)
	Plug 'junegunn/vim-plug' " Add itself
	delcommand PlugUpgrade " Just use PlugUpdate

	" My Plugins {{{2
		" Plug 'tpope/vim-dispatch' " Asynchronous build and test dispatcher
		" Plug 'kamilcuk/vim-dispatch', { 'dir': plugdir.'kamilcuk-vim-dispatch' }
		" KcPlug8 g:kamilscripts . 'vim/ebundle/my/dbg'
		" Plug 'Kamilcuk/vim-auto-gcov-marker'
		" Plug 'JonasMuehlmann/conoline.vim'
		" Plug g:kamilscripts . 'vim/bundle/vim-dispatch' " Vim dispatch patched, see below
	" }}}
	" Staging stuff that maybe should be removed maybe not {{{
		"Plug 'aduros/ai.vim'
		"Plug 'madox2/vim-ai'
		Plug 'kamilcuk/ai.vim', { 'dir': plugdir.'kamilcuk-ai.vim' }
		Plug 'junegunn/vader.vim'
		if has('nvim')
			Plug 'wookayin/semshi', { 'do': ':UpdateRemotePlugins', 'for': ['python'] }
		endif
		Plug 'martinda/Jenkinsfile-vim-syntax', { 'for': ['Jenkinsfile', 'groovy'] }
		Plug 'jvirtanen/vim-hcl', { 'for': ['nomad', 'hcl'] }
		Plug 'Vimjas/vim-python-pep8-indent', { 'for': ['python'] }
		Plug 'Glench/Vim-Jinja2-Syntax', { 'for': ['c'] }
		Plug 'pappasam/vim-keywordprg-commands'
		if executable('languagetool')
			Plug 'dpelle/vim-LanguageTool' " Add support for language tool, not great
		else
			call kc#log('no languagetool')
		endif
	" }}}
	" Disabled stuff {{{
		" KcPlug8 'kamykn/spelunker.vim' " Improved vim spelling plugin Too slow
		" Plug 'mg979/vim-visual-multi' " No - overwrites <C-n> taken by NetrdTree
		" Plug 'honza/vim-snippets' " vim-snipmate default snippets
		" Plug 'fholgado/minibufexpl.vim'
		" Plug 'hashivim/vim-hashicorp-tools'
		" Plug 'powerman/vim-plugin-AnsiEsc' " :AsciEsc replaces color codes for real codes
		" Plug 'ojroques/vim-oscyank' " Copy selected text using special ANSI sequences
		" Plug 'flwyd/nerdtree-harvest' " Additional mapping on nerdtree
		" Plug 'abdalrahman-ali/vim-remembers' Changes working directory!
		" Plug  'joshzcold/DrawIt' " For drawing stuff
		" Plug 'LucHermitte/lh-vim-lib'
		" Plug 'LucHermitte/lh-tags'
		" Plug 'LucHermitte/lh-dev'
		" Plug 'LucHermitte/lh-style'
		" Plug 'LucHermitte/lh-brackets'
		" Plug 'LucHermitte/vim-refactor'
		" Plug '907th/vim-auto-save'
		" Plug 'google/vim-maktaba'
		" Plug 'google/vim-coverage'
		" Plug 'google/vim-glaive'
		" Plug 'aperezdc/vim-template' " Simple templates plugin for Vim
		" Plug 'kamilcuk/vim-template', { 'dir': plugdir.'kamilcuk-vim-template' }
		" Plug 'shumphrey/fugitive-gitlab.vim' " , { 'on': ['G', 'GBrowse'], 'for': 'git' } An extension to fugitive.vim for gitlab support
		" Plug 'tpope/vim-rhubarb' " , { 'on': ['G', 'GBrowse'], 'for': 'git' } GitHub extension for fugitive.vim
	" }}}
	" Generic additional configuration and simplifiers {{{2
		Plug 'Konfekt/FastFold' " Speed up fold vim calculation
		Plug 'vim-scripts/LargeFile' " Edit large files quickly
		"Plug 'mhinz/vim-hugefile' " Also edit large files quickly
		Plug 'wellle/targets.vim' " Add additional text objects. ( a ( b ) c ) , place cursor on 'b' and type v2A)
		Plug 'tpope/vim-sensible' " Defaults everyone can agree on
		" https://github.com/subnut/visualstar.vim/blob/master/plugin/visualstar.vim
		if !( &compatible || !(has('nvim') || has('patch-8.2.1978')) )
			Plug 'subnut/visualstar.vim' " Search stuff selected in visual mode. Select stuff and type *
		else
			call kc#log('no visualstar')
		endif
	" }}}
	" Integration with external tools {{{2
		if executable('hunspell') || executable('aspell')
			KcPlug8 'konfekt/vim-DetectSpellLang' " make Vim autodetect the spellcheck language
		else
			call kc#log('no hunspell and no aspell')
		endif
		Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
		Plug 'junegunn/fzf.vim' " Things you can do with fzf and Vim
		Plug 'salcode/vim-interactive-rebase-reverse', { 'for': ['gitrebase', 'git'] } " reverse order commits during a Git rebase
		" A Git wrapper so awesome, :G
		Plug 'tpope/vim-fugitive' " , { 'on': ['G', 'GBrowse'], 'for': 'git' }
	" }}}
	" Languages syntax and support and parsing {{{2
		KcPlug8 'puremourning/vimspector', {'on': '<Plug>VimspectorContinue'}  " Debugger
		"
		KcPlugCoc 'neoclide/coc.nvim', { 'branch': 'release' } " coc-nvim, for all
		KcPlugCoc 'antoinemadec/coc-fzf' " Use FZF instead of coc.nvim built-in fuzzy finder
		KcPlugCoc 'kamilcuk/vim-lsp-cxx-highlight', { 'dir': plugdir.'kamilcuk-vim-lsp-cxx-highlight'}
		"KcPlugCoc 'stefantb/vim-lsp-cxx-highlight', {'for': ['c', 'cpp'], 'dir': plugdir.'stefantb-vim-lsp-cxx-highlight'}
		"Plug 'vim-syntastic/syntastic' " Using coc-nvim, syntastic is disabled for almost everything
		Plug 'mrk21/yaml-vim', { 'for': [ 'yml', 'yaml' ] }
		Plug 'rodjek/vim-puppet', { 'for': [ 'puppet', 'ruby' ] }
		Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
		Plug 'chr4/nginx.vim', { 'for': 'nginx' }
		KcPlug8 'lervag/vimtex', { 'for': 'tex' } " The plugin for tex
	" }}}
	" Utilities commands to run and execute {{{2
		" Ini file parser for vim, used for parsing PYTHON_GITLAB_CFG for fugitive-gitlab.vim
		Plug 'xuhdev/vim-IniParser'
		Plug 'chrisbra/NrrwRgn' " select region and copy it to new buffer with :NR !!THIS!!
		Plug 'arecarn/vim-crunch' " Calculate stuff. Select: sin(1)**2 and type <leader>p?=
		Plug 'sbdchd/neoformat' " Neoformat and I use :Format
		"Plug 'vimwiki/vimwiki' " make notes
		"Plug 'mileszs/ack.vim' " Use ag/ack/ar grep faster alternatives
		KcPlug8 'jlanzarotta/bufexplorer' " Easier buffer opening/splitting/navigating <leader>be
		"
		Plug 'kamilcuk/vim-ctrlp-oldfiles', { 'on': 'CtrlP' } " Search old files with ctrlp
		" Search ctrlp in command line also. Never used it, so disabling.
		"Plug 'suy/vim-ctrlp-commandline', { 'on': 'CtrlP' }
		Plug 'FelikZ/ctrlp-py-matcher', { 'on': 'CtrlP' } " Faster ctrl-p matcher with python
		Plug 'kien/ctrlp.vim' " File searcher. THE file searcher.
		"
		" Plug 'roman/golden-ratio' " Automatic resizing of Vim windows to the golden ratio.  NIE
		Plug 'fidian/hexmode' " Vim plugin to edit binary files in a hex mode automatically.
		Plug 'preservim/nerdcommenter' " Comment lines with <leader>c<space>
		Plug 'preservim/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } " The file browser.
		Plug 'tyru/open-browser.vim' " Open URI with better browser 'gx'
		Plug 'godlygeek/tabular' " Vim script for text filtering and alignment
		Plug 'tpope/vim-abolish' " abolish.vim: easily search for, substitute, and abbreviate multiple variants of a word
		Plug 'gyim/vim-boxdraw' " Ascii box drawing. Open :new, type :set ve=all, and then select region with ctrl+v and type +o
		Plug 'tpope/vim-eunuch' " Helpers for UNIX :SudoWrite :Delete :Remove :Rename
		Plug 'samoshkin/vim-mergetool' " Efficient way of using Vim as a Git mergetool
		Plug 'tpope/vim-surround' " quoting/parenthesizing made simple
		Plug 'dhruvasagar/vim-table-mode' " print tables in markdown
		Plug 'tpope/vim-unimpaired' " Pairs of handy bracket mappings
		" For vim plugins dependencies
		Plug 'tpope/vim-repeat' " enable repeating supported plugin maps with .
		Plug 'tpope/vim-scriptease' " A Vim plugin for Vim plugins
	" }}}
	" View display visible stuff {{{2
		Plug 'ntpeters/vim-better-whitespace' " Mark whitespaces and I think remove them too
		Plug 'luochen1990/rainbow' " Rainbow Parentheses
		Plug 'ap/vim-buftabline' " Works **way** faster then papercolor tabline
		Plug 'airblade/vim-gitgutter' " Show +/-/~ on the left when file changes in git repo
		Plug 'NLKNguyen/papercolor-theme' " The theme that I use. Actually I modified it that much...
		KcPlug8 'vim-airline/vim-airline' " The vimline below.
	" }}}
	" zzz Utilities that have to be last {{{2
		Plug 'thaerkh/vim-workspace', { 'dir': plugdir.'vim-workspace' }
	" }}}
	" coc plugins {{{
					"\ 'coc-groovy',
					"\ 'coc-coverage',
					"\ 'coc-highlight',
		let g:coc_global_extensions	= [
					\ 'coc-yank',
					\ 'coc-diagnostic',
					\ 'coc-lists',
					\ 'coc-snippets',
					\ 'coc-tabnine',
					\ 'coc-cmake',
					\ 'coc-vimlsp',
					\ 'coc-clangd',
					\ 'coc-yaml',
					\ 'coc-vimtex',
					\ 'coc-solargraph',
					\ 'coc-json',
					\ 'coc-pyright',
					\ ]
		"let g:coc_filetype_map = {
					"\ 'Jenkinsfile': 'groovy',
					"\ }
	" }}}

	call plug#end()

	delcommand KcPlug8
	delcommand KcPlugCoc
endif

" }}}
" Plugins configuration {{{1

if kc#plugin#enabled('ai.vim')
	let g:ai_no_mappings = 1
	" Let ctrl-a stay as number increment operator.
	nnoremap <leader>a :AI
	vnoremap <leader>a :AI
	" inoremap <C-a> <Esc>:AI<CR>a
	" inoremap <C-q> <Esc>:AI<CR>a
endif

if kc#plugin#enabled('vim-better-whitespace')
	let g:better_whitespace_filetypes_blacklist = [
				\ 'keywordprgPydoc.man', 'man',
				\ 'diff', 'git', 'gitcommit', 'unite', 'qf', 'help', 'markdown', 'fugitive' ]
endif

if kc#plugin#enabled('vim-keywordprg-commands')
	let g:vim_keywordprg_commands = {
				\ 'Pydoc': ['pydoc %s', 'man'],
				\ }
	augroup custom_keywordprg
		autocmd!
		autocmd FileType markdown,rst,tex,txt setlocal keywordprg=:DefEng
		autocmd FileType python setlocal keywordprg=:Pydoc
	augroup end
endif

if kc#plugin#enabled('coc-languagetool')
	if filereadable('/usr/bin/languagetool')
		let g:languagetool_cmd='/usr/bin/languagetool'
	elseif filereadable('/usr/share/java/languagetool/languagetool-commandline.jar')
		let g:languagetool_jar = '/usr/share/java/languagetool/languagetool-commandline.jar'
	endif
endif

if kc#plugin#enabled('vim-oscyank')
	autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | OSCYankReg " | endif
endif

" Disable syntastic for C and C++, where coc-clangd is used.
" https://stackoverflow.com/questions/31818109/how-to-selectively-disable-checkers-for-certain-file-types-when-using-syntastic
if kc#plugin#enabled('syntastic') && kc#plugin#enabled('coc.nvim')
	let g:syntastic_mode_map = {
	    \ 'mode': 'active',
	    \ 'passive_filetypes': [
		\ 'c',
		\ 'cpp',
		\ 'python',
		\ 'json',
		\ 'vim',
		\ 'bin',
		\ 'cmake',
		\ 'ruby',
		\ 'java',
		\ 'html',
		\ 'sh',
		\ 'systemd',
		\ 'json',
		\ ]}
endif

" luochen1990/rainbow configuration
if kc#plugin#enabled('rainbow')
	let g:rainbow_active = 1 " be active
	let g:rainbow_conf = {
				\ 'parentheses': [
				\ 	'start=/(/ end=/)/ fold',
				\	'start=/\[/ end=/\]/ fold',
				\	'start=/{/ end=/}/ fold',
				\	'start=/≤/ end=/≥/',
				\	'start=/«/ end=/»/',
				\ ],
				\ 'separately':{
				\ 		'cmake': 0,
				\ 		'cmakehelp': 0,
				\ 	}
				\ }
				"\ 		'c': 0,
				"\ 		'cpp': 0,
endif

if kc#plugin#enabled('vim-airline')
	let g:airline#extensions#tabline#enabled = 0
	let g:airline#extensions#tabline#buffer_nr_show = 0
	"let g:airline#extensions#branch#enabled = 0
endif

if kc#plugin#enabled('vim-workspace')
	let g:workspace_create_new_tabs = 0
	let g:workspace_session_directory = $HOME . '/.vim/sessions/'
	let g:workspace_persist_undo_history = 1  " enabled = 1 (default), disabled = 0
	if has('nvim')
		let g:workspace_undodir = $HOME . '/.vim/undodir/'
	else
		let g:workspace_undodir = $HOME . '/.vim/undodirvim/'
	endif
	let g:workspace_nocompatible = 0
	let g:workspace_session_disable_on_args = 1
	nnoremap <leader>W :ToggleWorkspace<CR>
	" https://github.com/thaerkh/vim-workspace/issues/11
	set sessionoptions-=blank
endif

if kc#plugin#enabled('vim-tips')
	let g:vim_tips_tips_frequency = 0.5
	let g:vim_tips_tips_frequency = 1
endif

" morhetz/gruvbox
"let g:gruvbox_contrast_dark = 'hard'
"let g:gruvbox_contrast_light = 'hard'
"let g:gruvbox_guisp_fallback = "bg"

" https://github.com/derekwyatt/vim-fswitch
"let g:fsnonewfiles = 0
"autocmd FileType c,cpp  let b:fswitchlocs = './,../include,reg:/src/include/'
"autocmd BufEnter *.c    let b:fswitchdst = 'h'
"autocmd BufEnter *.h    let b:fswitchdst = 'c,cpp'
"autocmd BufEnter *.cpp  let b:fswitchdst = 'h,hpp'
"autocmd BufEnter *.hpp  let b:fswitchdst = 'cpp'

" https://github.com/aperezdc/vim-template
if kc#plugin#enabled('vim-template')
	let g:templates_no_autocmd = 1
	let g:templates_global_name_prefix = '=template=.'
	let g:templates_directory = [ g:kamilscripts . '/vim/templates/' ]
	let g:templates_user_variables = [
		\ ['GUARDPATH', 'KcVimTemplateGuardpath'],
		\ ['RANDOM', 'KcVimTemplateRandom'],
		\ ]
	function! KcVimTemplateGuardpath()
		return toupper(substitute(expand('%:p:.'), '[^a-zA-Z0-9]', '_', 'g')) . '_'
	endfunction
	function! KcVimTemplateRandom()
		return system('uuidgen')[:-2]
	endfunction
endif

if kc#plugin#enabled('ctrlp.vim')
	let g:ctrlp_custom_ignore = {
				\ 'dir':  '\v[\/](\.git|\.hg|\.svn|\.cache|\.tox|_build|spec/fixtures/modules|.*\.egg-info|\.pytest_cache)$',
				\ 'file': '\v\.(exe|so|dll)$',
				\ }
	let g:ctrlp_show_hidden = 1
	" https://github.com/FelikZ/ctrlp-py-matcher
	let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
	let g:ctrlp_extensions = []
	" Preserve cache
	let g:ctrlp_clear_cache_on_exit = 1
	let g:ctrlp_cache_dir = $HOME.'/.cache/vim/ctrlp'
	" ctrlp oldfiles plugin
	let g:ctrlp_extensions += ['oldfiles']
	let g:ctrlp_working_path_mode = ''
	command! CtrlPoldfiles call ctrlp#init(ctrlp#oldfiles#id())
	let g:ctrlp_follow_symlinks = 1
	if executable('ag')
		" https://github.com/kien/ctrlp.vim/issues/576
		let g:ctrlp_user_command = 'ag --ignore-case --nogroup --hidden --follow
			\ --skip-vcs-ignores
			\ --ignore .tox/
			\ --ignore .git/
			\ --ignore hg/
			\ --ignore svn/
			\ --ignore .cache/
			\ --ignore _build/
			\ --ignore spec/fixtures/modules/
			\ --ignore "*.exe"
			\ --ignore "*.so"
			\ --ignore "*.dll"
			\ --ignore "*.egg-info/"
			\ --ignore ".pytest_cache/"
			\ --ignore "__pycache__/"
			\ --ignore ".mypy_cache/"
			\ --files-with-matches
			\ --max-count 50000
			\ %s
			\ --filename-pattern ""'
	endif
endif

" https://github.com/ggreer/the_silver_searcher
if kc#plugin#enabled('ack.vim')
	if executable('ag')
		let g:ackprg = 'ag --vimgrep -u --follow'
	elseif executable('rg')
		let g:ackprg = 'rg --vimgrep'
	else
		" defaults
	endif
endif

if 0 || kc#plugin#enabled('gen_tags.vim')
	let g:loaded_gentags#ctags = 0
	let g:gen_tags#gtags_auto_gen = 1
	let g:gen_tags#gtags_auto_update = 1
	let g:gen_tags#blacklist = [ $HOME ]
	let g:gen_tags#statusline = 0
	let g:gen_tags#gtags_default_map = 0
	let g:gen_tags#use_cache_dir = 0
	let g:gen_tags#cache_dir = '.cache'
endif

if kc#plugin#enabled('golden-ratio')
	" https://github.com/roman/golden-ratio/issues/22#issuecomment-267785637
	let g:golden_ratio_exclude_nonmodifiable = 1
	" let b:golden_ratio_resizing_ignored = 1
	"let g:golden_ratio_autocommand = 0
	" Mnemonic: - is next to =, but instead of resizing equally, all windows are
	" resized to focus on the current.
	"nmap <C-w>- <Plug>(golden_ratio_resize)
	" Fill screen with current window.
	"nnoremap <C-w>+ <C-w><Bar><C-w>_
endif

if 0 || kc#plugin#enabled('gutentags')
	let g:gutentags_dont_load = 1
	let g:gutentags_ctags_exclude = [
		\ '*.git', '*.svg', '*.hg', '.git', '.github',
		\ '*/tests/*', '_build', '.build', 'build', '.clangd',
		\ 'dist', '*sites/*/files/*',
		\ 'bin', 'node_modules', 'bower_components', 'cache', 'compiled',
		\ 'docs', 'example', 'bundle', 'vendor', '*.md',
		\ '*-lock.json', '*.lock', '*bundle*.js', '*build*.js',
		\ '.*rc*', '*.json', '*.html', '*.min.*', '*.map', '*.bak',
		\ '*.zip', '*.pyc', '*.class', '*.sln', '*.Master', '*.csproj', '*.tmp',
		\ '*.csproj.user', '*.cache', '*.pdb', 'tags*', 'cscope.*', '*.css',
		\ '*.less', '*.scss', '*.exe', '*.dll', '*.mp3', '*.ogg', '*.flac', '*.swp', '*.swo',
		\ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
		\ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
		\ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
		\ '*.map', '*.ld', '*.txt', '.vscode', '*.key',
		\ '*.json', '*.cproject', '*.project',
		\ ]
	let g:gutentags_modules = ['ctags', 'gtags_cscope']
	let g:gutentags_generate_on_new = 1
	let g:gutentags_generate_on_missing = 1
	let g:gutentags_generate_on_write = 1
	let g:gutentags_generate_on_empty_buffer = 0
	let g:gutentags_cscope_build_inverted_index = 1
	let g:gutentags_ctags_extra_args = [
		\ '--tag-relative=yes',
		\ '-h=.c.h.cpp.hpp.asm.cmake.make',
		\ '--fields=+ailmnS',
		\ ]
	let g:gutentags_ctags_exclude += [
		\ '*/Unity/examples',
		\ '*/Unity/extra',
		\ '*/Unity/test',
		\ '_build_tools/*/examples',
		\ ]
	let g:gutentags_trace = 0
	let g:gutentags_find_args = ' -path ./_build -prune -o -regextype egrep -regex .*\.(cpp|hpp|[hcsS])$ '
endif

if 0 && kc#plugin#enabled('smooth-scroll')
	noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 5, 2)<CR>
	noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 5, 2)<CR>
	noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 5, 4)<CR>
	noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 5, 4)<CR>
endif

if kc#plugin#enabled('vim-mergetool')
	" By default - local | merged | remote , like in meld.
	let g:mergetool_layout = 'lmR'
	" Use ctrl+right ctrl+left to merge stuff in merge mode
	nmap <leader>mt <plug>(MergetoolToggle)
	nmap <expr> <C-Left>    !&diff ? '<C-Left>'  : '<Plug>(MergetoolDiffExchangeLeft)  ]c<CR>'
	nmap <expr> <C-Right>   !&diff ? '<C-Right>' : '<Plug>(MergetoolDiffExchangeRight) ]c<CR>'
	nmap <expr> <C-Down>    !&diff ? '<C-Down>'  : '<Plug>(MergetoolDiffExchangeDown)  ]c<CR>'
	nmap <expr> <C-Up>      !&diff ? '<C-Up>'    : '<Plug>(MergetoolDiffExchangeUp)    ]c<CR>'
	"
	"function s:on_mergetool_set_layout(split)
		"set syntax=off
		"set nospell
	"endfunction
	"let g:MergetoolSetLayoutCallback = function('s:on_mergetool_set_layout')
	"function MLayoutCompletion(ArgLead, CmdLine, CursorPos)
		"return [ "mr", "lmr", "bmr", "LBR" ]
	"endfunction
	"command MLayout -nargs=1 -complete=customlist, :MergetoolToggleLayout <q-args><CR>
endif

if kc#plugin#enabled('showmarks')
	let g:showmarks_enable = 0
	let g:showmarks_add_maps = 0
	let g:showmarks_ignore_type = 'hpq'
endif

if kc#plugin#enabled('nerdcommenter')
	" use // instead of /* */ in C by default
	let g:NERDAltDelims_c = 1
	let g:NERDAltDelims_java = 1
	let g:NERDCustomDelimiters = {
				\ 'hcl': { 'left': '#', 'right': '', },
				\ 'Jenkinsfile': { 'left': '//', 'right': '', },
				\ }
endif

if kc#plugin#enabled('spelunker.vim')
	" Disable by default - use ZT to enable
	let g:enable_spelunker_vim = 0
endif

nmap <F5> <Plug>VimspectorContinue
if kc#plugin#enabled('vimspector')
	let g:vimspector_enable_mappings = 'HUMAN'
	let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-cpptools', 'CodeLLDB' ]
	let g:vimspector_base_dir = expand('$HOME/.vim/spector-config')
	if empty(glob(g:vimspector_base_dir.'/configurations')) && isdirectory(g:kamilscripts.'/vim/vimspector')
		call mkdir(g:vimspector_base_dir.'/configurations', 'p')
		execute '!ln -nvs '.shellescape(g:kamilscripts).'/vim/vimspector '.shellescape(g:vimspector_base_dir).'/configurations'
	endif
	" mnemonic 'di' = 'debug inspect' (pick your own, if you prefer!)
	" for normal mode - the word under the cursor
	nmap <Leader>di <Plug>VimspectorBalloonEval
	" for visual mode, the visually selected text
	xmap <Leader>di <Plug>VimspectorBalloonEval
	" You may also wish to add mappings for up/down the stack, for example:
	nmap <LocalLeader><F11> <Plug>VimspectorUpFrame
	nmap <LocalLeader><F12> <Plug>VimspectorDownFrame
	nmap <LocalLeader>B     <Plug>VimspectorBreakpoints
	nmap <LocalLeader>D     <Plug>VimspectorDisassemble
	" dc = 'Debug Stop'
	nmap <Leader>dc :VimspectorReset<CR>
endif

if kc#plugin#enabled('Colorizer')
	let g:colorizer_auto_color = 1
	" sets g:colorizer_custom_colors with xterm256 colors
	call kc#xterm256colornames#colorizer()
endif

if kc#plugin#enabled('vim-DetectSpellLang')
	let g:detectspelllang_langs = {}
	let g:detectspelllang_langs.aspell = [ 'en_US', 'pl_PL' ]
	let g:detectspelllang_langs.hunspell = [ 'en_US', 'pl_PL' ]
endif

if kc#plugin#enabled('vim-dispatch')
	function KcDispatchComplete_firstErrorHasValidFile() abort
		" Check if the first valid error in quickfix has a valid file
		for i in getqflist()
			if !i.valid | continue | endif
			if filereadable(bufname(i.bufnr))
				echo bufname(i.bufnr)
				return 1
			endif
			break
		endfor
		return 0
	endfunction
	function KcDispatchComplete() abort
		Copen
		if 0 " cDispatchComplete_firstErrorHasValidFile()
			" If we can navigate to the file with the first error, then
			" instantaneously navigate to it.
			cc 1
			cn
		else
			" Otherwise on success or file not found,
			" let the cursor stay where it is.
			normal G
			wincmd p
		endif
	endfunction
	augroup KcDispatchComplete
		au!
		" DispatchComplete is my patch to vim-dispatch
		autocmd User DispatchComplete call KcDispatchComplete()
		" Put copen window on the lef.
		"autocmd FileType qf wincmd L
	augroup END
	let g:dispatch_quickfix_height = &lines / 3
endif

if kc#plugin#enabled('vimwiki')
	let g:vimwiki_list = [{'path': '~/vimwiki/',
						  \ 'syntax': 'markdown', 'ext': '.md'}]
endif

if kc#plugin#enabled('vim-eunuch')
	"delcommand W
	"delcommand Wall
	cmap W!! SudoWrite
endif

if kc#plugin#enabled('neoformat')
	let g:neoformat_scheme_schemeformat = {
				\ 'exe': ',scheme-format',
				\ 'stdin': 1,
				\ }
	let g:neoformat_enabled_scheme = ['schemeformat']
	if executable('tidy-imports') && executable('isort') && executable('black')
		" Fun fact: neoformat executes system(...) effectively calling shell.
		let g:neoformat_python_tidyimportsisortblack = {
					\ 'exe': ',tidyimportsisortblack',
					\ 'env': [ 'BASH_ENV=' ],
					\ 'stdin': 1,
					\ 'stderr': 1,
					\ }
		let g:neoformat_enabled_python = [ 'tidyimportsisortblack' ]
	endif
	let g:neoformat_hcl_nomad = {
				\ 'exe': 'nomad',
				\ 'args': [ 'fmt', '-' ],
				\ 'stdin': 1,
				\ }
	let g:neoformat_enabled_hcl = [ 'nomad' ]
	" Add `:Format` command to format current buffer.
	"command! -nargs=0 Format :call CocAction('format')
	" neoformat/plugin/neoformat.vim
	command! -nargs=? -bar -range=% -bang -complete=customlist,neoformat#CompleteFormatters Format
				\ call neoformat#Neoformat(<bang>0, <q-args>, <line1>, <line2>)
	command! -nargs=? -bar -range=% -bang -complete=customlist,neoformat#CompleteFormatters F
				\ call neoformat#Neoformat(<bang>0, <q-args>, <line1>, <line2>)
endif

if kc#plugin#enabled('vim-buftabline')
	let g:buftabline_indicators = 1
	let g:buftabline_numbers = 1
endif

if kc#plugin#enabled('fugitive-gitlab.vim')
	if exists('IniParser#Read')
		let tmp = get(environ(), 'PYTHON_GITLAB_CFG', '')
		if filereadable(tmp)
			let tmp = IniParser#Read(tmp)
			let g:fugitive_gitlab_domains = []
			let g:gitlab_api_keys = {}
			for [key, value] in items(tmp)
				if key ==? 'global' | continue | endif
				if has_key(value, 'url') && has_key(value, 'private_token')
					let g:fugitive_gitlab_domains += [get(value, 'url')]
					call extend(g:gitlab_api_keys, {get(value, 'url'): get(value, 'private_token')})
				endif
			endfor
		endif
		unlet tmp
	endif
endif

if kc#plugin#enabled('vim-lsp-cxx-highlight')
	let g:lsp_cxx_hl_use_byteidx = 1
endif

if kc#plugin#enabled('nerdtree')
	nmap <C-n> :NERDTreeToggle<CR>
	let g:NERDTreeBookmarksFile = expand('~/.vim/NERDTreeBookmarks')
	let g:NERDTreeAutoDeleteBuffer = 1
	let g:NERDTreeMinimalUI = 0
	let g:NERDTreeIgnore = [
				\ '^__pycache__$',
				\ '^[^\.]*\.egg-info$',
				\ ]
	augroup NERDTree
		autocmd!
		" Close vim if only window is a Nerd Tree
		autocmd BufEnter * if winnr("$") == 1 && exists("b:NERTree") && b:NERDTree.isTabTree() | q | endif
	augroup END
endif

if kc#plugin#enabled('open-browser.vim')
	nmap gx <Plug>(openbrowser-open)
	vmap gx <Plug>(openbrowser-open)
endif

" https://github.com/junegunn/fzf.vim/blob/a4ce66d72508ce7c626dd7fe1ada9c3273fb5313/autoload/fzf/vim.vim#L761
"function! KcAg(query, ...)
  "if type(a:query) != s:TYPE.string
    "return s:warn('Invalid query argument')
  "endif
  "let query = empty(a:query) ? '^(?=.)' : a:query
  "let args = copy(a:000)
  "let ag_opts = len(args) > 1 && type(args[0]) == s:TYPE.string ? remove(args, 0) : ''
  "let command = ag_opts . fzf#shellescape(query)
  "echom ag_opts.' AA '.command
  "return call('fzf#vim#ag_raw', insert(args, command, 0))
"endfunction
"command! -bang -nargs=* Ag call KcAg(<q-args>, fzf#vim#with_preview(), <bang>0)

if kc#plugin#enabled('fzf.vim')
	command! -bang -nargs=* AG call fzf#vim#ag(<q-args>, fzf#vim#with_preview(), <bang>0)
endif

if kc#plugin#enabled('vim-glaive')
	call glaive#Install()
	" Optional: Enable coverage's default mappings on the <Leader>C prefix.
	Glaive coverage plugin[mappings]
endif

" }}}
" coc.nvim {{{1

if kc#plugin#enabled('coc.nvim')

let g:coc_config_home = g:kamilscripts . 'vim/coc-settings'
let g:coc_default_semantic_highlight_groups = 1

" This has been taken from the readme:
" https://github.com/neoclide/coc.nvim/blob/master/README.md#example-vim-configuration
if 1
	" Use tab for trigger completion with characters ahead and navigate
	" NOTE: There's always complete item selected by default, you may want to enable
	" no select by `"suggest.noselect": true` in your configuration file
	" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
	" other plugin before putting this into your config
	inoremap <silent><expr> <TAB>
		  \ coc#pum#visible() ? coc#pum#next(1) :
		  \ <SID>CheckBackspace() ? "\<Tab>" :
		  \ coc#refresh()
	inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

	" Make <CR> to accept selected completion item or notify coc.nvim to format
	" <C-g>u breaks current undo, please make your own choice
	inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
								  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

	function! s:CheckBackspace() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~# '\s'
	endfunction

	" Use <c-space> to trigger completion
	if has('nvim')
	  inoremap <silent><expr> <c-space> coc#refresh()
	else
	  inoremap <silent><expr> <c-@> coc#refresh()
	endif

	" Use `[g` and `]g` to navigate diagnostics
	" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
	nmap <silent> [g <Plug>(coc-diagnostic-prev)
	nmap <silent> ]g <Plug>(coc-diagnostic-next)

	" GoTo code navigation
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)

	" CHANGES
	nnoremap <silent> <leader>k :call <SID>ShowDocumentation()<CR>
	function! s:ShowDocumentation()
		if CocAction('hasProvider', 'hover')
			call CocActionAsync('doHover')
		else
			call kc#log('no coc hover')
			"call feedkeys('K', 'in')
		endif
	endfunction

	" CHANGES
	if 0
		" Highlight the symbol and its references when holding the cursor
		autocmd CursorHold * silent call CocActionAsync('highlight')
	endif

	" Symbol renaming
	nmap <leader>rn <Plug>(coc-rename)

	" Formatting selected code
	xmap <leader>f  <Plug>(coc-format-selected)
	nmap <leader>f  <Plug>(coc-format-selected)

	augroup coc-nvim-mygroup
	  autocmd!
	  " Setup formatexpr specified filetype(s)
	  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	  " Update signature help on jump placeholder
	  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	augroup end

	" Applying code actions to the selected code block
	" Example: `<leader>aap` for current paragraph
	xmap <leader>a  <Plug>(coc-codeaction-selected)
	nmap <leader>a  <Plug>(coc-codeaction-selected)

	" Remap keys for applying code actions at the cursor position
	nmap <leader>ac  <Plug>(coc-codeaction-cursor)
	" Remap keys for apply code actions affect whole buffer
	nmap <leader>as  <Plug>(coc-codeaction-source)
	" Apply the most preferred quickfix action to fix diagnostic on the current line
	nmap <leader>qf  <Plug>(coc-fix-current)

	" Remap keys for applying refactor code actions
	nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
	xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
	nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

	" Run the Code Lens action on the current line
	nmap <leader>cl  <Plug>(coc-codelens-action)

	" Map function and class text objects
	" NOTE: Requires 'textDocument.documentSymbol' support from the language server
	xmap if <Plug>(coc-funcobj-i)
	omap if <Plug>(coc-funcobj-i)
	xmap af <Plug>(coc-funcobj-a)
	omap af <Plug>(coc-funcobj-a)
	xmap ic <Plug>(coc-classobj-i)
	omap ic <Plug>(coc-classobj-i)
	xmap ac <Plug>(coc-classobj-a)
	omap ac <Plug>(coc-classobj-a)

	" Remap <C-f> and <C-b> to scroll float windows/popups
	if has('nvim-0.4.0') || has('patch-8.2.0750')
	  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
	  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
	  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
	  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
	  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
	  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
	endif

	" Use CTRL-S for selections ranges
	" Requires 'textDocument/selectionRange' support of language server
	nmap <silent> <C-s> <Plug>(coc-range-select)
	xmap <silent> <C-s> <Plug>(coc-range-select)

	if 0
		" Add `:Format` command to format current buffer
		command! -nargs=0 Format :call CocActionAsync('format')
	endif

	" Add `:Fold` command to fold current buffer
	command! -nargs=? Fold :call     CocAction('fold', <f-args>)

	" Add `:OR` command for organize imports of the current buffer
	command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

	if 0
		" Add (Neo)Vim's native statusline support
		" NOTE: Please see `:h coc-status` for integrations with external plugins that
		" provide custom statusline: lightline.vim, vim-airline
		set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
	endif

	" Mappings for CoCList
	" Show all diagnostics
	nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
	" Manage extensions
	nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
	" Show commands
	nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
	" Find symbol of current document
	nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
	" Search workspace symbols
	nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
	" Do default action for next item
	nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
	" Do default action for previous item
	nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
	" Resume latest coc list
	nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
endif

" https://github.com/neoclide/coc-highlight
if !kc#plugin#enabled('semshi')
	autocmd CursorHold ?* silent call CocActionAsync('highlight')
else
	" Exclude python filetype, semshi is providing highlighting.
	function! CocHighlightExceptPython() abort
		if &filetype ==? 'python'
			return
		endif
		call CocActionAsync('highlight')
	endfunction
	autocmd CursorHold ?* silent call CocHighlightExceptPython()
endif

if kc#plugin#enabled('coc-fzf')
	" Mapping from https://github.com/antoinemadec/coc-fzf
	nnoremap <silent><nowait> <space>a  :<C-u>CocFzfList diagnostics<CR>
	nnoremap <silent><nowait> <space>e  :<C-u>CocFzfList extensions<CR>
	nnoremap <silent><nowait> <space>c  :<C-u>CocFzfList commands<CR>
	nnoremap <silent><nowait> <space>o  :<C-u>CocFzfList outline<CR>
	nnoremap <silent><nowait> <space>l  :<C-u>CocFzfList location<CR>
	nnoremap <silent><nowait> <space>s  :<C-u>CocFzfList symbols<CR>
	nnoremap <silent><nowait> <space>p  :<C-u>CocFzfListResume<CR>
	nnoremap <silent><nowait> <space>b  :<C-u>CocFzfList diagnostics --current-buf<CR>
endif

if 1
	" https://www.reddit.com/r/vim/comments/8urbln/cursorholdcursorholdi_with_different_updatetimes/
	function! TriggerCocIf()
		return &modifiable &&
					\ exists('nvim_win_get_config') &&
					\ exists('coc#pum#visible') &&
					\ exists('coc#start') &&
					\ !coc#pum#visible() &&
					\ nvim_win_get_config(0).relative == ''
	endfunction
	function! TriggerCocAfterInactivity(timerid)
		"echom "Calling coc-start() " . a:timerid
		if TriggerCocIf()
			call coc#start()
		endif
	endfunction
	function! TriggerCocStopTimer()
		if exists('b:mytimer')
			" echom "Stopping timer " . b:mytimer
			call timer_stop(b:mytimer)
			unlet b:mytimer
		endif
	endfun
	function! TriggerCocStartTimer()
		call TriggerCocStopTimer()
		" https://vi.stackexchange.com/questions/17194/expandcword-returns-empty-string-in-inoremap
		let l:WORDContainingCursor = matchstr(getline('.'), '\S*\%' . virtcol('.') . 'v\S*')
		if len(l:WORDContainingCursor) < 3 || !TriggerCocIf()
			return
		endif
		let l:wait = 3000
		if l:wait < &updatetime
			call TriggerCocAfterInactivity(0)
		else
			let l:timertime = l:wait - &updatetime
			let b:mytimer = timer_start(l:timertime, 'TriggerCocAfterInactivity')
			"echom "Started timer " . b:mytimer . " " . l:timertime
		endif
	endfun
	augroup TriggerCocTimer
		autocmd!
		autocmd CursorHold,CursorHoldI * call TriggerCocStartTimer()
		autocmd CursorMoved,CursorMovedI,InsertCharPre,InsertLeave * call TriggerCocStopTimer()
	augroup end
endif

endif " kc#plugin#enabled('coc.nvim')

" }}}
" vimtex Configuration {{{1

if kc#plugin#enabled('vimtex')
	if has('nvim')
		let g:vimtex_compiler_progname = 'nvr'  " :help vimtex-faq-neovim
	endif
	let g:vimtex_view_method = 'mupdf'
	"let g:livepreview_previewer = 'evince'
endif

augroup KcLatex
	autocmd!
	" autocmd FileType tex :TexItemize <f6> :s/^ */\\item /<cr>'<O\begin{itemize}<esc>'>o\end{itemize}<esc>
augroup END

" }}}
" Color scheme {{{1

set background=dark
colorscheme kamilcuk

" }}}
" Project specific {{{1

" Seamlessly detect cmake out-of-source build errors in subdirectories
set errorformat^=../%f:%l:%c:\ %m
set errorformat^=../../%f:%l:%c:\ %m
set errorformat^=../../../%f:%l:%c:\ %m
" Detect ctest -V errors
" 1/8 Test #1: kamcuk_libc_kasprintf .............***Failed    0.03 sec
let &errorformat .= ',%\d%\+/%\d%\+ Test #%l: %f %[.]%#***Failed  %m'
" 5: /home/kamil/myprojects/kamillibc/libs/libc/src/ringbuffer.c:251:4: runtime error: null ....
let &errorformat = '%\d%\+: %f:%l:%c: %m,' . &errorformat
" Detect AddressSanitizer errors
" #2 0x555f87c5271d in DataContainer::getName[abi:cxx11]() const /tmp/1.cpp:8
let &errorformat .= ',%+G    #%\d%\+ 0x%[0-9a-fA-F]%\+ in %.%# %f:%l'

let s:sudo = ($USER ==# 'root' ? 'sudo ' : '')

if getcwd() =~# '/etc/nginx' || expand('%') =~# '/etc/nginx'
	let &makeprg=s:sudo.'nginx -t && '.s:sudo.'nginx -s reload'
endif

if getcwd() =~# '/etc/samba' || expand('%') =~# '/etc/samba'
	let &makeprg=s:sudo.'testparm -s 2>&1 && '.s:sudo.'systemctl restart smb'
endif

if filereadable(getcwd().'/pdk.yaml')
	let &makeprg = ',pdk unit_test'

	set errorformat=""

	" Custom format for my custom executable
	" Match directory that ,pdk changes to when unit testing
	" ,pdk: info: + 'cd' '/home/kamil/ncbj/puppet/diz_domain'
	let &errorformat.= '%D\,pdk: info: + ''cd'' ''%f'''

	let &errorformat.=',pdk %m (%f:%l:%c)'
	let &errorformat.=',pdk %m (%f:%l)'
	let &errorformat.=',pdk %m (%f)'

	"       error during compilation: Evaluation Error: Error while evaluating a Resource Statement, Unknown resource type: 'cron' (file: /home/.../gcalendar_server_booking.pp, line: 53, column: 3) on node leonidas.cis.gov.pl
	let &errorformat.=',       %[ ]%#error during compilation: %m (file: %f\, line: %l\, column: %c)%.%#'
	let &errorformat.=',       %[ ]%#error during compilation: %m (file: %f\, line: %l)%.%#'
	let &errorformat.=',       %[ ]%#error during compilation: %m (file: %f)%.%#'


	"       error during compilation: Evaluation Error: Error while evaluating a Function Call, Failed to parse template chgate/openvpn-chronos.conf:
	"         Filepath: /home/.../openvpn-chronos.conf
	"         Line: 16
	"         Detail: undefined method `[]' for nil:NilClass
	"        (file: /home/.../openvpn.pp, line: 9, column: 16) on node leonidas.

	let &errorformat.=',%E         %[ ]%#Filepath: %f'
	let &errorformat.=',%C         %[ ]%#Line: %l'
	let &errorformat.=',%Z         %[ ]%#Detail: %m'
	let &errorformat.=  ',        %[ ]%#(file: %f\, line: %l\, column: %c) %m'
	let &errorformat.=  ',        %[ ]%#(file: %f\, line: %l) %m'
	let &errorformat.=  ',        %[ ]%#(file: %f) %m'

	" rspec ./spec/classes/zwierzak/limits_spec.rb:10 # diz_domain::zwierzak::limits on centos-7-x86_64 is expected to compile into a catalogue without dependency cycles
	let &errorformat.=',rspec %f:%l # %m'

	"       error during compilation: Parameter source failed on File[Provision /etc/pip.conf configuration]: ....
	"let &errorformat.=',%E      %#error during compilation: %#%m'
	"       ' (file: /home/kamil/ncbj/puppet/diz_zwierzak/spec/fixtures/modules/diz_zwierzak/manifests/pip.pp, line: 8)
	"let &errorformat.=',%Z      %#%m (file: %f\, line: %l\, column: %c)%.%#'
	"let &errorformat.=',%Z      %#%m (file: %f\, line: %l)%.%#'
	"let &errorformat.=',%Z      %#%m (file: %f)%.%#'
	"       # Set the pip repository to use nexus
	"       [global]
	"       index = https://nexus.services.idea.edu.pl/repository/pypi-all/pypi
	"       index-url = https://nexus.services.idea.edu.pl/repository/pypi-all/simple
	"let &errorformat.=',%C      %#%m'
	"let &errorformat.=',%C     %#' " just an empty line..

	" pdk (INFO): Validator 'puppet-epp' skipped for '/home/kamil/ncbj/puppet/diz_domain'. No files matching '["**/*.epp"]' found to validate.
	"let &errorformat.=',%Dpdk (INFO): Validator ''%.%#'' skipped for ''%f''%.%#'



		"let &errorformat.='       error during compilation: %m (file: %f\,
		"line: %l\, column: %c) %.%#'
		"	"let &errorformat.=',       error during compilation: %m \(file:
		"	%f\, line: %l\) %.%#'
		"
	"let &errorformat.='       error during compilation: %m (file: %f\, line: %l\, column: %c) %.%#'
	"let &errorformat.=',       error during compilation: %m \(file: %f\, line: %l\) %.%#'

	"let &makeprg="cat /tmp/1"
endif

if getcwd() =~# '/home/kamil/ncbj/chronos-ansible'
	let &makeprg = 'ansible-playbook site.yml --diff --check'
endif

" }}}
" Custom functions {{{1

function KcRestartXbindkeys()
	! if pid=$(pgrep -u '$(id -u)' xbindkeys); then kill -HUP '$pid'; else xbindkeys; fi
endfunction
autocmd BufWritePost .xbindkeysrc.scm silent! call KcRestartXbindkeys()
autocmd BufWritePost .xbindkeysrc     silent! call KcRestartXbindkeys()

if hostname() =~# '\.striketechnologies\.com'
	if executable('/usr/bin/python3')
		let g:python3_host_prog = '/usr/bin/python3'
	endif
	if kc#plugin#enabled('coc.nvim')
		call coc#config("http.proxy",  "http://st-proxy01.striketechnologies.com:3128/")
		call coc#config("https.proxy", "http://st-proxy01.striketechnologies.com:3128/")
		call coc#config('https.rejectUnauthorized', v:false)
		call coc#config('http.proxyStrictSSL', v:false)
	endif
endif

" }}}

" vim: filetype=vim:foldmethod=marker
