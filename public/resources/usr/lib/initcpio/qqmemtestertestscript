#!/bin/bash

qq_get_info() {
	local leavefreemem=200
        speed="$(cat /proc/cpuinfo  | grep "cpu MHz" | head -n 1 | awk '{print $4}')"
        cores="$(cat /proc/cpuinfo | grep "^processor" | wc -l)"
        memfree="$(( $(cat /proc/meminfo  | grep MemFree | awk {'print $2'})/1024 ))"
        memtest="$(( (memfree-leavefreemem)/cores ))"
	export speed cores memfree memtest
}

case "$1" in
init)
	. /init_functions
	########################################################################
	# term
	export TERM=xterm
	export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/usr/bin"
	export HOME=/root
	########### memtester ! ###############################################

	echo 1 > /proc/sys/kernel/sysrq

	openvt -c 2 -- /bin/bash --login +m
	openvt -c 3 -- /bin/bash --login +m
	openvt -c 4 -- /bin/bash +m -c "env TERM=xterm htop;"
	openvt -c 10 -- /bin/bash +m -c "watch -n 1 /usr/local/bin/qqmemtestertestscript info"
	openvt -c 11 -- /usr/local/bin/qqmemtestertestscript background
	openvt -c 12 -- dmesg -wH

	qq_get_info

	echo "## Found $cores cores with $speed MHz each."
	echo "## Found $memfree MB free memory. Will test $memtest MB per core."
	if test "${memtest}" -le 30; then
		echo "Really low memory on this system"
		echo "Droping to interactive shell."
		exec /bin/bash
	fi

	for i in $( seq 5 $((cores+4)) ); do
		openvt -c ${i} -- /bin/bash -xc "tty; memtester $memtest;"
	done

	echo
	echo
	echo "## Found $cores cores with $speed MHz each."
	echo "## Found $memfree MB free memory. Will test $memtest MB per core."
	echo "There are $(ps -ax -o command | grep "^memtester" | wc -l) memtesters running!"
	echo "What is running where?"
	echo "tty1 -> memtesterinfo and after /bin/bash"
	echo "tty2 -> /bin/bash --login +m"
	echo "tty3 -> /bin/bash --login +m"
	echo "tty4 -> htop"
	echo "tty{5, 6, ...} -> memtester"
	echo "tty10 -> watch qqmemtestertestscript info"
	echo "tty11 -> qqmemtestertestscript backgroud"
	echo "tty12 -> dmesg -wH"
	sleep 5
	exec /bin/bash --login +m
	;;

info)
	qq_get_info

	echo "# $cores cores! with speed: $speed MHz. $memfree MB free memory! Testing 4*$memtest MB!"
	echo "There are $(ps -ax -o command | grep "^memtester" | wc -l) memtesters running!"
	echo -n "Date:   "; date
	echo -n 'Uptime: '; uptime;
	echo -n "free:   "; free | grep Mem;
	echo "# sensors";
	sensors | sed '/^$/d';
	echo
	echo Last dmesg messages; 
	dmesg | tail -n 20;
	;;

background)

	cat > /etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
EOF

	cat > /etc/group << "EOF"
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tty:x:4:
tape:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
EOF


	mkdir -p /var/run /var/log /var/run
	touch /var/run/utmp /var/log/{btmp,lastlog,wtmp}
	chgrp -v utmp /var/run/utmp /var/log/lastlog
	chmod -v 664 /var/run/utmp /var/log/lastlog

	/usr/bin/ssh-keygen -A

	yes YES | sensors-detect

	## internet
	if test -f /usr/bin/dhcpcd; then
		ip link set eth0 up
		dhcpcd eth0
	fi

	## cpu overheat
	while sleep 2; do
		temp="$(sensors | grep "CPU Temp" | awk '{print $3}' | cut -c 2-3)"
		sensors
		echo;
		echo "CPU TEMP: $temp"
		if test -z "$temp"; then
			break;
		fi
		if test "$temp" -ge 65; then
			beep 
		fi
		if test "$temp" -ge 80; then
			wall "CPU TEMP TOO HIGH: $temp"
			logger "CPU TEMP TOO HIGH: $temp"
			halt
		fi
	done
	;;
*)
	echo "Unknown command line argument."
	;;
esac
