#!/bin/bash
set -euo pipefail

DEBUG=${DEBUG:-false}

C_logs_with_timestamp() {
	# Convert old date format to new date format
	# Convert date to dash separated stamps
	# Convert RFC to seconds since epoch and prepend to each line.
	sed -r '
		s/^\[([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2})\]/\1-\2-\3-\4-\5-00/
		s/^\[([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})\+([0-9]+)\]/\1-\2-\3-\4-\5-\6/
		' /var/log/pacman.log |
		awk '{ $1 = mktime(gensub("-", " ", "g", $1))" "$1 } 1'
}

C_logs_with_timestamp_since() {
	if [ $# -lt 1 ]; then
		cat << EOF
Usage examples:
	$0 today
	$0 yesterday
	$0 last week
	$0 last saturday
	$0 last month
EOF
		exit
	fi
	since=$(date --date="$*" +%s)
	C_logs_with_timestamp | awk -v since="$since" '$1 > since'
}


C_list_packages_installed_since() {
	since=$(date --date="$*" +%s)

	tmp=$(C_logs_with_timestamp_since "$@")

	ins=$(<<<"$tmp" sed -n 's/.* \[ALPM\] installed \(.*\) ([^ ]*.*/\1/p' | sort -u )
	insexp=$(comm -12 - <<<"$ins" <(pacman -Qqe) )
	remov=$( comm -23 - <<<"$ins" <(pacman -Qq ) )
	still=$( comm -12 - <<<"$ins" <(pacman -Qq ) )
	{
		echo "date -d \"$*\"# $(date --date="@$since")"
		echo "Packages explicitly installed# "$insexp
		echo "Packages installed# "$ins
		echo "Packages already removed# "$remov
		echo "Packages still installed# "$still
	} | column -s'#' -t -o:
}

C_remove_packages_installed_since() {
	C_list_packages_installed_since "$@"
	echo
	echo "+ pacman --confirm -R "$still
	pacman --confirm -R $still
}

C_remove_packages_installed_today() {
	C_remove_packages_installed_since "today 00:00:00"
}

C_is_installed() {
	pacman -Qi "$1" >/dev/null 2>&1
}

C_package_exists() {
	pacman -Si "$1" >/dev/null 2>&1
}

C_move_packages_from_pip() {
	install_it() {
		pacman -S --noconfirm python-"$1"
	}

	version=3
	echo "version=pip$version"

	pip$version list |
	while read -r p _; do
		n="python$version-$p"
		if ! C_is_installed "$n" && C_package_exists "$n"; then
			echo "$p"
			echo "$p will be moved" >&2
		else
			echo "$p is fine" >&2
		fi
	done |
	paste -sd' ' |
	while IFS= read -r l; do
		echo "sudo pip uninstall -y $l"
		l=$(<<<"$l" tr ' ' '\n' | xargs -I{} echo python-{} | paste -sd' ')
		echo "sudo pacman -S --noconfirm $l"
	done
}

C_vimdiff_pacnew() {
	if (($# != 0)); then
		cat <<EOF
Usage: vimdiff_pacnew

For each *.pacnew and *.pacsave file
run vimdiff and then asks two questions.

Written by Kamil Cukrowski
EOF
		exit 1
	fi

	if [[ "$UID" != 0 ]]; then
		echo "Running with sudo..."
		echo "+" "sudo" "$0" vimdiff_pacnew "$@"
		echo
		exec sudo "$0" vimdiff_pacnew "$@"
	fi

	findthem() {
		grep -aEo "[^ ]*\.$1" /var/log/pacman.log |
		sort -u |
		while IFS= read -r line; do
			if [[ -e "$line" ]]; then
				printf "%s\n" "$line"
			fi
		done
	}

	tmp=$(findthem pacnew) ||:
	readarray -t pacnew < <(printf "%s" "$tmp")
	tmp=$(findthem pacsave) ||:
	readarray -t pacsave < <(printf "%s" "$tmp")

	printf "%2d .pacnew files found.\n" "${#pacnew[@]}"
	printf "%2d .pacsave files found.\n" "${#pacsave[@]}"
	echo

	was_pacsave=false
	for i in "${pacnew[@]}" "${pacsave[@]}"; do
		if [[ "$i" =~ \.pacsave$ ]] && ! "$was_pacsave"; then
			was_pacsave=true
			echo "Success! There are no *.pacnew files on the system!!!"
			while true; do
				read -r -p "Do you want to continue with *.pacsave files? [yes/no] " ans; echo
				case "$ans" in 
				yes) break; ;;
				no) exit; ;;
				*) echo "Please answer exactly 'yes' or 'no'."; echo; ;;
				esac
			done
		fi
		now="${i%.pac*}"
		new="$i"
		if ! cmp -s "$now" "$new"; then
			cmd=( vimdiff "$now" "$new" )
			echo "+" "${cmd[@]}"
			sleep 1
			"${cmd[@]}"
			read -r -n 1 -p "Edit was successfull? [y/n] " ans; echo
			case "$ans" in [yYtT]) ;; *) exit; ;; esac
		else
			echo "Files $now and $new are the same..."
		fi
		read -r -n 1 -p "Remove $i? [y/n] " ans; echo
		case "$ans" in [yYtT]) rm -I -v "$i";; esac
		echo
	done
}

C_list_installed_packages_by_date_filter() {
	sed 's/.*/[ALPM] installed & /' |
	grep -Ff - /var/log/pacman.log |
	sed 's/\[ALPM\] installed //; s/ *(.*)$//; s/\[\([^ ]*\) \([^ ]*\)\]/\[\1T\2:00+0000\]/' |
	sort -k1,1r |
	sort -u -k2,2 |
	sort -k1,1
}

C_list_installed_packages_by_date() {
	pacman -Qq | C_list_installed_packages_by_date_filter
}

C_list_explicitly_installed_packages_by_date() {
	pacman -Qe | awk '{print $1}' | C_list_installed_packages_by_date_filter
}

C_list_explicitly_installed_packages_by_date_merge() {
	C_list_explicitly_installed_packages_by_date |
	awk 'a[$1]=a[$1](length(a[$1])?" ":"")$2
		END{for (i in a) print i " " a[i]}' |
	sort -k1,1
}

C_list_packages_by_size()  { 
	pacman -Qi |
		awk -F: '/^Name *:/{n=$2} /^Installed Size *:/{print n, $2}' |
		awk '{print $2 gensub("B$", "", "g", $3), $1, $2 $3 }' |
		numfmt --field 1 --from=auto |
		sort -k1n
}

C_list_packages_from_aur() {
	pacman -Qqem
}

C_list_installed_optional_dependencies() {
	comm -13 <(pacman -Qqdt | sort) <(pacman -Qqdtt | sort)
}

C_list_installed_packages() {
	pacman -Qqe
}

C_find_files_not_owned_by_any_packages() {
	find /etc /usr /opt /var |
		LC_ALL=C pacman -Qqo - 2>&1 >/dev/null |
		cut -d ' ' -f 5-
}

pkgstoredir="$HOME"/.cache/pacman_packages

C_packages_store() {
	mkdir -p "$pkgstoredir"
	now=$(date +%Y-%m-%dT%H:%M:%S)
	savefile="$pkgstoredir/pkglist-$now.txt"
	echo "+ pacman -Qq > $savefile"
	pacman -Qq > "$savefile"
}

C_packages_restore() {
	if test -z "$1"; then
		echo "Ta komenda robi to:"
		# shellcheck disable=2016
		echo 'pacman -Rsu $(comm -23 <(pacman -Qq|sort) <(sort $1))'
		echo ' lista pakietów została zapisana w katalogu /root/pkglist-datacostam.txt'
	else
		if [[ ! -r "$1" && -r "$pkgstoredir/$1" ]]; then
			set -- "$pkgstoredir/$1"
		fi
		if [[ ! -r "$1" ]]; then
			echo "File $1 doesn't exists" >&2
			return 2
		fi
		pacman -Rsu "$(comm -23 <(pacman -Qq | sort) <(sort "$1"))"
	fi
}

C_packages_list() {
	find "$pkgstoredir" -maxdepth 1 -mindepth 1 -type f -printf "%f\n"
}

_pacman_packages_restore_complete() {
	# https://stackoverflow.com/questions/2805412/bash-completion-for-maven-escapes-colon/12495727#12495727
	COMPREPLY=()
	if ((COMP_CWORD != 1)); then return; fi
	local cur
	_get_comp_words_by_ref -n : cur
	if [[ -d "$HOME"/.cache/pacman_packages ]]; then
		# shellcheck disable=2207
		COMPREPLY=($(compgen -W "$(C_packages_list)" -- "$cur"))
	fi
	__ltrim_colon_completions "$cur"
}

# complete -o default -F _pacman_packages_restore_complete pacman_packages_restore

C_autoremove() {
	local tmp
	while tmp=$(pacman --query --deps --unrequired --quiet) && [[ -n "$tmp" ]]; do
		# shellcheck disable=2086
		C_p --noconfirm -R $tmp
	done
}

_archlinux_pacman() {
	local tmp sudo envs i IFS
	envs=""
	sudo=( sudo )
	for i in \
		no_proxy http_proxy https_proxy ftp_proxy rsync_proxy HTTP_PROXY HTTPS_PROXY FTP_PROXY RSYNC_PROXY
	do
		if [[ -n "${!i:-}" ]]; then
			envs="${envs:---preserve-env=}${envs:+,}$i"
		fi
	done
	# shellcheck disable=2206
	sudo+=( $envs )
	if hash yay 2>/dev/null; then
		shopt -s nullglob
		if
			((UID == 0)) &&
			id kamil 2>/dev/null >&2 &&
			grep -q 'kamil.*NOPASSWD' /etc/sudoers.d/* /etc/sudoers
		then
			tmp=("${sudo[@]}" -u kamil yay)
		else
			tmp=(yay)
		fi
	elif ((UID != 0)); then
		tmp=("${sudo[@]}" pacman)
	else
		tmp=(pacman)
	fi
	if [[ " $* " =~ ' '-[a-z]*S ]]; then
		tmp+=(--needed)
	fi
	echo "+ ${tmp[*]} $*" >&2
	ret=0
	nice ionice -c 3 "${tmp[@]}" "$@" || ret=$?
	if ((ret == 0)) && [[ " $* " =~ " -R " ]]; then
		C_autoremove
	fi
	L_trap_err_disable
	return "$ret"
}

C_p() { _archlinux_pacman "$@"; }

C_pn() { C_p --noconfirm "$@"; }

C_pupdate() {
	local tmp &&
	tmp=$(pacman -Q | cut -d' ' -f1 | grep '[^ ]*-keyring') &&
	if [[ -n "$tmp" ]]; then
		# shellcheck disable=2086
		C_p --noconfirm -Sy --needed $tmp;
	fi &&
	C_p --noconfirm -Su --needed "$@" &&
	C_autoremove
}

C_pacmann() { pacman --noconfirm "$@"; }

C_yayn() { yay --noconfirm "$@"; }

C_get_package_dependencies() {
	LC_ALL=C pacman -Si "$1" |
		sed -n '/Depends\ On/,/:/p' |
		cut -d: -f2 |
		tr ' ' '\n' |
		sed 's/[>=<].*//' |
		sed '/^$/d' |
		paste -sd' '
}

C_unofficial_user_repositories() {
	# curl https://wiki.archlinux.org/title/Unofficial_user_repositories |
	cat /tmp/1 |
		#xmllint --format --html - 2>/dev/null |
		sed '
			s/<[^>]*>//g
			s/&lt;/</g
			s/&gt;/>/g
			s/&amp;/\&/g
		' |
		awk '
	BEGIN {
		outlen = 0
		out[outlen++] = "Description"
		out[outlen++] = "Key-ID"
		out[outlen++] = "Keyring"
		out[outlen++] = "Mirrorlist"
		out[outlen++] = "Upstream page"
	}
	#{ print }
	/^$/{ next }
	!/^$/{ prev = curr ; curr = $0 }
	{ a[NR] = $0 }
	/^(Un|S)igned$/{ type = $1 ; print "### " type ; next }
	!type{ next }
	func get(rgx) {
		if ($0 ~ "^" rgx "s?:" && NF > 1) {
			v[rgx] = $2
			for (i = 3; i <= NF; ++i) {
				v[rgx] = v[rgx] " " $i
			}
			next
		}
	}
	{
		km = "Maintainer"
		if ($0 ~ "^" m ":") {
			v["name"] = prev
		}
		for (i in out) {
			get(out[i])
		}
	}
	/^\[[a-z0-9_A-Z-]*\]$/{
		server = $0
		while (1) {
			getline
			if (/^Server =/ || /^Include = / || /^\[.*\]$/ || /^#/) {
				server = server "@" $0
				continue
			}
			if (/^$/) {
				continue
			}
			v["server"] = server
			prev = $0
			break
		}
		if (0) {
			printf "%s|", type
			for (i in v) printf "%s=%s|", i, v[i]
			printf "\n"
		}


		for (i = 0; i < outlen; ++i) {
			if (out[i] in v) {
				print "# " out[i] ": " v[out[i]]
			}
		}
		print gensub(/@/, "\n", "g", v["server"])
		print ""

		delete v
	}
	' |
	#head -n "$(tput lines)" |
	cat || :
}

. ,lib_lib C_ "$@"

