#!/bin/bash
set -euo pipefail
# Written by Kamil Cukrowski 14.cze.2021
# SPDX-License-Identifier: MIT + Beerware
# Licensed jointly under MIT License and Beerware License

fallback=0
if
	# If any options are passed, fallback to ls.
	{ (($# >= 1)) && [[ "${1:0:1}" == "-" ]] ;} ||
	# If awk is not GNU
	! hash awk 2>/dev/null >/dev/null ||
	! tmp=$(awk --version 2>&1) ||
	[[ "$tmp" != *"GNU"* ]]
then
	fallback=1
fi

if ((fallback)); then
	# In such case we do not have our requirements met, we fall back to the good old ls version
	exec ls -alFh --color=auto --group-directories-first "$@"
fi

# We are meant to be run in an interactive session - speed up find if possible.
if [[ -t 1 ]]; then
	if hash ionice; then
		ionice -c 1 -P $$ ||
		ionice -c 2 -n 0 -P $$ ||
		:
	fi 2>/dev/null >&2
fi

fatal() {
	echo "l: error: $*" >&2
	exit 1
}

_ls=(
	ls -aldFhU --color=auto --group-directories-first
)

findargs=(
	-mindepth 1 -maxdepth 1 '('
	'(' -name '.*' '('
			        '(' -type d -printf "A"
			')' -o  '(' -type l -printf "B"
			')' -o  '(' -type p -printf "C"
			')' -o  '(' -type s -printf "D"
			')' -o  '(' -type b -printf "E"
			')' -o  '(' -type c -printf "F"
			')' -o  '(' -type f -printf "G"
			')' -o              -printf "H"
	')' ')' -o      '(' -type d -printf "a"
			')' -o  '(' -type l -printf "b"
			')' -o  '(' -type p -printf "c"
			')' -o  '(' -type s -printf "d"
			')' -o  '(' -type b -printf "e"
			')' -o  '(' -type c -printf "f"
			')' -o  '(' -type f -printf "g"
			')' -o              -printf "h"
	')' -printf "%P\0"
)

dodirlist() {
	if ! cd "$1"; then
		fatal "could not open directory: $1"
	fi
	if ! find . "${findargs[@]}" | awk '
		BEGIN {
			RS = "\0"
			ORS = "\0"
			#	lower["a"]; lower["b"]; lower["c"]; lower["d"]; lower["e"]; lower["f"]; lower["g"];
			#	upper["A"]; upper["B"]; upper["C"]; upper["D"]; upper["E"]; upper["F"]; upper["G"];
		}

		{
			lines[NR] = $0
			type = substr($0, 1, 1)
		}

		# type in upper { hidden += type }
		type == "a" || type == "A" { dirs++;   next }
		type == "g" || type == "G" { files++;  next }
		# type == "b" || type == "B" { links++   }
		# type == "c" || type == "C" { pipes++   }
		# type == "d" || type == "D" { sockets++ }
		# type == "e" || type == "E" { blocks++  }
		# type == "f" || type == "F" { chars++   }
		{ other++ }

		END {
			fmt = "total %d directories, %d files, %d other\n"
			if (ENVIRON["LANGUAGE"] == "pl") {
				fmt = "razem %d katalogów, %d plików, %d innych\n"
			}

			# Print "total ..." summary line:
			printf(fmt, dirs, files, other) > "/dev/fd/3"

			# Output lines for ls
			print(".")
			print("..")
			n = asort(lines)
			for (i = 1; i <= n; ++i) {
				print(substr(lines[i], 2))
			}
		}
		' | xargs -0 -r "${_ls[@]}"
	then
		fatal "ls failed"
	fi
	if ! cd - >/dev/null; then
		fatal "could not change directory back from: $1"
	fi
}

call_ls() {
	if ! "${_ls[@]}" "$@"; then
		fatal "ls failed"
	fi
}

# Main ##############################################################################

# Preserve stdout for awk script.
exec 3>&1

if (($# == 0)); then
	set -- .
fi
if (($# == 1)); then
	if [[ -d "$1" ]]; then
		dodirlist "$1"
	else
		call_ls "$1"
	fi
	exit
fi

files=()
dirs=()
while (($#)); do
	if [[ -d "$1" ]]; then
		dirs+=("$1")
	else
		files+=("$1")
	fi
	shift
done
prev=0
if ((${#files[@]})); then
	call_ls "${files[@]}"
	prev=1
fi
if ((${#dirs[@]})); then
	readarray -d '' -t dirs < <(printf '%s\0' "${dirs[@]}" | sort -z)
	for i in "${dirs[@]}"; do
		if ((prev++)); then echo; fi
		printf "%q:\n" "$i"
		dodirlist "$i"
	done
fi

