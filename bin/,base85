#!/usr/bin/env python3

import base64
import sys
import argparse
import textwrap

def eprint(*args, **kwargs):
    None
    #print(*args, file=sys.stderr, **kwargs)

def check_positive(value):
    ivalue = int(value)
    if ivalue < 0:
        raise argparse.ArgumentTypeError("%s is an invalid non-negative int value" % value)
    return ivalue

parser = argparse.ArgumentParser(description=
        'Base85 encode or decode FILE, or standard input, to standard output. '
        'With no FILE, or when FILE is -, read standard input.'
)
parser.add_argument('-d', '--decode', action='store_true', help='decode data')
parser.add_argument('-w', '--wrap', metavar='COLS', type=check_positive, default=76,
                    help='wrap encoded lines after COLS character (default 76).\nUse 0 to disable line wrapping')
parser.add_argument('files', metavar='FILE', type=argparse.FileType('rb', 0,  encoding=None, errors=None),
                    default=[sys.stdin], nargs='*',
                    help='an integer for the accumulator')
args = parser.parse_args()
eprint(args)
for c in args.files:
    c = c.read()
    c = str.encode(c)
    eprint("input=", c)
    if (args.decode):
        c = (c.
                replace(b' ', b'').
                replace(b'\t', b'').
                replace(b'\n', b'').
                replace(b'\r', b'').
                replace(b'\v', b''))
        eprint("c=", c)
        o = base64.b85decode(c)
        eprint("o=", o)
        o = o.decode('utf-8')
        print(o)
    else:
        o = base64.b85encode(c)
        o = o.decode('utf-8')
        if (args.wrap):
            for i in textwrap.wrap(o, width=args.wrap):
                print(i)
        else:
            print(o)





