#!/bin/bash
set -euo pipefail

. ,lib_lib -l

_unused_ssh_expect_old()
{
    expect -f <(cat <<'EOF'
# https://askubuntu.com/questions/93848/ssh-shell-launched-using-expect-doesnt-have-full-width-how-can-i-make-fix-it
# trap sigwinch and pass it to the child we spawned
trap {
	set rows [stty rows]
	set cols [stty columns]
	stty rows $rows columns $cols < $spawn_out(slave,name)
} WINCH

set cmd [lindex $argv 0]
set passfile [lindex $argv 1]
set args [lrange $argv 2 end]
spawn {*}$args
expect {
	-re "The authenticity of .* can't be established." {
		send "yes\r"
		exp_continue
	}
	-re ".*assword:" {
		set pass [read [open $passfile]]
		send -- $pass
		send -- "\r"
		exp_continue
	}
	# "Last login:" { exp_continue; }
	"$" {}
	"#" {}
}

expect -re $
send -- "set +o history ; echo 04a74a83-e6f1-4f2f-a7a5-6971ab8e0b8e\r"
send -- "history -d \$((\$HISTCMD))\r"
expect "04a74a83-e6f1-4f2f-a7a5-6971ab8e0b8e\r"
send -- $cmd
send -- "echo a18357ab\"\"-d888-45e0-9f86-230a933659f1 ; set -o history \r"
expect "a18357ab-d888-45e0-9f86-230a933659f1\r"

interact
return
# interact
# expect eof
EOF
	) "$@"
}

_unused_sshload_callback_load_configuration_old() {
	set +e ; trap '' ERR
	ssh_expect "$CMD"$'\n' "$g_passfile" stdbuf -o0 ssh -tt "$@" > >(
		if L_lmask_isblocked "L_LOG_DEBUG"; then
			output=1
			while IFS= read -r l; do
				case "$l" in
				(*"04a74a83-e6f1-4f2f-a7a5-6971ab8e0b8e"*) output=0; ;;
				(*"echo a18357ab-d888-45e0-9f86-230a933659f1"*) output=0; ;;
				(*"a18357ab-d888-45e0-9f86-230a933659f1"*) break; ;;
				esac
				if ((output)); then
					printf "%s\n" "$l"
				fi
			done
		fi
		exec stdbuf -o0 cat
	)
}

bash_interactive_login_shell_startup() {
	cat <<'EOF'
if [[ -r /etc/profile ]];then . /etc/profile;fi
if [[ -r ~/.bash_profile ]];then . ~/.bash_profile
elif [[ -r ~/.bash_login ]];then . ~/.bash_login
elif [[ -r  ~/.profile ]];then . ~/.profile;fi
EOF
	# for interactive non-login shell:
	# if [[ -r ~/.bashrc ]]; then . ~/.bashrc; fi'
}

runssh() {
	set +e ; trap '' ERR
	local ssh
	if [[ -n "$g_passfile" ]]; then
		ssh=(sshpass -f "$g_passfile" ssh)
	else
		ssh=(ssh)
	fi
	L_run_log L_LOG_DEBUG "${ssh[@]}" "$@"
}

sshload_run_bash() {
	cmd=$(printf "%q" "$CMD")
	cmd2="bash --rcfile <(printf %s $cmd) -i"
	cmd2=$(printf %q "$cmd2")
	cmd3="exec bash -lc $cmd2"
	runssh -tt "$@" "$cmd3"
}

sshload_run_bashgzip() {
	cmdgzipxxd=$(gzip <<<"$CMD" | xxd -p | paste -sd '')
	# shellcheck disable=SC2016
	L_assert '[[ "$cmdgzipxxd" =~ ^[A-Za-f0-9]+$ ]]' "Output from xxd -p is not only hex characters"
	#
	cmd="printf %s $(printf "%q" "$cmd")"
	cmdgzipxxd="xxd -r -p <<<$cmdgzipxxd|gzip -d"
	#
	fq() { printf %q "bash --rcfile <($1) -i"; }
	cmd=$(fq "$cmd")
	cmdgzipxxd=$(fq "$cmdgzipxxd")
	cmdlen=${#cmd}
	cmdgzipxxdlen=${#cmdgzipxxd}
	#
	usegzip=$(( cmdlen > cmdgzipxxdlen ))
	L_debug "cmdlen=$cmdlen cmdgzipxxdlen=$cmdgzipxxdlen usegzip=$usegzip"
	if ((usegzip)); then
		cmd="$cmdgzipxxd"
	fi
	#
	cmd="exec bash -c $cmd"
	runssh -tt "$@" "$cmd"
}

sshload_run_mktemp() {
	cmd=$(printf "%q" "$CMD")
	cmd2="tmpf=\$(mktemp) && trap 'rm \"\$tmpf\"' EXIT && cat <<<$cmd > \"\$tmpf\" && sh --rcfile \"\$tmpf\" -i"
	runssh -tt "$@" "$cmd3"
}

sshload_run_catmktemp() {
	sshscript=$(cat <<-'EOF'
		tmpf=$(mktemp) &&
		trap 'rm "$tmpf"' EXIT &&
		while IFS= read -r l; do if [[ "$l" == 28126bce-5949-47e9-b37a-6b0c72d97c62 ]]; then break; fi; printf "%s\n" "$l"; done > "$tmpf" &&
		bash --rcfile "$tmpf" -i
		EOF
	)
	{
		cat <<<"$CMD"
		printf "%s\n" 28126bce-5949-47e9-b37a-6b0c72d97c62
		exec cat
	} |
	runssh -tt "$@" "$sshscript"
}

sshload_callback_load_configuration() {
	if ((!SSHLOAD_INTERACTIVE)); then
		runssh "$@"
		return "$?"
	fi
	cmd=$(bash_interactive_login_shell_startup)
	if [[ -z "$g_sshload_sh" && -x ~/.config/sshload.sh ]]; then
		g_sshload_sh=~/.config/sshload.sh
	fi
	if [[ -n "$g_sshload_sh" ]]; then
		if ! tmp=$(
			L_dryrun=0
			L_run_log L_LOG_DEBUG "$g_sshload_sh" "$@"
		); then
			L_fatal "Running script failed: $g_sshload_sh"
		fi
		cmd+=$'\n'"$tmp"
	fi
	if ! bash -O extglob -n <<<"$cmd"; then
		L_fatal "Syntax of config file output failed"
	fi
	L_debug "$(declare -p g_sshload_sh cmd g_passfile)"
	CMD="$cmd"
	sshload_run_bashgzip "$@"
}

usage() {
	cat <<EOF
Usage: $L_NAME [all_ssh_options] [long_options] destination [command]

Long options:
	--b --callback <callback>
	--c --interactiveconfig <config>
	--f --passfile <file>
	--v --verbose
	--q --quiet
	--n --dry-run
	--h --help

Written by Kamil Cukrowski 2021
EOF
}

# main ##############################################################################

ssh_usage=$( { ssh 2>&1 || :; } )
L_assert '[[ -n "$ssh_usage" ]]' "Internal error when getting ssh usage - it's empty"
ssh_opts1=$(
	<<<"$ssh_usage" \
	sed 's/\s*\[\([^][]*\)\] */\n\1\n/g' |
	sed '/^-/!d' |
	sed '/-.[^ ]/{ s/-//; }; s/-\(.\) .*/\1:/'
)
L_assert '[[ -n "$ssh_opts1" ]]' "Internal error when getting ssh options string"
ssh_getopts=$(<<<"$ssh_opts1" paste -sd '')
ssh_opts_noarg=$(<<<"$ssh_opts1" sed '/:/d' | paste -sd '')
ssh_opts_arg=$(<<<"$ssh_opts1" sed '/:/!d; s/://g' | paste -sd '')
g_args=$(getopt -n "$L_NAME" -o "+$ssh_getopts" \
	-l b:,callback:,c:,interactiveconfig:,f:,passfile:,v,verbose,q,quiet,n,dry-run,h,help \
	-- "$@") || return 1
eval "set -- $g_args"
ssh_args=()
g_callback=sshload_callback_load_configuration
g_sshload_sh=""
g_passfile=""
while (($#)); do
	case "$1" in
	(-[$ssh_opts_noarg]) ssh_args+=("$1"); ;;
	(-[$ssh_opts_arg]) ssh_args+=("$1" "$2"); shift; ;;
	(--b|--callback) g_callback="$2"; shift; ;;
	(--c|--interactiveconfig) g_sshload_sh="$2"; shift; ;;
	(--f|--passfile) g_passfile="$2"; shift; ;;
	(--v|--verbose) L_lmask_allow "L_LOG_DEBUG"; ;;
	(--q|--quiet) L_lmask_block "$L_LOG_INFO"; ;;
	(--n|--dry-run) L_dryrun=1; ;;
	(--h|--help) usage; exit 0; ;;
	(--) shift; break; ;;
	(*) L_fatal "Failed to parse argument: $1"; ;;
	esac
	shift
done
if (($# == 0)); then usage; L_fatal "Not enough arguments"; fi

SSHLOAD_INTERACTIVE=0
if (($# == 1)) && [[ -t 0 ]]; then
	SSHLOAD_INTERACTIVE=1
fi
export SSHLOAD_INTERACTIVE
export SSHLOAD_SHELL=bash
export SSHLOAD_DESTINATION=$1
if tmp=$(ssh -G "$SSHLOAD_DESTINATION" 2>/dev/null ||:) && [[ -n "$tmp" ]]; then
	SSHLOAD_USER="$(sed -n 's/^user *//p' <<<"$tmp")"
	SSHLOAD_HOSTNAME="$(sed -n 's/^hostname *//p' <<<"$tmp")"
	export SSHLOAD_USER SSHLOAD_HOSTNAME
fi
"$g_callback" "${ssh_args[@]}" -- "$@"


