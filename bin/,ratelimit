#!/usr/bin/env python3

import argparse
import os
import select
import sys
import time
import signal

argp = argparse.ArgumentParser(
    description="Rate limit lines coming from the input and delimeter them",
    epilog="""
Examples:
 cat /dev/urandom | $name -t 5

Written by Kamil Cukrowski (C) 2019
Licensed under GPL-3.0
""",
)
argp.add_argument(
    "-t",
    "--timeout",
    type=float,
    help="Output the buffer once timeout is reached. In seconds, may be a floating number. 0 disables it. Default 5",
    default=5,
)
argp.add_argument(
    "-l",
    "--lines",
    type=int,
    help="Output the buffer once the count of lines is reached. 0 disables the check. Default 5",
    default=5,
)
argp.add_argument(
    "-i",
    "--input-separator",
    type=str,
    help='Input separator, default Line Feed "\n"',
    default="\n",
)
argp.add_argument(
    "-o",
    "--output-separator",
    type=str,
    help='Output separator, default Start of Text "\x02"',
    default="\x02",
)
argp.add_argument(
    "-e",
    "--print-empty",
    action="store_true",
    help="If set, when timeout expired and no lines are in buffer, an output separator only is printed.",
)
argp.add_argument("--test", action="store_true")
arg = argp.parse_args()

signal.signal(signal.SIGINT, lambda sig, frame: sys.exit(0))

if arg.test:
    import subprocess
    subprocess.run(['bash', '-c', '''
        while true; do
            timeout=$((RANDOM%10?0:2)).$((RANDOM%10))
            echo "$(( ++i )) $timeout $RANDOM $RANDOM $RANDOM"
            sleep "$timeout"
        done |
        tee >(sed 's/^/    IN: /' > /dev/stderr)
        ( set -x ; $@ -o='--------\n' -l 3 -t 1 )
    ''', '--', __file__], check=1)
    os.exit()

def debug(*args):
    print('dbg:', *args)

giga = 1000000000
maxtimeoutns = arg.timeout * giga
input_separator = str.encode(arg.input_separator)
output_separator = str.encode(arg.output_separator)
finput = sys.stdin
prevpart = None
while True:
    chunk = b''
    linescnt = 0
    start = time.monotonic_ns()
    stop = start + maxtimeoutns

    while True:
        parts = []
        now = time.monotonic_ns()
        timeout = stop - now if stop > now else 0
        timeout /= giga
        r, w, e = select.select([finput], [], [], timeout)
        if finput not in r:
            debug('Reading timeouted')
            break
        parts = os.read(finput.fileno(), 4096).split(input_separator)
        debug('Read:', parts)
        # Was there something left from previous reading?
        if prevpart:
            parts[0] = prevpart + parts[0]
            prevpart = None
        # Did we read and end on a separator?
        if parts[-1] != "":
            # Remember partial element on next time
            prevpart = parts[-1]
            # And remove it from elements that we read
            parts.pop()
        chunk += output_separator.join(parts)
        if arg.lines != 0:
            linescnt = linescnt + 1
            if linescnt >= arg.lines:
                debug('Reached lines limit.')
                break

    if len(chunk) or arg.print_empty:
        sys.stdout.buffer.write(chunk)
        sys.stdout.buffer.write(output_separator)
        sys.stdout.buffer.flush()


"""
set -euo pipefail
export SHELLOPTS

name=ratelimit.sh

# Functions ###############################################

usage() {
	cat <<EOF
 $name [options]

Rate limit lines coming from the input and delimeter them.

Options:
 -t, --timeout=<number>            Output the buffer once timeout is reached. 
                                   In seconds, may be a floating number. 0 disables it. Default 5.
 -l, --lines=<number>              Output the buffer once the count of lines is reached. 
                                   0 disables the check. Default 5.
 -i, --input-separator=<char>      Input separator, default Line Feed "\n". Passed to read(1)
 -o, --output-separator=<string>   Output separator, default Start of Text "\x02". Passed to printf(1)
     --print-empty                 If set, when timeout expired and no lines are in buffer, 
                                   an output separator only is printed.
 -h, --help

EOF

	if (($#)); then
		echo "ERROR:" "$@" >&2
		exit 1
	fi
}

ns() {
	date +%s%N;
}

fatal() {
	echo "$name: Error" "$@" >&2
	exit 2
}

assert() {
	if ! eval "$1"; then
		local assertstr
		assertstr="$1"
		shift
		fatal "assertion '$assertstr' failed"
	fi
}

test() {
	i=0
	while true; do
		timeout=$((RANDOM%10?0:2)).$((RANDOM%10))
		sleep "$timeout"
		echo "$i $RANDOM $RANDOM $RANDOM $timeout"
		i=$((i+1))
	done | 
	tee >(sed 's/^/    IN: /' > /dev/stderr)
}

# Parse Arguments ##########################

if ! ARGS=$(getopt \
	--name "$name" \
	--options t:l:i:o:h \
	--longoptions timeout:,lines:,input-separator:,output-separator:,print-empty,help \
	-- "$@"
); then
	echo ERROR: getopt error >&2
	exit 1
fi
eval set -- "$ARGS"

maxtimeoutsec=5
maxlines=5
input_separator=$'\n'
output_separator=$'\x02'
print_empty=false

while (($#)); do
	case "$1" in
	-t|--timeout) maxtimeoutsec=$2; shift; ;;
	-l|--lines) maxlines=$2; shift; ;;
	-i|--input-separator) input_separator="$2"; shift; ;;
	-o|--output-separator) output_separator="$2"; shift; ;;
	--print-empty) print_empty=true; ;;
	-h|--help) usage; exit 0; ;;
	--) shift; break; ;;
	*) usage "Wrong argument: $1"; ;;
	esac
	shift
done

if (($#)); then
	if [ "$1" = "test" ]; then
		exec < <(test)
		output_separator="-------------"$'\n'
	else
		usage "Too many arguments"
	fi
fi

# Main ##########################

giga=1000000000
maxtimeoutns=$(<<<"scale=0; $maxtimeoutsec * $giga" bc)
maxtimeoutns=$(printf "%.0f" "$maxtimeoutns")

timeout_arg=()

while true; do
	chunk=""
	lines=0
	start=$(ns)
	stop=$((start + maxtimeoutns))

	while true; do

		if (( maxtimeoutns != 0 )); then
			now=$(ns)
			if (( now >= stop )); then
				break
			fi
			timeout=$(( stop - now ))
			timeout=$(<<<"scale=${#giga}; $timeout/$giga" bc)
			timeout_arg=(-t "$timeout")
		fi


		IFS= read -rd "$input_separator" "${timeout_arg[@]}" line && ret=$? || ret=$?
		assert "(( $ret == 0 || $ret > 128 ))" "read(1) failed"

		if (( ret == 0 )); then

			# read succeded
			chunk+=$line$'\n'

			if (( maxlines != 0 )); then
				lines=$((lines + 1))
				if (( lines >= maxlines )); then
					break
				fi
			fi

		elif (( ret > 128 )); then
			# read timeouted
			break;
		fi
	done

	if (( ${#chunk} != 0 )) || "$print_empty"; then
		printf "%s%s" "$chunk" "$output_separator"
	fi

done
"""
