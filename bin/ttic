#!/bin/bash
set -euo pipefail

name=$(basename "$0")

usage() {
	cat <<EOF
Usage: $name [-h|--help] [-u|--unique] [id]
Tic/toc timer pair
Stores the initial time (w/optional id marker) into temporary file.
Using optional ID is recommended, as it allows simulatenous usage.
The ttoc.sh displays delta time since ttic was called.
Temporary timer file is stored at /tmp/.ttic[.ID.].txt

Example
       # Global timer (not recommended)
       ttic && (do work) && ttoc
       # Using FooBar as id
       ttic FooBar && (do work) && ttoc FooBar
       # Using a randomly generated id
       id=\$(ttic -u) && (do work) && ttoc \$id

Original script:
       https://gist.github.com/swarminglogic/87adb0bd0850d76ba09f
       Roald Fernandez (github@swarminglogic.com)

Written by Kamil Cukrowski
SPDX-License-Identifier: GPL-3.0
EOF
}

while (($#)); do
    case "$1" in
        -h|--help)
            usage
	    exit 0
            ;;
        -u|--unique)
	    isGenerated=true

	    while :; do
	       # this command will return nonzero exit status
	       # as tr will report failure as it can't write no more
	       # ignore it
               id=$(tr -dc "[:alnum:]" < /dev/urandom | head -c 16) ||:
	       # for safety, check if the length of id has 16 bytes
               if (( ${#id} != 16 )); then
                   echo "ERROR: Generating random unqiue id failed!" >&2
		   exit 2
               fi
	       # if such file with this id exists, start again
	       if [ ! -e "/tmp/.ttic.$id.txt" ]; then
	           break;
               fi
	    done

	    shift
	    break
            ;;
        *)
            id=$1
            shift
            break
            ;;
    esac
done

if (($#)); then
	echo "ERROR: Too many arguments: " "$@" >&2
	exit 1
fi

# ${var:+123} expands to 123 if var is set and nonempty
tmpfile="/tmp/.ttic${id:+.$id}.txt"
date +%s%N > "$tmpfile"
if "${isGenerated:-false}"; then
   printf "%s\n" "$id"
fi

