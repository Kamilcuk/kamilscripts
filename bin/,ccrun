#!/bin/bash
# SPDX-License-Identifier: MIT+Beerware
set -euo pipefail

name=$(basename "$0")

usage() {
	cat <<EOF
Usage:
   $name [---options] [-cc_option] [cc_options...] <file
   $name [---options] file [cc_options...]
   $name -h

Compiles and runs a source file in one run.

If there are no arguments or the first argument starts with
a leading dash, input source file is expected to be passed
on standard input. All arguments are passed to the compiler.

If the first argument doesn't start with a leading dash,
the first argumnet is expected to be the source file to compile
from. All other arguments are passed to the compiler.

If this script is executed with exactly one argument '-h',
this script prints this text and exit.
Use $name --help to get compiler help.

Current compiler: $cc

Options:
   ---cc COMPILER  Set the C compiler
   ---n            Don't include defaults
   ---h            Print this help and exit

Written by Kamil Cukrowski
Licensed jointly under Beerware License and MIT Lisense
EOF
}

fatal() {
	echo "$name" "$*" >&2
	exit 2
}

######################################################

cc="${CC:-gcc -xc}${CC:+$CC $CFLAGS}"
includeall=true
while (($#)); do
	case "$1" in
	---cc) shift; cc="$1"; ;;
	---n) includeall=false; ;;
	---h|-h) usage; exit; ;;
	---*) fatal "Invalid command $1"; ;;
	*) break; ;;
	esac
	shift
done

# -c or -o are dissallowed options
if ! (
	while (($#)); do
		case "$1" in
		-c|-o) fatal "$1 option is not allowed"; ;;
		esac
		shift
	done
); then
	exit 2
fi

# if we have only dashes options and last option doesn't have dash
input="-"
if (($#)) && case "$1" in -*) false; esac; then
	input="$1"
	shift
fi

includeallfunc() {
	printf "#define %s\n"  \
		"_GNU_SOURCE  1" \
		"_POSIX_C_SOURCE  300000L" \
		"_POSIX_SOURCE  1" \
		"_XOPEN_SOURCE  1" \
		"_DEFAULT_SOURCE  1"
	printf "#include <%s>\n" \
		assert.h \
		complex.h \
		ctype.h \
		errno.h \
		fenv.h \
		float.h \
		inttypes.h \
		iso646.h \
		limits.h \
		locale.h \
		math.h \
		setjmp.h \
		signal.h \
		stdarg.h \
		stdbool.h \
		stddef.h \
		stdint.h \
		stdio.h \
		stdlib.h \
		stdnoreturn.h \
		string.h \
		tgmath.h \
		uchar.h \
		wchar.h \
		wctype.h
	echo
}

tmp=$(mktemp)
trap 'rm -f "$tmp"' EXIT
{
	{
		if "$includeall"; then
			includeallfunc
		fi
		cat "$input"
	} |
	$cc -o "$tmp" "$@" - 
} && "$tmp"



