#!/bin/bash
# SPDX-License-Identifier: MIT+Beerware
set -euo pipefail
shopt -s extglob

# General {{{

name=${BASH_SOURCE##*/}

usage() {
	cat <<EOF
Usage:
   $name [+opts] [++] [-ccopts...] file.c [-- [progargs...]]
   $name [+opts] [++] [-ccopts...] -- file.c [progargs...]
   $name [+opts] [++] [-ccopts...] 'C source code' [-- [progargs...]]
   $name [+opts] [++] [-ccopts...] [-- [progargs...]] < file
   $name -h

Compiles and runs a source file in one run.
The script takes it's own arguments with a leading '+' plus sign.

If the first argument doesn't start with a leading dash, the first argumnet is expected to be
a source file to compiler. All following arguments are passed to the compiler. In this mode
defaults are not passed.

If this script is executed with exactly one argument '-h', this script prints this text
and exits. The $name --help would result in compiler help printed.

Current compiler: $g_cc

"Default headers" are automatically included to the source code if it's detected.
The C11 standard and POSIX headers are automatically added to the souce code, if
it's not a file.

The +safe option adds many compiler warnings, default compiler flags recommended by redhat,
adds stack protection, sanitizer when available, etc.

\`int main(int argc, char *argv[])\` is also automatically added if detected it's missing.

Options:
   +cc  <compiler>     Set the C compiler.
   +cpp <compiler>     Use C++ instead of C.
   +n +nochange        Disable automatic adding of include headers and \`int main()\` body.
   +V +valgrind        Run executable via valgrind.
   +G +gdb             Run executable under gdb.
   +I +interactivegdb  Run executable in gdb, drop to interactive before running.
   +p +pure            Do not pass default options.
   +v +verbose         Print compile command and execution info.
   +d +debug           Display debugging information.
      +defaultsf <f>   This exported bash function should output #include statements.
   +unittest           Run unittests.
   +h -h +help         Print this help and exit.

Examples:
   echo 'int main() { printf("Hello world\n"); }' | $name
   $name 'printf("Hello world\n");'
   printf "%s\n" '#include <stdio.h>' 'int main() { printf("Hello world\n"); }' > file.c ; $name file.c -lm -O3
   $name +n -O 'printf("sqrtl(5)=%f\n", sqrtl(5))' -lm

Written by Kamil Cukrowski
Licensed jointly under Beerware License and MIT License.
EOF
}

parse_options() {
    g_lang=c
	g_cc="${CC:-gcc}${CC:+$CC $CFLAGS}" g_change=true g_defaultsfunc='' g_debug=false
	g_valgrind=false g_gdb=false g_interactivegdb=false g_defaultflags=true g_verbose=false g_optind=$#
	while (($#)); do
		case "$1" in
			+cc) shift; g_cc="$1"; ;;
			+cpp) g_lang="c++"; ;;
			+n|+nochange) g_change=false; ;;
			+V|+valgrind) g_valgrind=true; ;;
			+G|+gdb) g_gdb=true; ;;
			+I|+interactivegdb) g_interactivegdb=true; ;;
			+p|+pure) g_defaultflags=false; ;;
			+v|+verbose) g_verbose=true; ;;
			+d|+debug) g_debug=true; ;;
			+defaultsf) shift; g_defaultsfunc=$1; ;;
			+unittest) unittest; exit; ;;
			+h|-h|+help) usage; exit; ;;
			++) shift; break; ;;
			+*) fatal "Invalid command $1"; ;;
			*) break; ;;
		esac
		shift
	done
	g_optind=$((g_optind - $#))

	if "$g_valgrind" && "$g_gdb"; then
		fatal "Both valgrind and gdb are enabled. Can run only through one of them at a time."
	fi

	# -c or -o are dissallowed options
	local tmp
	if tmp=$(check_options '-c|-S|-E|-o' "$@"); then
		fatal "Option not allowed: $tmp"
	fi
}

check_options() {
	local check
	check=$1
	shift
	while (($#)); do
		if <<<"$1" grep -E -q -- "$check"; then
			echo "$1"; return 0
		fi
		shift
	done
	return 1
}

fatal() {
	echo "$name: $*" >&2
	exit 2
}

run() {
	echo "+ $*" >&2
	"$@"
}

# }}}
# Testing {{{

testit() {
	local desc=$1
	shift

	printf "TESTING: %d %s" "${BASH_LINENO[0]}" "$desc" >&2
	printf " %q" "$name" "$@" >&2
	echo >&2

	local tmp ret
	ret=0
	tmp=$(bash -x "$0" +d "$@" 2>"$errf") || ret=$?

	local errout
	errout=$(
	cat <<EOF
EXIT STATUS: $ret
STDOUT:
$tmp

STDERR:
$(cat "$errf")

EOF
	)

	if
		if [[ "$desc" == "!" ]]; then ((ret == 0)); else ((ret != 0)); fi
	then
		echo "$errout" >&2
		fatal "Compile command failed:" "$@"
	fi
	if [[ "$desc" != "!" ]] && ! cmp -s <(cat <<<"$tmp") <(echo HelloWorld); then 
		echo "$errout" >&2
		fatal "Program output invalid:" "$@"
	fi
}

unittest() (
	exec 0<&-

	local errf tmpf
	tmpf=/tmp/.ccrun.$$.unittest
	errf=/tmp/.ccrun.$$.errf
	trap 'rm -f "$tmpf" "$errf"' EXIT

	# hex encoded hello world
	local prog str mainprog fullprog
	str='48656c6c6f576f726c64'
	prog='printf("\x48\x65\x6c\x6c\x6f\x57\x6f\x72\x6c\x64\n");'
	mainprog="int main() { $prog }"
	fullprog="#include <stdio.h>"$'\n'"$mainprog"

	for i in "$prog" "$mainprog" "$fullprog"; do
		testit '' -Werror "$i"
		testit '' -Werror <<<"$i"
		testit '' -Werror <(echo "$i")
	done

	#testit '' -Werror -- <(echo "$fullprog")

	testit '' -Werror "$prog" -Wall
	testit '' -Werror -Wall "$prog"
	testit '' ++ -Wall "$prog" -Werror

	testit ! "$0" <(echo "int main() { printf(\"%d\", 1.0); }") -Wall -Werror
	testit ! "$0" "printf(\"%d\", 1.0);" -Wall -Werror
	testit '' +debug ++ -Wall -Werror 'int num; while (scanf("%2x", &num) == 1) putchar(num);' <<<"$str"

	src1='assert(argc == 2); assert(strcmp(argv[1], "'"$str"'") == 0);
		for (int n; sscanf(argv[1], "%2x", &n) == 1; argv[1] += 2) putchar(n);'
	testit '' ++ -Wall "$src1" -- "$str"
	testit '' ++ -Wall <<<"$src1" -- "$str"
	src2='volatile char s[] = "HelloWorld"; volatile long arr[4] = {0}; volatile long var = (long)s; (void)var; printf("%s\n", (char*)arr[-1]);'
	testit '' +p "$src2"
	testit '!' "$src2"

	echo "$prog" > "$tmpf"
	testit '!' -Werror "$tmpf"
	echo "$mainprog" > "$tmpf"
	testit '!' -Werror "$tmpf"
	echo "$fullprog" > "$tmpf"
	testit '' -Werror "$tmpf"
	#testit '' -Werror -- "$tmpf"

	local ret
	ret=0
	run ,ccrun 'return 5;' || ret=$?
	if ((ret != 5)); then fatal "Test of retuning failed: $ret"; fi
	run ,ccrun 'int main() { return 5; }' || ret=$?
	if ((ret != 5)); then fatal "Test of retuning failed: $ret"; fi
)

# }}}
# Defaults {{{

c_defaults_macros() { cat <<EOF
#define _GNU_SOURCE  1
#define _POSIX_C_SOURCE  300000L
#define _POSIX_SOURCE  1
#define _XOPEN_SOURCE  1
#define _DEFAULT_SOURCE  1
EOF
}

c_defaults_headers() { cat <<EOF
/* C */
#include <assert.h>
#include <complex.h>
#include <ctype.h>
#include <errno.h>
#include <fenv.h>
#include <float.h>
#include <inttypes.h>
#include <iso646.h>
#include <limits.h>
#include <locale.h>
#include <math.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdnoreturn.h>
#include <string.h>
#include <tgmath.h>
#include <uchar.h>
#include <wchar.h>
#include <wctype.h>
EOF
}

c_defaults_posix() { cat <<EOF
/* posix */
#include <aio.h>
#include <arpa/inet.h>
#include <assert.h>
#include <complex.h>
#include <cpio.h>
#include <ctype.h>
#include <dirent.h>
#include <dlfcn.h>
#include <errno.h>
#include <fcntl.h>
#include <fenv.h>
#include <float.h>
#include <fmtmsg.h>
#include <fnmatch.h>
#include <ftw.h>
#include <glob.h>
#include <grp.h>
#include <iconv.h>
#include <inttypes.h>
#include <iso646.h>
#include <langinfo.h>
#include <libgen.h>
#include <limits.h>
#include <locale.h>
#include <math.h>
#include <monetary.h>
#include <mqueue.h>
#include <net/if.h>
#include <netdb.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <nl_types.h>
#include <poll.h>
#include <pthread.h>
#include <pwd.h>
#include <regex.h>
#include <sched.h>
#include <search.h>
#include <semaphore.h>
#include <setjmp.h>
#include <signal.h>
#include <spawn.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/ipc.h>
#include <sys/mman.h>
#include <sys/msg.h>
#include <sys/resource.h>
#include <sys/select.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/statvfs.h>
#include <sys/time.h>
#include <sys/times.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/un.h>
#include <sys/utsname.h>
#include <sys/wait.h>
#include <syslog.h>
#include <tar.h>
#include <termios.h>
#include <tgmath.h>
#include <time.h>
#include <ulimit.h>
#include <unistd.h>
#include <utime.h>
#include <utmpx.h>
#include <wchar.h>
#include <wctype.h>
#include <wordexp.h>
EOF
}

c_defaults() {
	c_defaults_macros
	c_defaults_headers
	c_defaults_posix
}

# }}}
# Options detection {{{

declare -g GCC_VERSION

gcc_version() {
	if [[ -z "${GCC_VERSION:-}" ]]; then
        local tmp
        tmp=$(gcc --version)
        if ! [[ "$tmp" =~ ^gcc\ .*\ ([0-9]+\.[0-9]+).* ]]; then
            fatal "Getting gcc version failed"
        fi
        GCC_VERSION="${BASH_REMATCH[1]}"
    fi
}

gcc_version_gt() {
    gcc_version
    awkeval "$GCC_VERSION >= $*"
}

compiler_try_compile() { (
	local tmps tmpo
	tmps=$(mktemp --tmpdir tmp.try_autorun.XXXXXXXXXX.c)
	tmpo=$(mktemp --tmpdir tmp.try_autorun.XXXXXXXXXX.out)
	trap 'rm "$tmps" "$tmpo"' EXIT
	echo 'int main(){}' > "$tmps"
	LC_ALL=C gcc "$@" "$tmps" -o "$tmpo" </dev/null
); }

awkeval() {
	if (($# != 1)); then fatal "internal error: awkeval takes one argument"; fi
	awk 'BEGIN{exit(!('"$1"'))}' <&-
}

# shellcheck disable=2054
default_flags_add() {
	local flags
	flags=(
		-march=native

		-D_FORTIFY_SOURCE=2
		-D_GLIBCXX_ASSERTIONS

		-fasynchronous-unwind-tables
		-fexceptions
		-fpie -Wl,-pie
		-fstack-clash-protection
		-fstack-protector-all
		-fstack-protector-strong

		-ggdb3
		-grecord-gcc-switches
		-fcf-protection

		-O

		-Wall
		-Wextra
		-Wwrite-strings
		-Wno-unused-function
		-Wno-unused-parameter
		-Wno-unused-variable
    )
    if [[ "$g_lang" != 'c++' ]]; then
        flags+=( -Wno-implicit-function-declaration )
    fi
    flags+=(
		-Wl,-z,defs
		-Wl,-z,now
		-Wl,-z,relro
	)

	# Sanitize options are disabled when running via gdb or valgrind
	if ! "$g_valgrind" && ! "$g_gdb" && ! "$g_interactivegdb"; then
		local sanitize
		if gcc_version_gt 4.8; then
			sanitize+=(address)
		fi
		if gcc_version_gt 5; then
			sanitize+=(undefined)
		fi
		if gcc_version_gt 8; then
			sanitize+=(pointer-compare pointer-subtract)
		fi
		local tmp
		if ((${#sanitize[@]} != 0)); then
			local flag IFS=,
			flag="-fsanitize=${sanitize[*]}"
			if tmp=$(compiler_try_compile "$flag" 2>&1); then
				flags+=("$flag")
			fi
		fi
	fi

	# add to global array options
	g_ccargs=("${flags[@]}" "${g_ccargs[@]}")
}

# }}}
######################################################
# Main {{{

parse_options "$@"
shift "$g_optind"

s_source=""
s_sourceisfile=false
s_sourcefound=false
g_ccargs=(-ldl -lrt -pthread -lm)
# For each passe options...
while (($#)); do
	case "$1" in
	# `--` means end of options.
	--) break; ;;
	# if it starts with `-` - it must be a gcc option
	-*) g_ccargs+=("$1"); ;;
	# Anything else is a source file - concatenated with space.
	*)
		if "$s_sourcefound" && "$s_sourceisfile"; then
			fatal "Multiple file sources found when parsing: $1"
		fi
		if [[ -e "$1" ]]; then
			if [[ -p "$1" ]]; then
				s_source=$(cat "$1")
			else
				s_source="$1"
				s_sourceisfile=true
			fi
		else
			s_source="${s_source:+$s_source$'\n'}$1"
		fi
		s_sourcefound=true
		;;
	esac
	shift
done

progargs=()
if (($#)) && [[ "$1" == '--' ]]; then
	shift
	#if ! "$s_sourcefound"; then
	#	s_source=$1
	#	s_sourceisfile=true
	#	s_sourcefound=true
	#fi
	progargs=("$@")
	shift "$#"
fi

if (($# != 0)); then
	fatal "Internal options parser error"
fi

# When there's no source on command line, read stdin.
if ! "$s_sourcefound"; then
	s_source=$(cat)
fi

# Detect if additional includes and main function should be added.
g_addmain=false
g_adddefaults=false
if ! "$s_sourceisfile" && "$g_change"; then

	# If there are no includes...
	if ! <<<"$s_source" grep -z -q '#[[:blank:]]*include[[:blank:]]\+["<]'; then
		# then add defaults includes.
		g_adddefaults=true
		# If there's additionally no main function
		if ! <<<"$s_source" grep -z -q '[[:space:]]\+main[[:space:]]*(.*)[[:space:]]*{.*}'; then
			# Then add a main function.
			g_addmain=true
		fi
	fi
fi

if "$g_defaultflags"; then
	default_flags_add
fi

srctmpfile=/tmp/.ccrun.$$.source
exefile=/tmp/.ccrun.$$.exefile
trap 'rm -f "$srctmpfile" "$exefile"' EXIT
touch "$srctmpfile" "$exefile"

# Srctmpfile is the temporary file, but replace it with real filename
# if we can.
srcfile="$srctmpfile"

if "$s_sourceisfile" && ! "$g_adddefaults" && ! "$g_addmain"; then
	srcfile="$s_source"
else
	{
		if "${g_adddefaults:-true}"; then
			"${g_defaultsfunc:-c_defaults}"
		fi
		if "$g_addmain"; then
			echo 'int main(int argc, char *argv[]) {'
		fi
		if "$s_sourceisfile"; then
			cat "$s_source"
		else
			cat <<<"$s_source"
		fi
		if "$g_addmain"; then
			echo '}'
		fi
	} > "$srcfile"
fi

precmd=()
if "$g_valgrind"; then
	precmd=(valgrind -q --track-origins=yes --leak-check=full)
elif "$g_gdb"; then
	precmd=(gdb --batch
		-ex 'set disassembly-flavor intel'
		-ex 'set width 0' -ex 'set height 0'
		-ex 'set verbose off'
		-ex 'run' -ex 'bt' --args)
elif "$g_interactivegdb"; then
	exec 0</dev/tty
	precmd=(gdb -q -ex 'set disassembly-flavor intel' -ex 'b main' --args)
fi
cmd=("${precmd[@]}" "$exefile" "${progargs[@]}")

if "$g_debug" && ! "$s_sourceisfile"; then
	sed 's/^/>    /' "$srcfile" >&2
fi

if "${g_verbose:-false}"; then
	{
		printf "%s\n" "+ $g_cc ${g_ccargs[*]}"
		if "$s_sourceisfile"; then
			printf "%s\n" "$s_source"
		fi
		if ((${#precmd[@]})); then
			printf "%s\n" "&&" "${precmd[@]}"
		fi
	} | paste -sd' ' >&2
fi

if "$g_debug"; then
	printf "%s\n" "+ $g_cc ${g_ccargs[*]}" >&2
fi
$g_cc -x${g_lang} -o "$exefile" "$srcfile" "${g_ccargs[@]}" &&
(
	if "$g_debug"; then set -x; fi
	"${cmd[@]}"
)

# }}}
