#!/bin/bash

C_list_1() {
	C_list_2 "_what,_num,_name,_description"
}

C_list_2() {
	if (($# != 1)); then
		cat <<-EOF
	Usage:  $L_NAME $L_CMD <fields> [jsonoutput]

	Fields is a comma separated list of lowercase fields.
	A special value "ALL" makes printing all possible fields.
	A special value "JSON" makes printing all possible fields in json format.
	Fields:
	  _what         Section name.
	  _num          Number of that thing.
	  _name         Smart name, from name or from application.name
	  _description  Smart description, description or module.description 
	                or device.description.
	All other fields that are outputted by pactl list.

	Examples:
	  $L_NAME $L_CMD ALL
	  $L_NAME $L_CMD JSON
	  $L_NAME $L_CMD _what,_num,_name,_description,mute

	EOF
		return
	fi
	pactl list | awk \
		-v outputmode="$1" \
	'
		# props array stores all output globally with comma separated values

		function cur_clear( \
				i) {
			# stores all output
			for (i in cur) {
				delete cur[i]
			}
			# delete temporary variables
			i=""
			section=""
			subsection=""
			what=""
			num=""
			val=""
		}

		function jsonesc(input, \
				str) {
			str = input
			str = gensub(/([\\"])/, "\\\\\\1", "g", str) 
			return str
		}
		function remove_quotes(input, \
				str) {\
			str = input
			# Tab is the output separator - its not allowed.
			str = gensub(/\t/, "\\\\t", "g", str)
			# If there are quotes exactly in front and after it, remove them.
			if (str ~ "^\"[^\"]*\"$") {
				str = gensub(/"/, "", "g", str)
			}
			return str
		}


		BEGIN {
			OFS="\t"
		}

		# read the lines "something #<number>"
		/^[^ ]*.* #[0-9]*$/ {
			cur["_what"] = what = gensub(" *#.*", "", "1", $0);
			cur["_num"]  = num  = gensub(".*#",   "", "1", $0);
		}

		# all other lines start with a leading tab
		length(what) && /^\t[^\t]/ {
			# balance is special.. :(
			if (/^\t *balance/) {
				section = $1
				val = $2
			} else {
				section = gensub("^[\t ]*([^:]*)[ \t]*:.*$", "\\1", "1", tolower($0))
				section = gensub("^[\t ]*", "", "g", section)
				val = gensub("^\t[^:]*: *", "", "1", $0)
			}

			if (length(val) == 0) {
				subsection = section
			} else {
				val = remove_quotes(val)
				subsection = ""
				props[what, num, section] = val
				cur[section] = val
			}
		}

		# sometimes theres a subsection - handle that and put it in dot separated values into output
		length(what) && length(subsection) && /^\t\t[^ ]* = /{
			section = gensub(/^[\t ]*([^ ]*).*$/, "\\1", "g", $0)
			section = subsection "." section
			val = gensub(/^[^=]*= /, "", "g", $0)
			val = remove_quotes(val)
			props[what, num, section] = val
			cur[section] = val
		}

		# set custom fields
		length(what) {
			if (section == "name" || (length(cur["_name"]) == 0 && section ~ "\\.name$")) {
				cur["_name"] = cur[section]
			}
			if (section == "description" || (length(cur["_description"]) == 0 && section ~ "\\.description$")) {
				cur["_description"] = cur[section]
			}
		}


		function parse_section_argument(\
				l_i, l_q, l_nq, l_name, l_val) {
			l_i = cur[section]
			#
			while (length(l_i) != 0) {
				l_q  = "^([^=]*)=\"([^\"]*)\" *(.*)$"
				l_nq = "^([^=]*)=([^ ]*) *(.*)$"
				if (l_i ~ l_q) {
					l_name = gensub(l_q, "\\1", "1", l_i)
					l_val = gensub(l_q, "\\2", "1", l_i)
					l_i = gensub(l_q, "\\3", "1", l_i)
				} else if (l_i ~ l_nq) {
					l_name = gensub(l_nq, "\\1", "1", l_i)
					l_val = gensub(l_nq, "\\2", "1", l_i)
					l_i = gensub(l_nq, "\\3", "1", l_i)
				} else {
					break
				}
				cur["_"section"_"l_name] = l_val
			}
		}
		section == "argument" { parse_section_argument() }

		function parse_section_format(\
				l_i, l_name) {
			l_i = cur[section]
			#
			cur["_"section] = gensub(/^([^,]*),.*$/, "\\1", "1", l_i)
			gsub(/^[^,]*, */, "", l_i)
			#
			while (1) {
				l_name = gensub(/^([^ ]*).*/, "\\1", "1", l_i)
				gsub(/^[^=]*= *"?(\\")?/, "", l_i)
				if (length(l_name) == 0) break
				cur["_"l_name] = gensub(/^([^\\"]*).*/, "\\1", "1", l_i)
				gsub(/^[^ ]* */, "", l_i)
				# print "MARK", l_name" | "cur[l_name]" | "l_i
			}
			# print " "
		}
		section == "format" { parse_section_format() }
		
		function output( \
				c, i, val, once, scur) {
			if (outputmode == "JSON") {
				printf "{"
				once = 0
				for (i in cur) {
					printf "%s\"%s\": \"%s\"", once++?",":"", jsonesc(i), jsonesc(cur[i])
				}
				printf "}\n"
			} else if (outputmode == "ALL") {
				if (!_output_header) {
					_output_header = 1
					printf "%s\t%s\t%s\t%s\n", "what", "num", "field", "value"
				}
				asorti(cur, scur)
				i = length(scur)
				for (i = 1; i <= length(scur); ++i) {
					printf "%s\t%s\t%s\t%s\n", what, num, scur[i], cur[scur[i]]
				}
			} else if (outputmode) {
				if (!_output_header) {
					_output_header = 1
					print gensub(",", "\t", "g", outputmode)
				}
				split(outputmode, c, ",")
				for (i = 1; i <= length(c); ++i) {
					val = cur[c[i]]
					printf "%s%s", length(val) ? val : "-", i==length(c)?"":OFS
				}
				printf "\n"
			}
			cur_clear();
		}

		# empty lines ends the section
		/^$/{ output(); }
		END{
			output();
			if (0) for (i in props) {
				print i, props[i]
			}
		}
	'
}

C_filter_1() {
	if ((!$#)); then
		cat <<EOF
Usage: $L_NAME $L_CMD <what> <id> <name> <description>

Filter the pactl list output using glob expression on all fields.
Then output only id number. Empty glob expressions are interpreted
as a star * - match everything.

Example:

$L_NAME $L_CMD 'Sink' '' '' 'Built-in Audio Analog Stereo'

EOF
		return
	fi
	C_list_1 |
	while IFS=$'\t' read -r a b c d; do
		case "$a" in (${1:-*})
		case "$b" in (${2:-*})
		case "$c" in (${3:-*})
		case "$d" in (${4:-*})
			printf "%s\n" "$b"
		esac
		esac
		esac
		esac
	done
}

C_filter_2() {
	C_filter_1 "$1" '' "$2" "$3"
}

C_record() {
	if (($# == 0)); then
		L_fatal "Specify output file, for example: $L_NAME $L_CMD /tmp/file.mp3"
	fi
	if (($# > 1)); then 
		L_fatal "Too many arguments"
	fi
	L_log "+ parec | lame -r --quiet -q 3 --lowpass 17 --abr 192 - $1"
	parec | lame -r --quiet -q 3 --lowpass 17 --abr 192 - "$1"
}

C_hear_microphone() {
	if C_hear_microphone_isenabled; then
		C_hear_microphone_disable
	else
		C_hear_microphone_enable
	fi
}

C_hear_microphone_enable() {
	L_log "Enabling..."
	pactl load-module module-loopback latency_msec=1 >/dev/null
}

C_hear_microphone_isenabled() {
	pactl list | grep -q module-loopback
}

C_hear_microphone_disable() {
	L_log "Disabling..."
	pactl unload-module module-loopback
}

C_leonidas_event_deamon() {
	pactl subscribe |
	sed -u -r "s/Event '([^']*)' on ([^ ]*) #([0-9])/\1 \2 \3/" |
	while IFS=' ' read -r what where num; do
		case "$what $where" in
		"new source")
			tmp=$(C_list_1 | awk -F'\t' -v num="$num" '$2 == num && $4 == "IBH 2100-TI"')
			echo "$tmp"
			if [[ -n "$tmp" ]]; then
				L_run pactl set-default-source "$num"
			fi
			;;
		"new source-output")
			if false; then (
				sleep 2
				# Find the playstation eye sink number
				name=alsa_input.usb-OmniVision_Technologies__Inc._USB_Camera-B4.09.24.1-01.multichannel-input.echo-cancel
				sink=$(C_list_1 | awk -F'\t' -v name="$name" '$1 == "Source" && $3 == name"{print $2}')
				if [[ -n "$sink" ]]; then
					echo "$NAME: Sink with $name not found" >&2
					return
				fi
				# For each skype client in list
				,pulseaudio_lib list_2 JSON |
					jq -r 'select(._what == "Source Output") | select(has("properties.application.name")) | select(."properties.application.name" | test("Skype")) | ._num' |
					while read -r id; do
						# Move the skype client to the playstation eye sink
						( set -x; pactl move-source-output "$id" "$sink" ) 2> >(sed "s/^/$NAME: /" >&2) ||:
					done
			); fi
			;;
		esac
	done
}

. ,lib_lib 'C_' "$@"

