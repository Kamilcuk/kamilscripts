#!/usr/bin/env python3

import logging
import pathlib
import re
import sys
import threading
import time
from functools import lru_cache

import click

log = logging.getLogger(__name__)

GRAY = 90
YELLOW = 33
MAGENTA = 35
CYAN = 36
RED = 31
GREEN = 32
RESET = 0


def ansicolor(num):
    return "\033[" + str(num) + "m"


def stdout_is_tty():
    return sys.stdout.isatty()


def colorprint(num, *args, **kwargs):
    print(ansicolor(num), end="")
    print(*args, **kwargs, end="")
    print(ansicolor(0))


def params():
    return click.get_current_context().obj


@lru_cache(None)
def jj():
    import configparser

    from api4jenkins import Jenkins

    cfg = configparser.ConfigParser()
    configfile = params()["config"]
    log.debug("Reading config from %s", configfile)
    cfg.read(configfile)
    thiscfg = cfg["default"]
    return Jenkins(url=thiscfg["url"], auth=(thiscfg["user"], thiscfg["pass"]))


@click.group(
    help="""

Configfile format:
  [default]
  url=http://theurl:port
  user=theuser
  pass=thepassword

"""
)
@click.option(
    "-c",
    "--config",
    default=pathlib.Path.home() / ".config/,jenkins.ini",
    show_default=True,
)
@click.option(
    "-p",
    "--prefix",
    help="Add this prefix to automatically inferred project name",
    default="",
)
@click.option("-v", "--verbose", is_flag=True)
@click.pass_context
def cli(ctx, **kwargs):
    ctx.obj = kwargs
    logging.basicConfig(
        format="%(asctime)s %(name)s:%(lineno)d:%(funcName)s %(levelname)s %(message)s",
        level=logging.DEBUG if ctx.obj["verbose"] else logging.INFO,
        datefmt="%T",
    )


def in_list_jobs(job, prefix=""):
    print(prefix, job.name, job)
    if hasattr(job, "iter"):
        for what in job.iter():
            in_list_jobs(what, prefix + "  ")


@cli.command()
def list_jobs():
    for job in jj().iter_jobs():
        in_list_jobs(job)


def get_proj_from_location_in():
    import os
    import subprocess

    origin = subprocess.check_output(
        "git config --get remote.origin.url", shell=True
    ).decode("utf-8")
    projname = os.path.basename(origin)[::-1].split(".", 2)[1][::-1].strip()
    branch = subprocess.check_output(
        "git rev-parse --abbrev-ref HEAD", shell=True
    ).decode("utf-8")
    branchesc = branch.replace("/", "%2F").strip()
    return projname + "/" + branchesc


@cli.command()
def get_proj_from_location():
    click.echo(get_proj_from_location_in())


def getjob_in(jobname):
    if jobname is None:
        try:
            jobname = get_proj_from_location_in()
        except Exception:
            sys.exit("jobname argument is missing and cannot be guessed from git repo")
    else:
        pass
    jobname = params().get("prefix", "") + jobname
    log.info("Getting logs for job %s", jobname)
    job = jj().get_job(jobname)
    assert job is not None
    log.info("Found job: %s", job.name)
    return job


class Logprinter:
    excl = re.compile(r"^\[(Pipeline|GitCheckoutListener)\] ")
    linecolors = [
        (GRAY, re.compile("^[$+] ")),
        (CYAN, re.compile("^#[0-9]")),
    ]
    wordcolors = [
        (RED, re.compile(r"(\b(error|fatal|failure|fail)\w*\b)", re.I)),
        (YELLOW, re.compile(r"(\b(warn\w*)\b)", re.I)),
        (GREEN, re.compile(r"(\b(success\w*|OK)\b)", re.I)),
    ]

    def printline(self, line):
        if self.excl.search(line):
            return
        for cc, rgx in self.linecolors:
            if rgx.search(line):
                colorprint(cc, line)
                return
        for cc, rgx in self.wordcolors:
            newstr, nn = rgx.subn(ansicolor(cc) + r"\1" + ansicolor(0), line)
            if nn:
                print(newstr)
                return
        print(line)

    def print(self, build):
        for chunk in build.progressive_output():
            for line in chunk.splitlines():
                self.printline(line)


@cli.command()
@click.argument("jobname", required=False)
def getlogs(jobname):
    job = getjob_in(jobname)
    build = next(job.iter_builds())
    Logprinter().print(build)


@cli.command()
@click.argument("jobname", required=False)
def autogetlogs(jobname):
    job = getjob_in(jobname)
    build = next(job.iter_builds())
    while True:
        th = threading.Thread(target=lambda: Logprinter().print(build))
        th.daemon = True
        th.start()
        #
        log.info("Waiting for next build on %s", build)
        while True:
            nextbuild = build.get_next_build()
            if nextbuild is not None:
                break
            # log.debug("Waiting for next build on %s", build)
            time.sleep(2)
        build = nextbuild


if __name__ == "__main__":
    cli.main()
