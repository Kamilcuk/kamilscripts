#!/bin/bash
# SPDX-License-Identifier: MIT+Beerware
set -euo pipefail

name=$(basename "$0")

print_left_right() {
	local left right leftlen rightlen columns
	left=$1
	right=$2
	leftlen=${#left}
	rightlen=${#right}
	columns=$(tput cols)
	if ((rightlen > columns / 2)); then
		right=""
		rightlen=0
	fi
	if ((leftlen + rightlen > columns - 2)); then
		left="${left:0:columns - 5 - rightlen}..."
		leftlen=${#left}
	fi
	printf "%s%*s\n" "$left" "$((columns - leftlen))" "$right"
}

fatal() {
	echo "$name Error:" "$*" >&2
	exit 2
}

usage() {
	cat <<EOF
Usage: $name [options] file command [args...]

Each the file changes, $name runs the _command_ displaying its output.
It allows to execute a command on each file change.

Options:
  -t --no-title  Turn off showing the header and the following blank line.
  -b --beep      Beep if command has a non-zero exit.
  -x --exec      Pass command to exec instead of sh -c.
  -h --help      Print this help and exit.
  -R --ignore-resize   Do not re-run on terminal resize events.

Examples:
  $name src.c 'gcc src.c && ./a.out'
      Watch src.c file and compile and execute it every time it changes.

Written by Kamil Cukrowski 2020
Licensed jointly under Beerware and MIT License
EOF
}

# main ##############################################

args=$(getopt -n "$name" \
		-o +tbxhR \
		-l no-title,exec,help,ignore-resize,debug -- "$@")
eval set -- "$args"
use_exec=false
use_beep=false
use_title=true
use_winch=true
use_debug=false
while (($#)); do
	case "$1" in
	-t|--no-title) use_title=false; ;;
	-b|--beep) use_beep=true; ;;
	-x|--exec) use_exec=true; ;;
	-h|--help) usage; exit; ;;
	-R|--ignore-resize) use_winch=false; ;;
	--debug) use_debug=true; ;;
	--) shift; break; ;;
	*) fatal "Internal parsing options error"; ;;
	esac
	shift
done

if (($# == 0)); then
	usage
	fatal "Missing arguments"
fi
if (($# == 1)); then
	set "$1" "$1"
fi

file="$1"
shift

if [[ ! -e "$file" ]] || ! file=$(readlink -f "$file"); then
	fatal "file does not exists: $file"
fi

if [[ "$file" =~ $'\n' ]]; then
	fatal "Current version does not support newlines in filenames"
fi

# duplicate stdin for stty below to know where terminal is
exec 5<&0

{
	if "$use_winch"; then
		size_prev=$(stty size <&5)
		while sleep 0.1; do
			size=$(stty size <&5)
			if [[ "$size" != "$size_prev" ]]; then
				echo event
				size_prev=$size;
			fi
		done &
		child=$!
		trap 'kill "$child" >/dev/null; wait' EXIT
	fi
	# wathc the file
	stdbuf -oL inotifywait -q -m -e close_write,moved_to --format "%f" "$(dirname "$file")" |
	grep --line-buffered -x -F "$(basename "$file")"
} |
{ if "$use_debug"; then tee /dev/stderr; else cat; fi; } |
# rate limit the events - output 0x02 each event
stdbuf -oL ratelimit.sh -t 1 -l 0 -o '\x02\n' |
# rate limiting outputs \x02 each period - filter them out and just output something
stdbuf -oL sed -u '/\x02/!d; s/.*/event/' |
# initial start - make sure run at the start
{ echo nothing; stdbuf -oL cat; } |
while IFS= read -r _; do
	if [[ ! -e "$file" ]]; then
		fatal "File does not exists"
	fi
	if ! "$use_debug"; then
		clear
	fi
	if "$use_title"; then
		print_left_right "Every $file change: $*" "$HOSTNAME: $(date +'%a %b %d %T %Y')"
		echo
	fi
	if !
		if "$use_exec"; then
			"$@"
		else
			sh -c "$*"
		fi
	then
		if "$use_beep"; then
			echo -n '\007'
		fi
	fi
done



