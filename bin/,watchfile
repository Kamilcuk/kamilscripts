#!/bin/bash
# SPDX-License-Identifier: MIT+Beerware
set -euo pipefail

g_name=${BASH_SOURCE##*/}

print_left_right() {
	local left right leftlen rightlen columns
	left=$1
	right=$2
	leftlen=${#left}
	rightlen=${#right}
	columns=$(tput cols)
	if ((rightlen > columns / 2)); then
		right=""
		rightlen=0
	fi
	if ((leftlen + rightlen > columns - 2)); then
		left="${left:0:columns - 5 - rightlen}..."
		leftlen=${#left}
	fi
	printf "%s%*s\n" "$left" "$((columns - leftlen))" "$right"
}

fatal() {
	echo "$g_name Error:" "$*" >&2
	exit 2
}

usage() {
	cat <<EOF
Usage: $g_name [options] file command [args...]

Each the file changes, $g_name runs the _command_ displaying its output.
It allows to execute a command on each file change.

Options:
  -t --no-title  Turn off showing the header and the following blank line.
  -b --beep      Beep if command has a non-zero exit.
  -x --exec      Pass command to exec instead of sh -c.
  -h --help      Print this help and exit.
  -k --killonchange  Kill the current process if file changes.

Examples:
  $g_name src.c 'gcc src.c && ./a.out'
      Watch src.c file and compile and execute it every time it changes.

Written by Kamil Cukrowski 2020
Licensed jointly under Beerware and MIT License
EOF
}

# main ##############################################

args=$(getopt -n "$g_name" \
		-o +tbxhRk \
		-l no-title,exec,help,ignore-resize,killonchange,debug -- "$@")
eval set -- "$args"
use_exec=false
use_beep=false
use_title=true
use_debug=false
use_killonchange=false
while (($#)); do
	case "$1" in
	-t|--no-title) use_title=false; ;;
	-b|--beep) use_beep=true; ;;
	-x|--exec) use_exec=true; ;;
	-h|--help) usage; exit; ;;
	-k|--killonchange) use_killonchange=true; ;;
	--debug) use_debug=true; ;;
	--) shift; break; ;;
	*) fatal "Internal parsing options error"; ;;
	esac
	shift
done

if (($# == 0)); then
	usage
	fatal "Missing arguments"
fi
if (($# == 1)); then
	set "$1" "$1"
fi

g_file="$1"
shift

if [[ ! -e "$g_file" ]] || ! file=$(readlink -f "$g_file"); then
	fatal "file does not exists: $g_file"
fi

if [[ "$g_file" =~ $'\n' ]]; then
	fatal "Current version does not support newlines in filenames"
fi

filebase=${file##*/}

if ! "$use_exec"; then
	set -- sh -c "$*"
fi

inotifywait -q -m -e close_write,moved_to --format "%f" "$(dirname "$g_file")" |
{
	trap_exit() {
		if [[ -n "${g_pid:-}" ]]; then
			kill "$g_pid"
		fi
	}
	trap trap_exit EXIT

	while true; do
		if [[ ! -e "$g_file" ]]; then
			fatal "File does not exists"
		fi
		if ! "$use_debug"; then
			clear
		fi
		if "$use_title"; then
			print_left_right "Every $g_file change: $*" "$HOSTNAME: $(date +'%a %b %d %T %Y')"
			echo
		fi
		"$@" &
		g_pid=$!
		g_ret=0
		g_event=false
		if ! "$use_killonchange"; then
			wait "$g_pid" || g_ret=$?
			unset g_pid
		fi
		# Eat stdin events.
		while IFS= read -r -t 0.1 _; do
			g_event=true
		done
		while ! "$g_event"; do
			if ! IFS= read -r line; then
				fatal "inotifywait failed"
			fi
			if [[ "$line" = "$filebase" ]]; then
				g_event=true
			fi
		done
		if "$use_killonchange"; then
			kill "$g_pid" ||:
			wait "$g_pid" || g_ret=$?
			unset g_pid
		fi
		if ((!g_ret)) && "$use_beep"; then
			printf '\007'
		fi
	done
}

