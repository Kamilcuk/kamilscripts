#!/bin/bash

gitv() {
	L_log "git $*"
	command git "$@"
}

C_get-root() {
	if [[ -z "${GIT_PREFIX:-}" ]]; then
		GIT_PREFIX=$(git rev-parse --show-toplevel)
		export GIT_PREFIX
	fi
	printf "%s\n" "$GIT_PREFIX"
}

C_get-branch() {
	git rev-parse --abbrev-ref HEAD
}

C_mergeto() {
	if (($# != 1)); then L_fatal "Needs one argument: branch name to merge to"; fi
	cur=$(C_get-branch)
	L_run git checkout "$1"
	L_run git merge "$cur" "$@"
	L_run git checkout "$cur"
}

C_mergetopush() {
	if (($# != 1)); then L_fatal "Needs one argument: branch name to merge to"; fi
	cur=$(C_get-branch)
	L_run git checkout "$1"
	L_run git merge "$cur" "$@"
	L_run git push
	L_run git checkout "$cur"
}

C_convertGitRepoToSubmodule() {
	if [ "$#" = 0 ]; then
		echo "Usage: convertGitRepoToSubmodule <submodule_directory...>" >&2
		return 1
	fi
	cd -- "$(C_get-root)" || exit 1
	for i in "$@"; do
		origin="$(cd "$i" && git config --get remote.origin.url)"
		L_run git submodule add "$origin" "$i"
	done
}

C_sed_remote_to_ssh() {
	L_assert "(($#))"
	sed -E 's~https://(git(hub|lab).com)[/:]~git@\1:~' <<<"$*"
}

C_sed_remote_to_https() {
	L_assert "(($#))"
	sed -E 's~git@(git(hub|lab).com)[/:]~https://\1/~' <<<"$*"
}

C_sed_remote_detect() {
	sed -E ' \~https://~{ s/.*/https/; q; }; \~git@[^:]*:~{ s/.*/ssh/; q; }; d '
}

C_remote_get_url() {
	tmp=$(git remote -v show -n "${1:-origin}" | awk '/URL/{print $3;exit}')
	# shellcheck disable=SC2016
	L_assert '[[ -n "$tmp" ]]' "internal error"
	echo "$tmp"
}

C_remote_protocol() {
	C_remote_get_url "$@" | C_sed_remote_detect
}

C_remote_set_to_https() {
	cur=$(C_remote_protocol "$@")
	if [[ "$cur" != "https" ]]; then
		neww=$(C_sed_remote_to_https "$(C_remote_get_url)")
		# shellcheck disable=SC2016
		L_assert '[[ -n "$neww" ]]' "internal error"
		L_run git remote set-url "${1:-origin}" "$neww"
	fi
}

C_remote_set_to_ssh() {
	cur=$(C_remote_protocol "$@")
	if [[ "$cur" != "ssh" ]]; then
		neww=$(C_sed_remote_to_ssh "$(C_remote_get_url)")
		# shellcheck disable=SC2016
		L_assert '[[ -n "$neww" ]]' "internal error"
		L_run git remote set-url "${1:-origin}" "$neww"
	fi
}

C_remote_toggle_ssh_https() {
	cur=$(C_remote_protocol "$@")
	if [[ "$cur" == "https" ]]; then
		C_remote_set_to_ssh "$@"
	elif [[ "$cur" == "ssh" ]]; then
		C_remote_set_to_https "$@"
	fi
}

C_version() {
	git --version | awk '{ split($3,a,"."); printf "%d%03d%03d\n", a[1], a[2], a[3] }'
}

C_version_gt() {
	C_version |
		if [[ "$1" =~ ^([0-9]*)\.([0-9]*)(\.([0-9]*))?$ ]]; then
			awk \
				-v "a=${BASH_REMATCH[1]}" \
				-v "b=${BASH_REMATCH[2]}" \
				-v "c=${BASH_REMATCH[4]}" \
				'{exit !($1 >= (a * 1000 + b) * 1000 + c)}'
		else
			awk -v num="$1" '{exit !($1 >= num)}'
		fi
}

C_autostash_supported() {
	C_version_gt 2.6.0
}

C_any_changes() {
	# https://stackoverflow.com/questions/5143795/how-can-i-check-in-a-bash-script-if-my-local-git-repository-has-changes
	# git status --porcelain
	! git diff-index --quiet HEAD --
}

C_push_force_with_lease_supported() {
	C_version_gt 1.8.5
}

# shellcheck disable=2120
C_push_force_with_lease() {
	if C_push_force_with_lease_supported; then
		L_run git push --force-with-lease "$@"
	else
		L_run git push --force "$@"
	fi
}

C_qdAddAmendPushForce() {
	L_run git commit -a --amend --no-edit "$@"
	# shellcheck disable=2119
	C_push_force_with_lease
}

C_qlAllAddAmendPushForce() {
	L_run git add -A
	L_run git commit --amend --no-edit "$@"
	# shellcheck disable=2119
	C_push_force_with_lease
}

C_supersync() {
	git pull --rebase --autostash &&
		git add -A &&
		git commit -m "supersync: $(date -R)" &&
		git push
}

C_refresh() {
	# http://blogs.perl.org/users/ovid/2015/02/git-refresh-automatically-rebase-current-branch-onto-master.html
	L_trapchain 'L_err "YOU HAVE STASHED CHANGES IN GIT STASH!"' ERR
	if (($# == 0)); then
		set -- "master"
	elif (($# > 1)); then
		fatal "Too many arguments"
	fi
	onto=$1
	branch=$(git rev-parse --abbrev-ref HEAD)
	if [[ "$branch" == "$onto" ]]; then
		echo "Already on $onto. Exiting."
		exit 0
	fi
	if git status --porcelain | grep -qv '^??'; then
		need_to_stash=true
	else
		need_to_stash=false
	fi
	if "$need_to_stash"; then
		gitv stash save --include-untracked "stashed by $L_NAME$L_CMD"
		trap trap_stash EXIT
	fi
	failed=0
	if ! (
		gitv checkout "$onto" &&
			gitv fetch -p &&
			gitv pull --ff-only &&
			gitv checkout "$branch" &&
			gitv rebase "$onto"
	); then
		gitv checkout "$branch"
		failed=1
	fi
	if "$need_to_stash"; then
		gitv stash pop
		trap '' EXIT
	fi
	exit "$failed"
}

C_judgerebase() {
	# https://stackoverflow.com/questions/68313845/is-there-a-way-to-know-estimate-in-advance-the-number-of-conflicting-commits-and

	oldbase="$(git merge-base "$1" "$2")"
	oldhead="$2"
	newbase="$3"
	tmp1=$(git merge-base "$oldbase" "$newbase")
	tmp2=$(git diff --numstat --no-renames "$tmp1" "$newbase")
	tmp3=$(git diff --numstat --no-renames "$oldbase" "$oldhead")
	score=$(
		sort -k3 - <(cat <<<"$tmp3") <<<"$tmp2" |
			uniq -D --skip-fields=2 |
			awk '{sum += $1 + $2} END {print sum + 0}'
	)
	printf "score: %s\n" "$score"
	printf "rating: "
	if ((score == 0)); then
		echo "no conflicts"
		exit 0
	fi
	if [[ "$score" -lt 100 ]]; then
		echo "minor"
	elif [[ "$score" -lt 500 ]]; then
		echo "medium"
	elif [[ "$score" -lt 5000 ]]; then
		echo "major"
	else
		echo "brutal"
	fi
	exit 1
}

C_removebranchesnotonremote() (
	tmpf=$(mktemp --suffix=-branches-to-remove.txt)
	git branch --merged >"$tmpf" &&
		"${EDITOR:-vim}" "$tmpf" &&
		xargs -prtd '\n' git branch -d <"$tmpf"
)

C_autoaddcommitpush() {
	if (($# > 1)); then L_fatal "too many arguments"; fi
	local commit
	commit=${1:-"$HOSTNAME: Updates"}
	git_pull_rebase_autostash
	L_run git add -A
	L_run git commit -m "$commit"
	L_run git push
}

git_autostash_supported() {
	git pull --help | grep -Fq -- --autostash
}

C_autosubmoduleupdate() {
	if (($# != 0)); then L_fatal "no arguments"; fi
	L_log "Updating submodules..."
	if git submodule --help | grep -q update | grep -q -- --remote; then
		L_run git submodule update --remote --merge --recursive
	else
		L_run git submodule update --merge --recursive
	fi
}

git_pull_rebase_autostash() {
	if git_autostash_supported; then
		L_run git pull --rebase --autostash
	else
		porcelain=$(git status --porcelain)
		if [[ -n "$porcelain" ]]; then
			L_run git stash --include-untracked
			L_run git pull --rebase
			L_run git stash apply
		else
			L_run git pull --rebase
		fi
	fi
}

C_autoupdate() {
	L_log "Updating repository..."
	if (($# != 0)); then L_fatal "no arguments"; fi
	git_pull_rebase_autostash
	C_autosubmoduleupdate "$@"
}

C_automasterrebase() {
	if (($# != 0)); then L_fatal "no arguments"; fi
	L_run git fetch --all
	L_run git rebase origin/master --autostash
}

C_checkoutmylastbranch() {
	if (($# != 0)); then L_fatal "no arguments"; fi
	L_run git fetch --all
	branch=$(
		git branch -a --format='%(refname:short)' |
			grep -i "$USER\|kcukrowski\|kamilcukrowski" |
			sort -t- -k2n |
			tail -n1 |
			sed 's@origin/@@'
	)
	L_run git checkout "$branch"
}

###############################################################################

L_dryrun=0
if [[ "${1:-}" == -n ]]; then
	L_dryrun=1
	shift
fi
if (($# >= 2)) && [[ "${2:-}" == -n ]]; then
	# shellcheck disable=2034
	L_dryrun=1
	set -- "$1" "${@:3}"
fi

. ,lib_lib C_ "$@"
