#!/bin/bash
set -euo pipefail

gitv() {
	L_log "git $*"
	command git "$@"
}

C_get_root_help="Print directory location of git root"
C_get-root() {
	if [[ -z "${GIT_PREFIX:-}" ]]; then
		GIT_PREFIX=$(git rev-parse --show-toplevel)
		export GIT_PREFIX
	fi
	printf "%s\n" "$GIT_PREFIX"
}

C_get-branch() {
	git rev-parse --abbrev-ref HEAD
}

C_mergeto() {
	L_argparse -- branch help="branch name to merge to" ---- "$@"
	cur=$(C_get-branch)
	L_run git checkout "$branch"
	L_run git merge "$cur" "$@"
	L_run git checkout "$cur"
}

C_mergetopush() {
	L_argparse -- branch help="branch name to merge to" ---- "$@"
	cur=$(C_get-branch)
	L_run git checkout "$branch"
	L_run git merge "$cur" "$@"
	L_run git push
	L_run git checkout "$cur"
}

C_convertGitRepoToSubmodule() {
	L_argparse -- submodule_directory nargs="+" ---- "$@"
	cd -- "$(C_get-root)" || exit 1
	for i in "${submodule_directory[@]}"; do
		origin="$(cd "$i" && git config --get remote.origin.url)"
		echo L_run git submodule add "$origin" "$i"
	done
}

C_sed_remote_to_ssh() {
	L_assert "" eval "(($#))"
	sed -E 's~https://(git(hub|lab).com)[/:]~git@\1:~' <<<"$*"
}

C_sed_remote_to_https() {
	L_assert "" eval "(($#))"
	sed -E 's~git@(git(hub|lab).com)[/:]~https://\1/~' <<<"$*"
}

C_sed_remote_detect() {
	sed -E ' \~https://~{ s/.*/https/; q; }; \~git@[^:]*:~{ s/.*/ssh/; q; }; d '
}

C_remote_get_url() {
	L_argparse help="Print url of remote" -- origin help="origin argument" default="origin" ---- "$@"
	export LC_ALL=C LANGUAGE=C
	tmp=$(git remote -v show -n "${1:-origin}" | awk '/URL/{print $3;exit}')
	# shellcheck disable=SC2016
	L_assert "internal error" test -n "$tmp"
	echo "$tmp"
}

C_remote_protocol() {
	L_argparse help="Print url of remote" -- origin help="origin argument" default="origin" ---- "$@"
	C_remote_get_url "$origin" | C_sed_remote_detect
}

C_remote_set_to_https() {
	cur=$(C_remote_protocol "$@")
	if [[ "$cur" != "https" ]]; then
		neww=$(C_sed_remote_to_https "$(C_remote_get_url)")
		# shellcheck disable=SC2016
		L_assert "internal error" test -n "$neww"
		L_run git remote set-url "${1:-origin}" "$neww"
	fi
}

C_remote_set_to_ssh() {
	cur=$(C_remote_protocol "$@")
	if [[ "$cur" != "ssh" ]]; then
		neww=$(C_sed_remote_to_ssh "$(C_remote_get_url)")
		# shellcheck disable=SC2016
		L_assert "internal error" test -n "$neww"
		L_run git remote set-url "${1:-origin}" "$neww"
	fi
}

C_remote_toggle_ssh_https() {
	cur=$(C_remote_protocol "$@")
	if [[ "$cur" == "https" ]]; then
		C_remote_set_to_ssh "$@"
	elif [[ "$cur" == "ssh" ]]; then
		C_remote_set_to_https "$@"
	fi
}

C_version_help="Print git version as long value"
C_version() {
	L_argparse ---- "$@"
	git --version | awk '{ split($3,a,"."); printf "%d%03d%03d\n", a[1], a[2], a[3] }'
}

C_version_gt_help="Compare version against git version"
C_version_gt() {
	L_argparse epilog="
Example: %(prog)s 1.8.5
	" -- version ---- "$@"
	C_version |
		if [[ "$version" =~ ^([0-9]*)\.([0-9]*)(\.([0-9]*))?$ ]]; then
			awk \
				-v "a=${BASH_REMATCH[1]}" \
				-v "b=${BASH_REMATCH[2]}" \
				-v "c=${BASH_REMATCH[4]}" \
				'{exit !($1 >= (a * 1000 + b) * 1000 + c)}'
		else
			awk -v num="$1" '{exit !($1 >= num)}'
		fi
}

C_autostash_supported_help="Exit with zero if --autostash comand line optin is supported"
C_autostash_supported() {
	L_argparse ---- "@$"
	C_version_gt 2.6.0
}

C_any_changes_help="Exit with 0 if there are any changes against HEAD"
C_any_changes() {
	# https://stackoverflow.com/questions/5143795/how-can-i-check-in-a-bash-script-if-my-local-git-repository-has-changes
	# git status --porcelain
	! git diff-index --quiet HEAD --
}

C_push_force_with_lease_supported() {
	C_version_gt 1.8.5
}

C_push_force_with_lease_help="push --force-with-lease if supported otherwise push --force"
# shellcheck disable=2120
C_push_force_with_lease() {
	if C_push_force_with_lease_supported; then
		L_run git push --force-with-lease "$@"
	else
		L_run git push --force "$@"
	fi
}

C_qdAddAmendPushForce() {
	L_run git commit -a --amend --no-edit "$@"
	# shellcheck disable=2119
	C_push_force_with_lease
}

C_qlAllAddAmendPushForce() {
	L_run git add -A
	L_run git commit --amend --no-edit "$@"
	# shellcheck disable=2119
	C_push_force_with_lease
}

C_supersync() {
	L_argparse ---- "$@"
	git pull --rebase --autostash &&
		git add -A &&
		git commit -m "supersync: $(date -R)" &&
		git push
}

C_refresh() {
	# http://blogs.perl.org/users/ovid/2015/02/git-refresh-automatically-rebase-current-branch-onto-master.html
	L_argparse prog=",git refresh" show_default=1 -- onto default=master ---- "$@"
	L_trap_push 'L_error "YOU HAVE STASHED CHANGES IN GIT STASH!"' ERR
	branch=$(git rev-parse --abbrev-ref HEAD)
	if [[ "$branch" == "$onto" ]]; then
		echo "Already on $onto. Exiting."
		exit 0
	fi
	if git status --porcelain | grep -qv '^??'; then
		need_to_stash=true
	else
		need_to_stash=false
	fi
	if "$need_to_stash"; then
		gitv stash save --include-untracked "stashed by $L_NAME$L_CMD"
		trap trap_stash EXIT
	fi
	failed=0
	if ! (
		gitv checkout "$onto" &&
			gitv fetch -p &&
			gitv pull --ff-only &&
			gitv checkout "$branch" &&
			gitv rebase "$onto"
	); then
		gitv checkout "$branch"
		failed=1
	fi
	if "$need_to_stash"; then
		gitv stash pop
		trap '' EXIT
	fi
	exit "$failed"
}

C_judgerebase() {
	# https://stackoverflow.com/questions/68313845/is-there-a-way-to-know-estimate-in-advance-the-number-of-conflicting-commits-and
	L_argparse -- oldbase  -- oldhead -- newbase ---- "$@"
	oldbase="$(git merge-base "$oldbase" "$oldhead")"
	tmp1=$(git merge-base "$oldbase" "$newbase")
	tmp2=$(git diff --numstat --no-renames "$tmp1" "$newbase")
	tmp3=$(git diff --numstat --no-renames "$oldbase" "$oldhead")
	score=$(
		sort -k3 - <(cat <<<"$tmp3") <<<"$tmp2" |
			uniq -D --skip-fields=2 |
			awk '{sum += $1 + $2} END {print sum + 0}'
	)
	printf "score: %s\n" "$score"
	printf "rating: "
	if ((score == 0)); then
		echo "no conflicts"
		exit 0
	fi
	if [[ "$score" -lt 100 ]]; then
		echo "minor"
	elif [[ "$score" -lt 500 ]]; then
		echo "medium"
	elif [[ "$score" -lt 5000 ]]; then
		echo "major"
	else
		echo "brutal"
	fi
	exit 1
}

C_printurlforrepo() {
	L_argparse ---- "$@"
	git remote -v |
		awk '/origin.*fetch/{print $2}' |
		sed -E '
			s/([^/]*)@([^/]*):(.*)/https:\/\/\2\/\3/;
		'
}

C_openurlforrepo() {
	L_argparse ---- "$@"
	a=$(C_printurlforrepo) &&
	L_setx xdg-open "$a"
}

C_removebranchesnotonremote() (
	L_argparse ---- "$@"
	tmpf=$(mktemp --suffix=-branches-to-remove.txt)
	L_trap_push 'rm -f "$tmpf"' EXIT
	git branch --merged >"$tmpf" &&
		"${EDITOR:-vim}" "$tmpf" &&
		xargs -prtd '\n' git branch -d <"$tmpf"
)

C_autoaddcommitpush() {
	L_argparse \
		-- commit help="commit message" nargs="?" default="$HOSTNAME: Updates" show_default=1 \
		---- "$@"
	git_pull_rebase_autostash
	L_run git add -A
	L_run git commit -m "$commit"
	L_run git push
}

git_autostash_supported() {
	git pull --help | grep -Fq -- --autostash
}

C_autosubmoduleupdate() {
	L_argparse ---- "$@"
	L_log "Updating submodules..."
	if git submodule --help | grep -q update | grep -q -- --remote; then
		L_run git submodule update --remote --merge --recursive
	else
		L_run git submodule update --merge --recursive
	fi
}

git_pull_rebase_autostash() {
	L_argparse ---- "$@"
	if git_autostash_supported; then
		L_run git pull --rebase --autostash
	else
		porcelain=$(git status --porcelain)
		if [[ -n "$porcelain" ]]; then
			L_run git stash --include-untracked
			L_run git pull --rebase
			L_run git stash apply
		else
			L_run git pull --rebase
		fi
	fi
}

C_autoupdate() {
	L_argparse ---- "$@"
	L_log "Updating repository..."
	git_pull_rebase_autostash
	C_autosubmoduleupdate "$@"
}

C_automasterrebase() {
	L_argparse ---- "$@"
	L_run git fetch --all
	L_run git rebase origin/master --autostash
}

C_checkoutmylastbranch() {
	L_argparse ---- "$@"
	L_run git fetch --all
	branch=$(
		git branch -a --format='%(refname:short)' |
			grep -i "$USER\|kcukrowski\|kamilcukrowski" |
			sort -t- -k2n |
			tail -n1 |
			sed 's@origin/@@'
	)
	L_run git checkout "$branch"
}

paginated_curl() {
	local url r headers body
	url="$1"
	shift
	while [[ "$url" ]]; do
		if ! r=$(L_run curl -i -Ss "$url" "$@"); then
			exit 1
		fi
		r=$(tr -d '\r' <<<"$r")
		headers=$(sed '/^$/q' <<<"$r")
		body=$(sed '1,/^$/d' <<<"$r")
		echo "$body"
		url=$(echo "$headers" |
			sed -n 's/^link: //p' |
			sed -n 's/.*<\([^>]*\)>; rel="next".*/\1/pi')
	done
}

if hash jq 2>/dev/null; then
	_jq_get() { jq -r ".${2:-}[].$1"; }
else
	_jq_get() { tr , '\n' | sed -ne '/"'"$1"'"[[:space:]]*:[[:space:]]*"/s/.*"'"$1"'"[[:space:]]*:[[:space:]]*"\(.*\)".*/\1/p'; }
fi
jq_get() {
	local tmp
	tmp=$(cat)
	if ! _jq_get <<<"$tmp" "$@"; then
		echo "$tmp" >&2
		return 1
	fi
}

C_github_get_repos_username() {
	local username
	L_argparse -- username ---- "$@"
	paginated_curl "https://api.github.com/users/${username}/repos?per_page=100" | jq_get clone_url
}

C_github_get_repos_token() {
	L_argparse -- where -- token ---- "$@"
	paginated_curl "https://api.github.com/$where/repos?per_page=100" -H "Authorization: token $token" | jq_get ssh_url
}

C_gitlab_v3_projects() {
	L_argparse -- token ---- "$@"
	paginated_curl 'https://gitlab.com/api/v3/projects' --header "PRIVATE-TOKEN: $token" | jq_get ssh_url_to_repo
}

C_gitlab_v4_projects() {
	L_argparse -- token ---- "$@"
	tmp=$(paginated_curl 'https://gitlab.com/api/v4/projects?membership=true&simple=true&per_page=100' --header "PRIVATE-TOKEN: $token")
	tmp=$(jq_get ssh_url_to_repo <<<"$tmp")
	tmp=$(sed "s|git@gitlab.com:|https://oauth2:$token@gitlab.com/|" <<<"$tmp")
	echo "$tmp"
}

C_aur_repos() {
	L_argparse -- maintainer ---- "$@"
	curl -sS 'https://aur.archlinux.org/rpc/?v=5&type=search&by=maintainer&arg='"$maintainer" |
		jq -r '.results[].Name' |
		sed 's;.*;https://aur.archlinux.org/&.git;'
}

C_aur_html_repos() {
	L_argparse -- maintainer ---- "$@"
	curl -sS 'https://aur.archlinux.org/packages/?SeB=m&K='"$maintainer" |
		xmllint --html --xpath '//table[@class="results"]//tr/td[1]/a/@href' - |
		tr ' ' '\n' | sed -e '/^$/d' -e 's;^href="/packages/;;' -e 's;/"$;;' |
		sed 's;\(.*\);aur@aur.archlinux.org:/\1.git;'
}

C_url_to_dir() {
	local out ret
	if out=$(
		sed -E '
		# check input
		\|^([^@]+@\|https?://)([^:/]+)[:/](.+)$|!{
			s/.*/regex not matched/p
			q1
		}
		# Create the dir name
		s||\2/\3|
		s|/|:|g
		s/.git$//
		# No empty dirs
		/::/{
			s/.*/internal error: two empty dirs/p
			q2
		}
		' <&0
	); then
		echo "$out"
	else
		ret=$?
		echo "$out" >&2
		exit "$ret"
	fi
}

C_backup_git() {
	local dest input repos
	dest=$1
	input="$(cat)"
	repos=$(C_url_to_dir <<<"$input" | paste <(printf "%s\n" "$input") -)
	if [[ -z "$repos" ]]; then
		L_fatal "-z repos"
	fi
	reposlen=$(wc -l <<<"$repos")
	while read -r url dir; do
		if [[ -z "$url" ]]; then
			L_fatal "-z $url"
		fi
		if [[ -z "$dir" ]]; then
			L_fatal "-z $url"
		fi
	done <<<"$repos"
	echo "Received ${reposlen} repositories"
	printf "%s\n" "${repos}" | column -t
	echo
	while read -r url dir; do
		L_info "backup_repo $url to $dest/$dir"
		if [ ! -d "$dest/$dir" ]; then
			L_run git clone --mirror "$url" "$dest/$dir"
		fi
		L_run git --git-dir="$dest/$dir" remote set-url origin "$url"
		L_run git --git-dir="$dest/$dir" remote update
	done <<<"$repos"
}

C_bisect_steps() {
	git bisect visualize --oneline |
		wc -l |
		perl -MPOSIX -lne 'print "Bisecting: ".floor(($_-1)/2)." revisions left to test after this (roughly ".(floor(log($_-1)/log(2))-1)." steps)" if $_'
}

###############################################################################

. L_lib.sh
L_argparse \
	-- "${L_argparse_template_dryrun[@]}" \
	-- call=function prefix=C_ subcall=detect \
	---- "$@"
