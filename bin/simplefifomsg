#!/bin/bash
# shellcheck disable=SC2016
# SPDX-License-Identifier: MIT AND Beerware
set -euEo pipefail
shopt -s nullglob

NAME=simplefifomsg

usage() {
	cat <<EOF
Usage:
       $NAME [options] <p|put> [dir]
       $NAME [options] [g|get] <dir>
       $NAME unittest <dir>

A very simple publish/subscribe messenger.
Inside the directory fifos are created one for each client.
The directory is removed, when server exits.

Modes:
   put       - Forward stdin to all listeners in dir.
   get       - Get forwarded messages from the directory.
 
Options:
  -v         - Be verbose.
  -w <time>  - In 'get' mode, time to wait for the <dir>. Default: 0.2 sec
  -o         - In 'put' mode, output the input on stdout.
  -h         - Print this help and exit.

Written by Kamil Cukrowski.
Licensed jointly under MIT License and Beerware License.
EOF
}

lerr() {
	echo "$NAME:" "$@" >&2
}

error() {
	lerr "$@"
	exit 2
}

verbose=false
log() {
	if [[ "$verbose" = true ]]; then
		echo "$NAME:" "$@" >&2
	fi
}

assert() {
	if ! eval "$1"; then
		error "Assertion '$1' failed." "${@:2}"
	fi
}

assert_eq() {
	if [ "$1" != "$2" ]; then
		error "Assertion '$1 = $2' failed:" "$(diff <(printf "%s\n" "$1") <(printf "%s\n" "$2")) ${*:3}"
	fi
}

fd_is_open() {
	# shellcheck disable=SC2188
	{ >&"$1"; } 2<> /dev/null
}

wait_for_dir() {
	timeout "$1" bash -c '
		while [[ ! -d "$1" ]]; do 
			if [[ -e "$1" ]]; then
				if [[ -d "$1" ]]; then
					break
				fi
				exit 2
			fi
			sleep 0.0001
		done
	' -- "$1"
}

wait_for_file() {
	timeout "$1" bash -c '
		while [[ ! -f "$1" ]]; do
			if [[ -e "$1" ]]; then
				if [[ -f "$1" ]]; then
					break
				fi
				exit 2
			fi
			sleep 0.0001
		done
	' -- "$2"
}

is_empty_dir() {
	local dir="$1"
	shopt -s nullglob
	local files=( "$dir"/* "$dir"/.* )
	[[ ${#files[@]} -eq 2 ]]
}

wait_for_pids() {
	printf "%s\n" "$@" |
	xargs -0 -P0 -I{} tail -s 0.1 --pid={} -f /dev/null
}

wait_for_pids_timeout() {
	local timeout="$1"
	shift
	printf "%s\0" "$@" |
	timeout "$timeout" xargs -0 -P0 -I{} tail -s 0.1 --pid={} -f /dev/null
}

# locking functions ############
# TAKES 20th FILE DESCRIPTOR!

lock_init() {
	log " "lock: init "$1"
	exec 20<"$1"
}

lock_exclusive() {
	log " "lock: try lock exclusive
	assert 'fd_is_open 20'
	flock 20
	log " "lock: locked exclusive
}

lock_shared() {
	log " "lock: try shared
	assert 'fd_is_open 20'
	flock -s 20
	log " "lock: locked shared
}

unlock() {
	log " "lock: unlock
	assert 'fd_is_open 20'
	flock -u 20
}

# tee service functions #########
# TAKES 10th FILE DESCRIPTOR!

# pid of tee
teepid=""

tee_init() {
	# close stdin so that nothing reads from it
	exec 10<&0
	exec 0<&-
}	

tee_start() {
	log "   tee: start list=(" "$dir"/[0-9]* ")"
	
	assert 'fd_is_open 10'
	assert 'fd_is_open 20'
	assert '[[ "$teepid" = "" ]]' "teepid should be empty in tee_start"
	assert '[[ -n "$dir" ]]'

	{
		if [[ "$putquiet" = 'true' ]]; then
			exec >/dev/null
		fi
		list=( "$dir"/[0-9]* )
		if (( "${#list[@]}" )); then
			exec tee --output-error=exit "${list[@]}"
		else
			# sleep endlesly, so that we can loop on wait
			exec cat -
		fi
	# close file descriptor 20, because flock is held on it 
	} <&10 20<&- &
	teepid=$!
}

tee_stop() {
	log "   tee: stop teepid=$teepid"
	if [[ -n "$teepid" ]]; then
		kill "$teepid" 2>/dev/null ||:
		wait "$teepid" ||:
		teepid=""
	fi
}

tee_restart() {
	tee_stop
	tee_start
}

# mode_put ##################################

mode_put_trap_exit() {
	set +eu
	local list
	
	lock_exclusive
	# remove SIGUSR1 so that we don't receive it while in here
	trap '' SIGUSR1
	
	log "trap EXIT"

	# if we receive EXIT signal even before
	# we had the chance to create the directory
	if [[ ! -d "$dir" ]]; then
		return
	fi
	
	# send SIGUSR1 to all clients
	if pushd "$dir" >/dev/null && list=( [0-9]* ) && popd >/dev/null &&
			(( "${#list[@]}" )); then
		log "kill -s SIGUSR1" "${list[@]}"
		kill -s SIGUSR1 "${list[@]}" 2>/dev/null ||:
	fi
		
	tee_stop
	
	log "wait for max 2 seconds for all clients to exit (" "${list[@]}" ")"
	if (( "${#list[@]}" )); then
		wait_for_pids_timeout 2 "${list[@]}" ||:
	fi
	
	if pushd "$dir" >/dev/null && list=( [0-9]* ) && popd >/dev/null &&
			(( "${#list[@]}" )); then
		lerr "There are still some processes that use $dir and didn't exit: ${list[*]}"
	fi
	
	# remove the directory
	rm -r "$dir"
	# wait for any child processes
	pkill -P $$ ||:

	log "Dieing"
}


mode_put_trap_sigusr1() {
	log "received SIGUSR1"
	lock_exclusive
	tee_stop
}

mode_put() {
	trap exit TERM
	trap mode_put_trap_exit EXIT
	
	if (($#)); then
		dir="$1"
		
		if [[ ! -e "$dir" ]]; then
			log "Creating direcotry $dir"
			if ! mkdir "$dir"; then
				error "Creating directory failed: $dir"
			fi
		fi
		if [[ ! -d "$dir" ]]; then
			error "Directory exists and is not a directory: $dir"
		fi
		if ! is_empty_dir "$dir"; then
			error "Directory exists but is not empty: $dir"
		fi
		
	else
	
		if ! dir=$(mktemp -d); then
			error "mktemp -d failed"
		fi
		
		# if we are run without dir, print it
		printf "%s\n" "$dir"
	fi
	
	tee_init
	
	trap mode_put_trap_sigusr1 SIGUSR1
		
	log "Writing $$ to serverpid"
	echo $$ > "$dir"/serverpid
	# lock the serverpid file even before clients can send us anything
	lock_init "$dir"/serverpid

	while true; do
		lock_exclusive
		tee_stop
		tee_start
		unlock
		
		wait "$teepid" && ret=$? || ret=$?
		log "tee returned with $ret"
		if ((ret == 0)); then
			break
		elif ((ret < 128)); then
			error "Tee subprocess errored"
		fi
	done
}

# mode_get ##################################

mode_get_trap_sigusr1() {
	# SIGUSR1 means we should exit
	# it differs from SIGEXIT with error status
	log "received SIGUSR1"
	exit
}

mode_get_trap_exit() {
	set +eu
	log "received EXIT"
	assert '[[ -n "$fifo" ]]'
	rm -f "$fifo"
	# notify server that we are exiting
	# we could hold the lock here, but we don't care
	assert '[[ -n "$serverpid" ]]'
	kill -s SIGUSR1 "$serverpid" 2>/dev/null ||:
	if [[ -n "$catpid" ]]; then
		kill "$catpid" 2>/dev/null ||:
	fi
	pkill -P $$ ||:
	log "dieing"
}

mode_get() {	
	if [[ -n "$waittime" ]]; then
		log "wait_for_file $waittime $dir/serverpid"
		wait_for_file "$waittime" "$dir"/serverpid ||:
	fi
	
	if [[ ! -d "$dir" ]]; then
		error "$dir: Directory does not exists"
	fi
	if [[ ! -f "$dir"/serverpid ]]; then
		error "$dir/serverpid: File does not exists"
	fi

	# we lock here to synchronize with other clients
	# it is possible that server will exit exactly __here__
	# then reading from serverpid will fail
	# otherwise we will receive SGIUSR1 and exit safely
	lock_init "$dir"/serverpid
	lock_shared

	if ! serverpid=$(<"$dir"/serverpid); then
		error "Reading $dir/serverpid failed"
	fi

	log "serverpid=$serverpid"
	
	fifo="$dir"/$$
	
	trap mode_get_trap_sigusr1 SIGUSR1
	trap 'log Received TERM; exit' TERM
	trap mode_get_trap_exit EXIT
	
	if ! mkfifo "$fifo"; then
		error "Problem creating fifo $fifo"
	fi
	# refresh server
	log "Sending SIGUSR1 to server=$serverpid"
	kill -s SIGUSR1 "$serverpid"

	unlock
	 
	catpid=""	
	while :; do
		if [[ -z "$catpid" ]] || ! kill -0 "$catpid" 2>/dev/null; then
			cat "$fifo" &
			catpid=$!
		fi
		# wait for signals
		wait "$catpid" && ret=$? || ret=$?
		log "cat $fifo returned $ret"
		if ((ret && ret < 128)); then
			break
		fi
	done
}

# mode_test ##################

dbg() {
	sed 's/^/'"$1"': /' >/dev/stderr
}

mode_test_uniqnum() {
	if (($# == 0)) || [[ -z "$1" ]]; then
		set -- "$BASHPID"
	fi
	echo -n "${1:${#1}-2}"
}

test_mode() {
	declare -g dir exe # set in test_mode
	assert '[[ -n "$dir" ]]'
	assert '[[ -x "$exe" ]]'

	local -a addargs
	addargs=()
	if [[ "$verbose" = "true" ]]; then
		addargs=(-v)
	fi

	local iden mode
	mode="$1"
	case "$mode" in
		put) iden=s; addargs+=(-o); ;;
		get) iden=c; ;;
		*) error ""; ;;
	esac

	local n 
	n="$iden$(mode_test_uniqnum "${2:-}")"

	local timeout=${3:-}
	local -a run=()
	if [[ -n "$timeout" ]]; then
		assert 'awk -v a="$timeout" "BEGIN { quit a < 10 }"'
		run+=(timeout -k 10 "$timeout")
	fi
	"${run[@]}" "$exe" "${addargs[@]}" "$1" "$dir" 2> >(dbg "${n}e") | tee >(dbg "${n}o")
}

test_cli() {         test_mode get "${1:-}"; }
test_cli_timeout() { test_mode get "${2:-}" "$1"; }
# shellcheck disable=2120
test_srv() {         test_mode put "${1:-}"; }
test_srv_timeout() { test_mode put "${2:-}" "$1"; }

test_wait_exit_status() {
	local pid
	pid=$1
	wait "$pid" && ret=0 || ret=$?
	(( "$2" == ret ))
}

mode_test_simple() {
	(
		if ! out=$( { sleep 0.1; seq 10; } | test_srv); then
			log "test_simple: srv: nonzero"
			exit 1
		fi 
		assert '[[ "$out" == "$(seq 10)" ]]'
	) &
	srvpid=$!
	(
		if ! out=$(test_cli); then
			log "test_simple: cli: nonzer0"
			exit 1
		fi
		assert '[[ "$out" == "$(seq 10)" ]]'
	) &
	# shellcheck disable=2034
	clipid=$!
	assert 'wait "$srvpid"'
	assert 'wait "$clipid"'
}

mode_test_exiting_server() {
	local srvpid clipid1 clipid2
	sleep 2 | test_srv >/dev/null &
	srvpid=$!
	test_cli >/dev/null &
	clipid1=$!
	test_cli >/dev/null &
	clipid2=$!
	sleep 0.1
	kill "$srvpid"
	wait "$srvpid" && srvret=$? || srvret=$?
	wait "$clipid1" && cliret1=$? || cliret1=$?
	wait "$clipid2" && cliret2=$? || cliret2=$?
	wait_for_pids_timeout 2 "$srvpid" "$clipid1" "$clipid2"
	assert '((srvret == 128 + 15))' "srvret=$srvret"
	assert '((cliret1 == 0))' "cliret1=$cliret1"
	assert '((cliret2 == 0))' "cliret2=$cliret2"
}

mode_test_parts_1() {
	local -a pids=()
	{
		out=$( { sleep 0.1; seq 10; } |
			while IFS= read -r line; do sleep 0.1; echo "$line"; done |
			test_srv
		)
		assert '[[ "$out" = "$(seq 10)" ]]'
	} &
	pids+=("$!")
	{
		out=$(test_cli _1)
		assert '[[ "$out" = "$(seq 10)" ]]'
	} &
	pids+=("$!")
	{
		sleep 0.35
		out=$(test_cli _2)
		assert '[[ "$out" = "$(seq 3 10)" ]]'
	} &
	pids+=("$!")
	{
		sleep 0.35
		out=$(test_cli_timeout 0.3 _3) || ret=$?
		assert '(( ret == 124 ))'
		assert '[[ "$out" = "$(seq 3 5)" ]]'
	} &
	pids+=("$!")
	for i in "${pids[@]}"; do
		assert 'wait "$i"'
	done
}

mode_test_exiting_clients() {
	local -a pids=()
	{
		out=$(
			{ sleep 0.1; seq 10; } |
			while IFS= read -r line; do sleep 0.1; echo "$line"; done | 
			test_srv
		)
		assert_eq "$out" "$(seq 10)" "$$"
	} & pids+=("$!")
	{
		out=$(test_cli)
		assert_eq "$out" "$(seq 10)" "$$"
	} & pids+=("$!")
	{
		sleep 0.35
		out=$(test_cli)
		assert_eq "$out" "$(seq 3 10)" "$$"
	} & pids+=("$!")
	f() {
		sleep "$1"
		out=$(test_cli_timeout "$2") || ret=$?
		assert '((ret == 124))'
		assert_eq "$out" "$(seq "$3" "$4")" "$$"
	}
	f 0.31 0.3 3 5 & pids+=("$!")
	f 0.31 0.3 3 5 & pids+=("$!")
	f 0.61 0.3 6 8 & pids+=("$!")
	f 0.31 0.3 3 5 & pids+=("$!")
	for i in "${pids[@]}"; do
		assert 'wait "$i"' "$i in ${pids[*]}"
	done
}

mode_test_list_processes() {
	ps=$(ps -e -o pgid,pid,command)
	<<<"$ps" awk -v p=$$ -v p2=$BASHPID '$1 == p || $1 == p2' | sed 's/^ *[0-9]* */'"$NAME"': -- /'
}

mode_test_trap_exit() {
	set +eu
	echo "$NAME: received EXIT" "$@"
	assert '[[ -n "$dir" ]]'

	echo "$NAME: My processes:"
	mode_test_list_processes

	echo "$NAME: Waiting 1 second for everyone to die"
	sleep 1

	echo "$NAME: My processes:"
	mode_test_list_processes

	echo "$NAME: Killing them all..."
	pkill -P "$$" ||:

	if [[ -e "$dir" ]]; then
		echo "$NAME: Error directory $dir exists!"
	fi
	rm -fr "$dir"

	echo "$NAME: dieing"
	kill 0
} 2>&1
	
mode_test() {
	# setup globals
	NAME=">> test"
	exe="$0"
	trap mode_test_trap_exit EXIT
	
	# export needed to run `timeout -c bash test_cli`
	export -f mode_test_uniqnum test_srv test_cli assert log dbg error lerr
	export exe dir verbose NAME
	
	echo "$NAME: Testing... <<"
	
	local tests test_i
	tests=(
		mode_test_simple
		mode_test_exiting_server
		mode_test_parts_1
		mode_test_exiting_clients
	)
	for test_i in "${tests[@]}"; do
		echo "$NAME: $test_i -- Running"
		if ! "$test_i"; then
			echo "$NAME: $test_i -- failure"
		else
			echo "$NAME: $test_i -- Success"
		fi
		sleep 1
	done
		
	echo "$NAME: Testing done <<"
} 2>&1
	
# main #########

trap_err() {
	echo "ERROR: UNHANDLED ERROR OCCURED ON LINE $1" >&2
	exit 2
}
trap 'trap_err "$LINENO"' ERR

waittime=0.2
putquiet=true
while getopts v"vw:oh" c; do
	case "$c" in
	v) verbose=true; ;;
	w) waittime="$OPTARG"; ;;
	o) putquiet=false; ;;
	h) usage; exit; ;;
	?) error "Unknown option"; ;;
	esac
done
shift $((OPTIND - 1))
if [[ "$#" -eq 1 ]]; then
	set -- "get" "$1"
fi	
if [[ "$#" -ne 2 ]]; then
	error "Invalid number of arguments. Try '$NAME -h' for more information"
fi

mode="$1"
dir="$2"

case "$mode" in
p|put) mode_put "$dir"; ;;
g|get) mode_get "$dir"; ;;
unittest) mode_test "$dir"; ;;
*) error "Invalid mode: $mode"; ;;
esac
