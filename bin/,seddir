#!/usr/bin/env python3

import argparse
import filecmp
import fnmatch
import os
import re
import shlex
import shutil
import subprocess
import sys
import tempfile
from contextlib import contextmanager


def log(*nargs):
    global args
    if args.verbose:
        print(*nargs)


def fnmatches_to_re(arr):
    return [re.compile(fnmatch.translate(i)) for i in arr]


parser = argparse.ArgumentParser()
parser.add_argument(
    "-i",
    "--include",
    action="append",
    default=[],
    help="include paths with this glob",
)
parser.add_argument(
    "-e",
    "--exclude",
    action="append",
    default=[],
    help="exclude paths with this glob",
)
parser.add_argument(
    "-E", "--regexp-extended", action="store_true", help="Use extended regex"
)
parser.add_argument(
    "-k",
    "--ok",
    action="store_true",
    help="set this to actually make changes",
    default=False,
)
parser.add_argument("-D", "--nodiff", action="store_true", help="Do not display diff")
parser.add_argument("--sdiff", action="store_true")
parser.add_argument("--shortdiff", action="store_true")
parser.add_argument(
    "-G",
    "--no-git-ls-files",
    action="store_true",
    help="Do not use git ls-files",
)
parser.add_argument(
    "-z",
    action="store_true",
    help="Pass -z to sed",
)
parser.add_argument("-v", "--verbose", action="store_true", default=False)
parser.add_argument("script", help="sed script to run")
parser.add_argument("dirs", nargs="*", default=["."], help="directories to scan")
args = parser.parse_args()
args.include = fnmatches_to_re(args.include)
args.exclude = fnmatches_to_re(args.exclude)


def files_generator():
    global args
    files = []
    if not args.dirs:
        try:
            if not args.no_git_ls_files:
                files = (
                    subprocess.check_output(["git", "ls-files", "-z"])
                    .decode(sys.stdout.encoding)
                    .split("\0")
                )
                del files[-1]
        except subprocess.CalledProcessError:
            pass
    if files:
        return files
    # log(args.dirs)
    for dir in args.dirs:
        if os.path.isfile(dir):
            files.append(dir)
        else:
            # log(dir)
            for root, dirnames, filenames in os.walk(dir):
                log(root, dirnames, filenames)
                partfiles = [os.path.join(root, filename) for filename in filenames]
                files.extend(partfiles)
    files = [f for f in files if os.path.isfile(f)]
    return files


@contextmanager
def temporary_file_to_move_to(file):
    with tempfile.NamedTemporaryFile(dir=os.path.dirname(file), delete=False) as fp:
        try:
            yield fp
        finally:
            fp.close()
            try:
                os.unlink(fp.name)
            except FileNotFoundError:
                pass


def run_on_file(file):
    global args, changed
    cmd = (
        ["sed"]
        + (["-E"] if args.regexp_extended else [])
        + (["-z"] if args.zero else [])
        + [args.script, file]
    )
    with temporary_file_to_move_to(file) as fp:
        if not args.nodiff or args.ok:
            try:
                subprocess.run(cmd, check=True, stdout=fp)
            except subprocess.CalledProcessError as e:
                exit(e.returncode)
        if not filecmp.cmp(file, fp.name):
            print("+", shlex.join(cmd))
            if not args.nodiff:
                if args.sdiff:
                    subprocess.run(["sdiff", file, fp.name])
                elif args.shortdiff:
                    subprocess.run(["diff", "--color", file, fp.name])
                else:
                    subprocess.run(["diff", "-Naur", "--color", file, fp.name])
            if args.ok:
                st = os.stat(file)
                shutil.move(fp.name, file)
                os.chown(file, st.st_uid, st.st_gid)
                os.chmod(file, st.st_mode)
            changed = changed + 1
        # else:
        # log("+", cmd)


files = files_generator()
if len(args.exclude):
    files = [n for n in files if not any([e.match(n) for e in args.exclude])]
# print(args.include, len(files))
if len(args.include):
    files = [n for n in files if any([e.match(n) for e in args.include])]
changed = 0
for file in files:
    run_on_file(file)

CYAN = "\033[33m"
RESET = "\033[0m"
if not changed:
    print(CYAN + "No files to change." + RESET)
elif args.ok:
    print(CYAN + "Changed", changed, "files." + RESET)
else:
    print(
        CYAN + "Would change", changed, "files. Run with -k to do the change." + RESET
    )
