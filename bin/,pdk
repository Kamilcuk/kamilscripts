#!/bin/bash
set -euo pipefail

L_trap_err() { :; }

chdirtorepo() {
	if p=$(git rev-parse --show-toplevel) && [[ "$p" != "$PWD" ]]; then
		run cd "$p"
	fi
}

setclassfiles() {
	local _aUtO_TmP
	_aUtO_TmP=$(
		IFS=' '
		path=$1
		path=${path//::/\/}
		path=${path%.pp}
		name=${path//\//::}
		echo "$name"
		echo "$path"
		echo "manifests/${path}.pp"
		echo "spec/classes/${path}_spec.rb"
	)
	{
		local IFS=$'\n'
		read -r "$2"
		read -r "$3"
		if (($# > 3)); then
			readarray -t "$4"
		fi
	} <<<"$_aUtO_TmP"
}

C_get_module_name() {
	chdirtorepo
	jq -r .name metadata.json | sed 's/[^-]*-//'
}

C_rename_class() {
	chdirtorepo
	if (($# != 2)); then fatal "Usage: rename_class <class> <neaname>"; fi
	setclassfiles "$1" oldname oldfile oldfiles
	setclassfiles "$2" newname newfile newfiles
	modulename=$(C_get_module_name)
	run L_sed_inplace_show_diff "s/\(#\s*include\s*\|class\s*\)$modulename::$oldname/\1$modulename::$newname/" "manifests/$oldfile.pp"
	run L_sed_inplace_show_diff "s/\(describe\s*\)'$modulename::$oldname'/\1'$modulename::$newname'/" "spec/classes/${oldfile}_spec.rb"
	run mkdir -vp "$(dirname "manifests/$newfile")" "$(dirname "spec/classes/${newfile}_spec.rb")"
	run mv -v "manifests/$oldfile.pp" "manifests/$newfile.pp"
	run mv -v "spec/classes/${oldfile}_spec.rb" "spec/classes/${newfile}_spec.rb"
	echo "Moved $oldname to $newname"
}

C_rename_module() {
	chdirtorepo
	if (($# != 2)); then fatal "Usage: rename_module <oldname> <newname>"; fi
	echo "find . -path ./.git -prune -false -o -type f | xargs -d'\\n' -t sed -i -e 's/$1/$2/'"
}

C_remove_class() {
	chdirtorepo
	setclassfiles "$1" name path files
	run rm -iv "${files[@]}"
}

nicelogrun() {
	L_log "+ $@"
	nice "$@"
}

C_unit_test_seq() {
 	chdirtorepo
	nicelogrun pdk validate -a --parallel
	nicelogrun pdk test unit --parallel
}

mktemp_auto() {
	local _aUtO_TmP
	_aUtO_TmP=$(mktemp "${@:2}") &&
	printf -v "$1" %s "$_aUtO_TmP" &&
	printf -v _aUtO_TmP %q "$_aUtO_TmP" &&
	L_trapchain "rm $_aUtO_TmP" EXIT
}

mkfifo_auto() {
	local _aUtO_TmP
	_aUtO_TmP=${2:-$(mktemp -u)} &&
	mkfifo "$_aUtO_TmP" &&
	printf -v "$1" %s "$_aUtO_TmP" &&
	printf -v _aUtO_TmP %q "$_aUtO_TmP" &&
	L_trapchain "rm $_aUtO_TmP" EXIT
}

# shellcheck disable=SC2016
C_unit_test() {
	chdirtorepo
	#
	tmpf2='' ; mktemp_auto tmpf2
	L_trapchain L_kill_all_jobs EXIT
	#
	cmd2=(pdk test unit --parallel)
	"${cmd2[@]}" >"$tmpf2" 2>&1 &
	child2=$!
	#
	cmd1=(pdk validate -a --parallel)
	L_info "+" "${cmd1[@]@Q}"
	if "${cmd1[@]}" | cat; then :; else
		exit "$?"
	fi
	#
	L_info "+" "${cmd2[@]@Q}"
	tail -f -n +1 "$tmpf2" &
	if wait "$child2"; then :; else
		exit "$?"
	fi
}

C_rake_r10k_solve_dependencies() {
	docker run -ti --rm -v "$PWD":/work:ro -w /work -v "$HOME"/.ssh/id_rsa:/root/.ssh/id_rsa:ro puppet/puppet-dev-tools bash -xc '
		echo $1 code.cis.gov.pl >> /etc/hosts &&
		mkdir -p ~/.ssh &&
		chmod 700 ~/.ssh &&
		ssh-keyscan -H code.cis.gov.pl >> ~/.ssh/known_hosts &&
		cp -r . / &&
		cd / &&
		sed -i "s/:control_branch/\x27""$2""\x27/g; s@http://forge.puppetlabs.com@https://forgeapi.puppetlabs.com@g" Puppetfile &&
		mkdir -p ~/.cache && shift 2 && "$@" || (
				echo "Failed: $*"
				bash
		)
	' _ "$(getent hosts code.cis.gov.pl | awk '{ print $1 }')" "$(git rev-parse --abbrev-ref HEAD)" \
		rake r10k:solve_dependencies
}

. ,lib_lib -L C_ "$@"

