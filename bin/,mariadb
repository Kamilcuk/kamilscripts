#!/usr/bin/env python

import os
import shlex
import subprocess
from pathlib import Path
from typing import List, Optional

import click


def option(name: str, default: Optional[str] = None):
    return click.get_current_context().obj.get(name, default)


def dryrun():
    return option("dryrun")


def dryrunstr():
    return "DRYRUN: " if dryrun() else ""


def quotearr(cmd: List[str]):
    return " ".join(shlex.quote(x) for x in cmd)


def run(cmd: List[str], check=True, dryrun=None, text=True, **kvargs):
    cmdstr = quotearr(cmd)
    print(f"{dryrunstr()}+ {cmdstr}")
    dryrun = dryrun if dryrun is not None else option("dryrun")
    if not dryrun:
        return subprocess.run(cmd, check=check, text=text, **kvargs)


def mariadb(sql: str, **kvargs):
    return run(["mariadb", "-e", sql], **kvargs)


def mariadbarr(*sqls: str):
    mariadb("\n" + "\n".join(sqls) + "\n")


def useropt():
    user = option("username")
    return f"-u {shlex.quote(user)}" if user is not None else ""


###############################################################################


@click.group()
@click.help_option("-h", "--help")
@click.option("-u", "--username")
@click.option("-n", "--dryrun", is_flag=True)
@click.pass_context
def cli(ctx, **kvargs):
    ctx.obj.update(kvargs)


@cli.command()
@click.option("-d", "--domain", default="localhost", show_default=True)
@click.argument("username")
@click.argument("password")
@click.argument("database")
def create_user_and_database(username, password, database, domain):
    mariadbarr(
        f"CREATE USER '{username}'@'{domain}' IDENTIFIED BY '{password}';",
        f"CREATE DATABASE {database};",
        f"GRANT ALL PRIVILEGES ON {database}.* TO '{username}'@'{domain}';",
        "FLUSH PRIVILEGES;",
    )


@cli.command()
@click.argument("src")
@click.argument("srcdumpfile")
@click.argument("dst")
def copy_databse(src, srcdumpfile, dst):
    run(["sh", "-c", f"mariadb-dump {shlex.quote(src)} > {shlex.quote(srcdumpfile)}"])
    run(["sh", "-c", f"mariadb {shlex.quote(dst)} < {srcdumpfile}"])


@cli.command()
@click.option("-u", "--username", default="readonly")
@click.option("-d", "--domain", default="%")
@click.argument("password")
def create_readonly_user(username, domain, password):
    mariadbarr(
        f"CREATE USER '{username}'@'{domain}' IDENTIFIED BY '{password}';",
        f"GRANT SELECT, SHOW VIEW PRIVILEGES ON *.* TO '{username}'@'{domain}';",
        "FLUSH PRIVILEGES;",
    )


@cli.command()
def show_databases_update_time():
    mariadb(
        "select table_schema, max(update_time), engine, table_type from information_schema.tables group by table_schema"
    )


@cli.command()
@click.argument(
    "destination", type=click.Path(exists=True, file_okay=False, path_type=Path)
)
def dumpalldir(destination):
    rr = run(
        shlex.split(f"mariadb -s -r {useropt()} -e 'show databases'"),
        stdout=subprocess.PIPE,
        dryrun=False,
    )
    assert rr
    databases = rr.stdout.split()
    databases = [
        d
        for d in databases
        if d not in "information_schema performance_schema Database sys".split()
    ]
    if not destination.exists() and not dryrun():
        destination.mkdir()
    for db in databases:
        cmd = f"mariadb-dump {useropt()} {db}".split()
        out = destination / f"{db}.sql.gz"
        print(f"{dryrunstr()}{quotearr(cmd)} | gzip > {out}")
        if not dryrun():
            tmpf = out.with_suffix(out.suffix + ".tmp")
            run(
                [
                    "bash",
                    "-o",
                    "pipefail",
                    "-c",
                    f"mariadb-dump {useropt()} {db} | gzip",
                ],
                stdout=tmpf.open('wb'),
                text=False,
            )
            os.rename(tmpf, out)


if __name__ == "__main__":
    cli.main(obj={})
