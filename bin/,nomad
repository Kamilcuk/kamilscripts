#!/usr/bin/env python

import sys
import shlex
import argparse
import contextlib
import subprocess
from pprint import pprint

try:
    import nomad
except ImportError:
    print("Install nomad:\npip3 install python-nomad")
    sys.exit(1)

###############################################################################


def run(str):
    print("| " + str, flush=True)
    subprocess.run(str, shell=True, check=True)


def cleanup():
    print("cleaned up!")


def error(str):
    print(str, file=sys.stderr)
    sys.exit(-1)


def getnomad():
    return nomad.Nomad()


def C_getjobs():
    return getnomad().jobs.get_jobs()


def C_joblastalloc(job):
    allocs = getnomad().job.get_allocations(job)
    if not allocs:
        for ns in getnomad().namespaces.get_namespaces():
            allocs = getnomad().job.request(job, "allocations", method="get", params={"namespace": ns["Name"]}).json()
            if allocs:
                break
    if not allocs:
        error(f"Job not found: {job}")
    allocssorted = sorted(allocs, key=lambda d: d["JobVersion"], reverse=True)
    return allocssorted[0]


def C_getjobstatus(job):
    alloc = C_joblastalloc(job)["ID"]
    run("nomad job status " + str(job))
    run("nomad alloc status " + str(alloc))


@contextlib.contextmanager
def process(cmd, **kwargs):
    print("| " + cmd, flush=True)
    cmdsplit = shlex.split(cmd)
    pp = subprocess.Popen(cmdsplit, stdout=None, stderr=None, **kwargs)
    try:
        yield pp
    finally:
        print("| Killing: " + cmd, flush=True)
        pp.kill()
        pp.wait()


def C_jobgetlastlogs(job):
    alloc = C_joblastalloc(job)["ID"]
    cmd = "nomad alloc logs -f -verbose {} " + alloc
    with process(cmd.format("-stderr")) as p1, process(cmd.format("")) as p2:
        for p in [p1, p2]:
            p.wait()


###############################################################################

cmdfunctions = [
    (key[2:], value)
    for key, value in globals().items()
    if callable(value) and key.startswith("C_")
]
parser = argparse.ArgumentParser()
parser.add_argument("command", nargs=1, choices=[name for name, _ in cmdfunctions])
parser.add_argument("args", nargs="*")
args = parser.parse_args()
func = [func for name, func in cmdfunctions if name == args.command[0]][0]
ret = func(*args.args)
if ret is not None:
    pprint(ret)
