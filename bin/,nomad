#!/usr/bin/env python

import sys
import argparse
import subprocess
from pprint import pprint

try:
    import nomad
except ImportError:
    print("Install nomad:\npip3 install python-nomad")
    sys.exit(1)

###############################################################################


def run(str):
    print("+ " + str)
    subprocess.run(str, shell=True, check=True)

def cleanup():
       timeout_sec = 5
       for p in all_processes: # list of your processes
           p_sec = 0
           for second in range(timeout_sec):
               if p.poll() == None:
                   time.sleep(1)
                   p_sec += 1
           if p_sec >= timeout_sec:
               p.kill() # supported from python 2.6
       print 'cleaned up!'


def getnomad():
    return nomad.Nomad()


def C_getjobs():
    return getnomad().jobs.get_jobs()


def C_joblastalloc(job):
    return sorted(getnomad().job.get_allocations(job), key=lambda d: d['JobVersion'], reverse=True)[0]


def C_getjobstatus(job):
    alloc = C_joblastalloc(job)["ID"]
    run("nomad job status " + str(job))
    run("nomad alloc status " + str(alloc))


def C_jobgetlastlogs(job):
    alloc = C_joblastalloc(job)["ID"]
    procs = []
    for i in [[], ['--stderr']]:
        procs += [
            subprocess.Popen([
                "nomad", "alloc", "-v"]
                             + i + [
                alloc
            ])
        ]
    for i in procs:



###############################################################################

cmdfunctions = [
    (key[2:], value)
    for key, value in globals().items()
    if callable(value) and key.startswith("C_")
]
parser = argparse.ArgumentParser()
parser.add_argument("command", nargs=1, choices=[name for name, _ in cmdfunctions])
parser.add_argument("args", nargs="*")
args = parser.parse_args()
func = [func for name, func in cmdfunctions if name == args.command[0]][0]
ret = func(*args.args)
if ret is not None:
    pprint(ret)
