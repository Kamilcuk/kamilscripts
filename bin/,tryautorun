#!/bin/bash
set -euo pipefail

L_NAME=,tryautorun

usage() {
	cat <<EOF
Usage: $L_NAME [options] <file> [tool_specific_arguments...]

Tries to compile and automatically run the file or the project.
Detects filetype using the extension of the file.
Chooses from gcc, g++, python, bash.
In project mode chooses from: make, cmake.

Options:
   -e filetype   Pass filetype as vim filetype.
   -T <timeout>  Timeout execution.
   -S            Synchronize stderr with stdout and be line buffered.
   -V            Run from vim.
   -p            Try to detect project files before detecting filetype.
   -n            Dry run.
   -h            Print this help and exit.

Written by Kamil Cukrowski
Licensed under GPL-3.0
EOF
}

apply_vim_config() {
	# Change defaults when run from vim
	g_runfromvim=true;
	g_syncoutput=true;
	g_removecolors=false;
	g_use_project=true;
	g_timeout=10;
	g_maxlines=1000;
}

parse_arguments() {
	declare -g file g_filetype g_use_project g_dryrun g_syncoutput g_runfromvim g_timeout
	g_use_project=false
	g_dryrun=false
	g_syncoutput=false
	g_removecolors=false
	g_timeout=
	g_runfromvim=false
	g_filetype=
	g_maxlines=
	if [[ -n "${VIMRUNTIME:-}" ]]; then
		g_runfromvim=true
	fi

	local o
	while getopts ":e:pT:SVnhl:DC" o; do
		case "$o" in
		e) g_filetype=$OPTARG; ;;
		p) g_use_project=true; ;;
		T) g_timeout=$OPTARG; ;;
		S) g_syncoutput=true; ;;
		V) g_runfromvim=true; ;;
		n) g_dryrun=true; ;;
		l) g_maxlines=$OPTARG; ;;
		h) usage; exit 0; ;;
		D) set -x; ;;
		C) g_removecolors=true; ;;
		*) fatal "Invalid argument: -$OPTARG"; ;;
		esac
	done

	if "$g_runfromvim"; then
		apply_vim_config
	fi

	if "$g_syncoutput"; then
		exec 2>&1
	fi

	if [[ -n "$g_timeout" ]]; then
		timeout_watcher &
	fi

	f_runhandleoutput=false
	if [[ -n "$g_maxlines" ]] || "$g_removecolors"; then
		f_runhandleoutput=true
	fi
}

f_limitlines() {
	local i line
	i=0
	while IFS= read -r line; do
		printf "%s\n" "$line"
		if ((++i == g_maxlines)); then
			error "More then $g_maxlines lines of output - too many, terminating..."
			kill -s SIGTERM 0
			exit 1
		fi
	done
}

f_handleoutput() {
	if "$g_removecolors" && [[ -z "$g_maxlines" ]]; then
		f_removecolors
	elif ! "$g_removecolors" && [[ -n "$g_maxlines" ]]; then
		f_limitlines
	elif "$g_removecolors" && [[ -n "$g_maxlines" ]]; then
		f_removecolors | f_limitlines
	else
		fatal "Internal error: f_handleoutput shouldn't have been called"
	fi
}

f_cmdrun() {
	if "$g_dryrun"; then
		return;
	fi
	case "$g_syncoutput $f_runhandleoutput" in
	(false\ false) "$@"; ;;
	(true\ false) "$@" 2>&1; ;;
	(false\ true) "$@" 1> >(f_handleoutput) 2> >(f_handleoutput); ;;
	(true\ true) "$@" 1> >(f_handleoutput) 2>&1; ;;
	(*) fatal "Internal error: values are invalid"; ;;
	esac
}

f_cmdlog() {
	echo "+" "$@" >&2
}


f_cmdlogrun() {
	local tmp
	printf -v tmp " %q" "$@"
	printf "+ %s\n" "$tmp" >&2
	f_cmdrun "$@"
}

f_removecolors() {
	if hash stdbuf 2>/dev/null; then
		stdbuf -oL sed 's/\x1b[^m]*m//g'
	else
		sed 's/\x1b[^m]*m//g'
	fi
}

error() {
	echo "$L_NAME: ERROR: $*" >&2
}

fatal() {
	error "$*"
	exit 1
}

be_nice() {
	if hash ,nice 2>/dev/null; then
		,nice -p $$
	else
		renice 20 -p $$ >/dev/null
		ionice -c 3 -p $$
	fi
}

f_get_unbuffer_cmd() {
	declare -g g_unbuffercmd
	g_unbuffercmd=()
	if hash g_unbuffercmd 2>/dev/null >&2; then
		g_unbuffercmd=(g_unbuffercmd)
	elif hash stdbuf 2>/dev/null >&2; then
		g_unbuffercmd=(stdbuf -oL -eL)
	fi
}

timeout_watcher() {
	timeout="$g_timeout"
	while ((timeout--)); do
		for ((i = 0; i < 10; ++i)); do
			sleep 0.1
			if ! kill -0 "$$" 2>/dev/null; then
				exit 0
			fi
		done
	done

	echo "Timeout of $g_timeout seconds reached - terminating..." >&2
	kill -s SIGTERM 0
	exit 1
}

gcc_version() {
	if ! gcc --version | grep '^gcc' | sed 's/^.* \([0-9]\+\.[0-9]\+\).*/\1/'; then
		fatal "Getting gcc version failed"
	fi
}

cmake_version() {
	if ! cmake --version | sed '1!d; s/.* \([0-9]*\.[0-9]*\).*/\1/'; then
		fatal "Getting cmake version failed"
	fi
}

gcc_try_gcc_compile() (
	local tmps tmpo
	tmps=$(mktemp --tmpdir tmp.try_autorun.XXXXXXXXXX.c)
	tmpo=$(mktemp --tmpdir tmp.try_autorun.XXXXXXXXXX.out)
	trap 'rm "$tmps" "$tmpo"' EXIT
	echo 'int main(){}' > "$tmps"
	LC_ALL=C gcc "$@" "$tmps" -o "$tmpo" </dev/null
)

awkeval() {
	if (($# != 1)); then fatal "internal error: awkeval takes one argument"; fi
	awk 'BEGIN{exit(!('"$1"'))}' <&-
}

awkeval_verbose() {
	if awkeval "$1"; then echo "$1 is true"; else echo "$1 is false"; return 1; fi
}

cflags_detect() {
	local base
	base=(
		-Wall
		-ggdb3
		-Wno-unused-function
	)
	# global cflags
	cflags=("${base[@]}")

	local ver
	if ! ver=$(gcc_version); then
		fatal "Could not get gcc version"
	fi

	local sanitize
	if awkeval "$ver >= 4.8"; then
		sanitize+=(-fsanitize=address)
	fi
	if awkeval "$ver >= 5"; then
		sanitize+=(-fsanitize=undefined)
	fi
	if awkeval "$ver >= 8"; then
		sanitize+=(-fsanitize=pointer-compare -fsanitize=pointer-subtract)
	fi
	local tmp
	if ((${#sanitize[@]} != 0)) && tmp=$(gcc_try_gcc_compile "${cflags[@]}" "${sanitize[@]}" 2>&1); then
		cflags+=("${sanitize[@]}")
	fi
}

list_functions_prefixed() {
	declare -F | sed "/^declare -f $1/!d; s///"
}

project_detect_make() {
	[[ -e 'Makefile' ]]
}

project_run_make() {
	cflags_detect
	export CFLAGS="${cflags[*]}"
	export CXXFLAGS="${cflags[*]}"
	f_cmdlogrun make "${@:2}"
}

project_detect_cmake() {
	[[ -e 'CMakeLists.txt' ]]
}

project_run_cmake_usage() {
	cat <<EOF
Usage: ,try_autorun ... <dir> [options]

Options:
  -h          Print this help and exit
  -l          Run cleanup only
  -c          Always run cmake configuration stage
  -D VAR=VAL  Add macro definitions
  -R          Filter ctest tests

EOF
	exit 0
}

project_run_cmake() {
	local cdir tmp
	# Find CMakeCache.txt
	if
		tmp=$(timeout 1 find . -mindepth 1 -maxdepth 3 -type f -readable -name 'CMakeCache.txt' -printf "%h" -quit) &&
		[[ -r "$tmp" && -d "$tmp" ]]
	then
		cdir="$tmp"
	else
		cdir=./_build
	fi

	local l_runconfig=0 l_cmakedefines=() l_ctestargs=()
	local l_args
	l_args=$(getopt -n "$L_NAME cmake" -o hclD:R: -l help -- "$@")
	eval "set -- $l_args"
	while (($#)); do
		case "$1" in
		-h|--help) project_run_cmake_usage; ;;
		-c) l_runconfig=1; ;;
		-l)
			if [[ "$cdir" == */"_build" ]]; then
				f_cmdlogrun rm -Ir --one-file-system --preserve-root=all "$cdir"
				return "$?"
			fi
			;;
		-D) l_cmakedefines+=(-D"$2"); shift; ;;
		-R) l_ctestargs+=(-R "$2"); shift; ;;
		--) shift; break; ;;
		*) fatal "cmake: Invalid argument"; ;;
		esac
		shift
	done

	cmakever=$(cmake_version)
	cmakebuildargs=()
	if awkeval "$cmakever > 3.12"; then
		cmakebuildargs+=( --parallel --verbose )
	fi

	if [[ -n "${VIMRUNTIME:-}" ]] || "$g_runfromvim" || ((l_runconfig)) || [[ ! -e "$cdir/CMakeCache.txt" ]]; then
		local cflags
		cflags_detect
		local l_cmakeargs=()
		l_cmakeargs=(
			-H. -B"$cdir"
			--no-warn-unused-cli
		)
		local l_cmakedefaultdefines=(
			-DCMAKE_VERBOSE_MAKEFILE=1
			-DCMAKE_EXPORT_COMPILE_COMMANDS=1
			-DCMAKE_C_FLAGS="${cflags[*]}"
			-DCMAKE_CXX_FLAGS="${cflags[*]}"
			-DCMAKE_RUNTIME_OUTPUT_DIRECTORY=bin
			-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=lib
			-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=lib
		)
		for dd in "${l_cmakedefaultdefines[@]}"; do
			if [[ ! " ${l_cmakedefines[*]} " == *"${dd%%=*}="* ]]; then
				l_cmakeargs+=("${dd}")
			fi
		done
		l_cmakeargs+=("${l_cmakedefines[@]}")
		if hash ninja 2>/dev/null; then
			l_cmakeargs+=(-G Ninja);
		fi
		f_cmdlogrun cmake "${l_cmakeargs[@]}" "$@"
	fi &&
	f_cmdlogrun cmake --build "$cdir" "${cmakebuildargs[@]}" &&
	if [[ -e "$cdir"/CTestTestfile.cmake ]]; then
		f_cmdlog "cd $cdir && ctest -V ${l_ctestargs[*]}"
		(
			cd "$cdir"
			f_cmdrun ctest -V "${l_ctestargs[@]}"
		)
	fi
}

# main #########################################

be_nice "$@"

parse_arguments "$@"
shift "$((OPTIND-1))"
if (($# == 0)); then
	set -- .
fi
g_path=$1
shift

if [[ "$g_runfromvim" ]] && gitroot=$(git rev-parse --show-toplevel 2>/dev/null); then
	g_path="$gitroot"
fi

if [[ -d "$g_path" ]] || "$g_use_project"; then
	for i in make cmake; do
		if project_detect_"$i"; then
			project_run_"$i" "$@"
			exit
		fi
	done
fi

if [[ ! -d "$g_path" && -x "$g_path" ]]; then
	f_cmdlogrun "$(readlink -f "$g_path")" "$@"
	exit
fi

if [[ -f "$g_path" ]]; then
	file="$g_path"
	if [[ -z "$g_filetype" ]]; then
		# Detect filetype from extension.
		#ext=${file,,}
		#ext=${file##*.}
		case "$g_path" in
		Makefile|*/Makefile) g_filetype='make'; ;;
		*/CMakeLists.txt|CMakeLists.txt|*.cmake) g_filetype='cmake'; ;;
		*.c) g_filetype='c'; ;;
		*.cpp|*.cxx|*.cc|*.c++) g_filetype='cpp'; ;;
		*.py) g_filetype='python'; ;;
		*.sh) g_filetype='sh'; ;;
		*.bash|*.bashrc) g_filetype='bash'; ;;
		*.zsh) g_filetype='zsh'; ;;
		*)
			# Detect filetype from first shebang line.
			shebang=$(dd if="$file" bs=2 count=1 status=none| xxd -p)
			if [[ "$shebang" == 2321 ]]; then # that's "#!"
				fline=$(head -n1 "$file")
				case "$fline" in
				*bash*) g_filetype=bash; ;;
				*python*) g_filetype=bash; ;;
				*sh*) g_filetype=sh; ;;
				esac
			fi
		esac
	fi

	case "$g_filetype" in
	make)
		make "$@"
		exit
		;;
	cmake)
		case "$file" in
		*/CMakeLists.txt|CMakeLists.txt)
			project_run_cmake "$@"
			exit
			;;
		*)
			f_cmdlogrun cmake -P "$file" "$@"
			exit
			;;
		esac
		exit
		;;
	c|cpp)
		case "$g_filetype" in
		c) : "${ccompiler:=gcc}"; run=,ccrun; ;;
		*) : "${ccompiler:=g++}"; run=,c++run; ;;
		esac

		if hash "$run" 2>/dev/null >&2; then
			cmd=("$run" +n +v "$file" ${1:+--} "$@")
			f_cmdrun "${cmd[@]}"
		else
			if [[ -z "$ccompiler" ]] || ! hash "$ccompiler" 2>/dev/null; then
				fatal "Compiler could not be found: $ccompiler"
			fi
			cflags_detect
			tmp=$(mktemp --suffix='.out')
			trap 'rm "$tmp"' EXIT
			{
				f_cmdlog "$ccompiler" "${cflags[@]}" "$@" "$file"
				f_cmdrun "$ccompiler" "${cflags[@]}" "$@" -o "$tmp" "$file"
				f_cmdrun "$tmp"
			}
		fi
		# tmp removed on EXIT
		exit
		;;
	python)
		cmd=(python "$file" "$@")
		;;
	sh)
		cmd=(sh "$file" "$@")
		;;
	bash)
		cmd=(bash "$file" "$@")
		;;
	zsh)
		cmd=(zsh "$file" "$@")
		;;
	esac
	if ((${#cmd[@]})); then
		f_cmdlogrun "${cmd[@]}"
		exit
	fi
fi

fatal "Do not know how to build $g_path"

