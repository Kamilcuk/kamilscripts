#!/bin/bash
set -euo pipefail

name=$(basename "$0")

usage() {
	cat <<EOF
Usage: $name [options] <file> [tool_specific_arguments...]

Tries to compile and automatically run the file or the project.
Detects filetype using the extension of the file.
Chooses from gcc, g++, python, bash.
In project mode chooses from: make, cmake.

Options:
   -e filetype   Pass filetype as vim filetype.
   -T <timeout>  Timeout execution.
   -S            Synchronize stderr with stdout and be line buffered.
   -V            Run from vim.
   -p            Try to detect project files before detecting filetype.
   -n            Dry run.
   -h            Print this help and exit.

Written by Kamil Cukrowski
Licensed jointly under Beerware Licsense and MIT License
EOF
}

parse_arguments() {
	declare -g file g_use_project g_dryrun g_sync_output g_runfromvim
	g_use_project=false
	g_dryrun=false
	g_syncoutput=false
	g_removecolors=false
	g_timeout=
	g_runfromvim=false

	local o
	while getopts ":e:pT:SVnhD" o; do
		case "$o" in
		e) ;;
		p) g_use_project=true; ;;
		T) g_timeout=$OPTARG; ;;
		S) g_syncoutput=true; ;;
		V) g_runfromvim=true; ;;
		n) g_dryrun=true; ;;
		h) usage; exit 0; ;;
		D) set -x; ;;
		*) fatal "Invalid argument: -$OPTARG"; ;;
		esac
	done

	if "$g_runfromvim"; then
		g_syncoutput=true;
		g_removecolors=true;
	fi

	if "$g_syncoutput"; then
		exec 2>&1
	fi

	if "$g_removecolors"; then
		exec 1> >(sed 's/\x1b[^m]*m//g')
		exec 2> >(sed 's/\x1b[^m]*m//g' >&2)
	fi

	if [[ -n "$g_timeout" ]]; then
		timeout_watcher &
	fi
}

run() {
	printf "+ %s\n" "$*" >&2
	if ! "$g_dryrun"; then
		"$@"
	fi
}

runeval() {
	printf "+ %s\n" "$*" >&2
	if ! "$g_dryrun"; then
		eval "$1"
	fi
}

logrun() {
	echo "+" "$@" >&2
}

fatal() {
	echo "$name: error:" "$@" >&2
	exit 1
}

runexec() {
	exec "$@"
}

be_nice() {
	if [[ -z "${TRY_AUTORUN_IS_NICE:-}" ]]; then
		local ionice
		ionice=()
		if hash ionice >/dev/null 2>&1; then
			ionice=(ionice -c3  --)
		fi
		exec nice -n 20 "${ionice[@]}" env TRY_AUTORUN_IS_NICE=true "$0" "$@"
	fi
}

be_unbuffered() {
	if [[ -z "${TRY_AUTORUN_IS_UNBUFFERED:-}" ]]; then
		local unbuffer
		unbuffer=()
		if hash unbuffer 2>/dev/null >&2; then
			unbuffer=(unbuffer)
		elif hash stdbuf 2>/dev/null >&2; then
			unbuffer=(stdbuf -oL -eL)
		fi
		if ((${#unbuffer[@]})); then
			exec env TRY_AUTORUN_IS_UNBUFFERED=true "${unbuffer[@]}" "$0" "$@"
		else
			export TRY_AUTORUN_IS_UNBUFFERED=true
		fi
	fi
}

timeout_watcher() {
	timeout="$g_timeout"
	interval=1
	while ((timeout--)); do
		sleep 1
		if ! kill -0 $BASHPID 2>/dev/null >&2; then
			exit 0
		fi
	done

	echo "Timeout of 1 second reached - terminating..." >&2
	kill -s SIGTERM 0
}

gcc_version() {
	if ! gcc --version | grep '^gcc' | sed 's/^.* \([0-9]\+\.[0-9]\+\).*/\1/'; then
		fatal "Getting gcc version failed"
	fi
}

gcc_try_gcc_compile() (
	local tmps tmpo
	tmps=$(mktemp --tmpdir tmp.try_autorun.XXXXXXXXXX.c)
	tmpo=$(mktemp --tmpdir tmp.try_autorun.XXXXXXXXXX.out)
	trap 'rm "$tmps" "$tmpo"' EXIT
	echo 'int main(){}' > "$tmps"
	LC_ALL=C gcc "$@" "$tmps" -o "$tmpo" </dev/null
)

awkeval() {
	if (($# != 1)); then fatal "internal error: awkeval takes one argument"; fi
	awk 'BEGIN{exit(!('"$1"'))}' <&-
}

awkeval_verbose() {
	if awkeval "$1"; then echo "$1 is true"; else echo "$1 is false"; return 1; fi
}

cflags_detect() {
	local base
	base=(
		-Wall
		-ggdb3
	)
	# global cflags
	cflags=("${base[@]}")

	local ver
	if ! ver=$(gcc_version); then
		fatal "Could not get gcc version"
	fi

	local sanitize
	if awkeval "$ver >= 4.8"; then
		sanitize+=(-fsanitize=address)
	fi
	if awkeval "$ver >= 5"; then
		sanitize+=(-fsanitize=undefined)
	fi
	if awkeval "$ver >= 8"; then
		sanitize+=(-fsanitize=pointer-compare -fsanitize=pointer-subtract)
	fi
	local tmp
	if ((${#sanitize[@]} != 0)) && tmp=$(gcc_try_gcc_compile "${cflags[@]}" "${sanitize[@]}" 2>&1); then
		cflags+=("${sanitize[@]}")
	fi
}

list_functions_prefixed() {
	declare -F | sed "/^declare -f $1/!d; s///"
}

project_detect_make() {
	[[ -e 'Makefile' ]]
}

project_run_make() {
	cflags_detect
	export CFLAGS="${cflags[*]}"
	export CXXFLAGS="${cflags[*]}"
	run make "${@:2}"
}

project_detect_cmake() {
	[[ -e 'CMakeLists.txt' ]]
}

project_run_cmake() {
	local cdir tmp
	# Find CMakeCache.txt
	if
		tmp=$(timeout 1 find . -mindepth 1 -maxdepth 3 -type f -readable -name 'CMakeCache.txt' -printf "%h" -quit) &&
		[[ -r "$tmp" && -d "$tmp" ]]
	then
		cdir="$tmp"
	else
		cdir=./_build
	fi
	cdir=$(readlink -f "$cdir")

	local runconfig=0
	shift
	case "${1:-}" in
	clean)
		if [[ "$cdir" == */"_build" ]]; then
			logrun rm -Ir --one-file-system --preserve-root=all "$cdir"
			return "$?"
		fi
		;;
	config)
		runconfig=1
		shift
		;;
	esac

	if "$g_runfromvim" || ((runconfig)) || [[ ! -e "$cdir/CMakeCache.txt" ]]; then
		local args cflags
		cflags_detect
		args=(
			-S. -B"$cdir"
			-DCMAKE_VERBOSE_MAKEFILE=yes
			-DCMAKE_EXPORT_COMPILE_COMMANDS=1
			-DCMAKE_C_FLAGS="${cflags[*]}"
			-DCMAKE_CXX_FLAGS="${cflags[*]}"
			-DCMAKE_RUNTIME_OUTPUT_DIRECTORY="$cdir"/bin
			-DCMAKE_LIBRARY_OUTPUT_DIRECTORY="$cdir"/lib
			-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY="$cdir"/lib
		)
		if hash ninja 2>/dev/null; then args+=(-GNinja); fi
		run cmake "${args[@]}" "$@"
	fi &&
	run cmake --build "$cdir" --parallel --verbose &&
	if [[ -e "$cdir"/CTestTestfile.cmake ]]; then
		env > /tmp/1
		( runeval "cd $(printf "%q" "$cdir") && ctest" )
	fi
}

# main #########################################

be_nice "$@"
# be_unbuffered "$@"

parse_arguments "$@"
shift "$((OPTIND-1))"
if (($# == 0)); then
	set -- .
fi
g_path=$1

if [[ -d "$g_path" ]] || "$g_use_project"; then
	for i in $(list_functions_prefixed project_detect_); do
		if project_detect_"$i"; then
			project_run_"$i" "$@"
			exit
		fi
	done
fi

if [[ ! -d "$g_path" && -x "$g_path" ]]; then
	"$g_path" "$@"
	exit
fi

if [[ -f "$g_path" ]]; then
	file="$g_path"
	ext=${file,,}
	ext=${file##*.}
	case "$g_path" in
	Makefile|*/Makefile)
		make "$@"
		exit
		;;
	*/CMakeLists.txt|CMakeLists.txt)
		project_run_cmake "$@"
		exit
		;;
	*.c|*.cpp|*.cxx|*.cc|*.c++)
		case "$ext" in
		c) : "${ccompiler:=gcc}"; run=,ccrun; ;;
		*) : "${ccompiler:=g++}"; run=,c++run; ;;
		esac

		if hash "$run" 2>/dev/null >&2; then
			cmd=("$run" +n +v "$file" ${1:+--} "$@")
			runexec "${cmd[@]}"
		fi

		if [[ -z "$ccompiler" ]] || ! hash "$ccompiler" 2>/dev/null; then
			fatal "Compiler could not be found: $ccompiler"
		fi
		cflags_detect
		tmp=$(mktemp --suffix='.out')
		trap 'rm "$tmp"' EXIT
		{
			logrun "$ccompiler" "${cflags[@]}" "$@" "$file"
			"$ccompiler" "${cflags[@]}" "$@" -o "$tmp" "$file"
			runexec "$tmp"
		}
		# tmp removed on EXIT
		exit
		;;
	*.py)
		cmd=(python "$file" "$@")
		;;
	*.sh)
		cmd=(sh "$file" "$@")
		;;
	*.bash|*.bashrc)
		cmd=(bash "$file" "$@")
		;;
	*.zsh)
		cmd=(zsh "$file" "$@")
		;;
	esac
	if ((${#cmd[@]})); then
		logrun "${cmd[@]}"
		runexec "${cmd[@]}"
		exit
	fi
fi

fatal "Don't know how to build $g_path"

