#!/bin/bash

###############################################################################
# bash completion start

_comma_nix_options() {
	local loc
	# shellcheck disable=2016
	loc=$(type -P ,nix) &&
		sed '/case "$1"/,/esac/!d' "$loc" |
		grep -- '^[[:space:]]*-.*)$' |
			grep -o -- '-[-a-zA-Z0-9]\+' |
			paste -sd' '
}

# shellcheck disable=2034
_comma_nix_completion() {
	local IFS=$' \t\n'
	if [[ "${COMP_WORDS[COMP_CWORD]}" = -* ]] && ((COMP_CWORD == 1)); then
		# shellcheck disable=2207
		COMPREPLY=($(compgen -W "$(_comma_nix_options)" -- "${COMP_WORDS[COMP_CWORD]}"))
	elif declare -f _init_completion >/dev/null; then
		local cur prev words cword split
		_init_completion -s || return
		local PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin
		local root_command="$cur"
		_command_offset 1
	fi
}

if (return 2>/dev/null); then
	if (($# == 1)) && [[ "${1:-}" = "--bash-completion" ]]; then
		complete -F _comma_nix_completion ,nix
		return
	else
		echo ",nix: This script should not be sourced" >&2
		return 2
	fi
fi

###############################################################################
set -euo pipefail

dir_is_not_empty() {
	find "$@" -mindepth 1 -maxdepth 1 | read
}

log() {
	echo ",nix:" "$@" >&2
}

fatal() {
	log "$@"
	exit 2
}

be_nice() {
	if hash ,nice 2>/dev/null; then
		,nice -p $$
	else
		renice 39 -p $$ >/dev/null
		ionice -c 3 -p $$
	fi
}

help() {
	cat <<EOF
Usage: ,nix -OPTION
       ,nix [command [args...]]

Executes proot -b ~/.nix:/nix with a shell
that loads nix profile from ~/.nix-profile/etc/profile.d/nix.sh
and executes user supplied command or user login shell.

Options:
$(_comma_nix_options | fmt)

Written by Kamil Cukrowski
EOF
}

# Parse arguments
if (($#)) && [[ "$1" == -* ]]; then
	set -x
	be_nice
	if (($# > 1)); then
		fatal "too many arguments: $*"
	fi
	case "$1" in
	--bootstrap)
		,nix ,nix --bootstrap-in
		;;
	--bootstrap-in)
		if [[ ! -e /nix ]]; then
			fatal "/nix directory does not exists"
		fi
		if [[ ! -w /nix ]]; then
			fatal "/nix directory is not writable"
		fi
		if [[ ! -e "$NIX_CONF_DIR/nix.conf" ]]; then
			log "Writing sandbox = false to nix.conf so that installation works"
			mkdir -v -p "$NIX_CONF_DIR"
			echo "sandbox = false" >"$NIX_CONF_DIR/nix.conf"
		fi
		export NIX_INSTALLER_NO_MODIFY_PROFILE=1
		tmp=$(curl -L https://nixos.org/nix/install)
		bash -s -- --no-daemon --no-modify-profile <<<"$tmp"
		;;
	--completely-remove-nix)
		read -r -p "Are you sure you want to completely remove nix? [y] " ans
		if [[ "$ans" != "y" ]]; then
			fatal "The answer was not exactly 'y'"
		fi
		set -x
		chmod -R +w ~/.nix
		rm -r ~/.nix .nix-channels .nix-defexpr/ .nix-profile
		;;
	--bash-completion)
		echo '. ,nix --bash-completion'
		;;
	-u | --upgrade | --update)
		nix-channel --update
		nix-env -u '*'
		;;
	--upgrade2)
		nix-channel --update
		nix-env -q --json | jq -r 'to_entries | .[].value.pname' | xargs -t -d '\n' nix-env -u
		;;
	-gc-all | --gc-all | --gc)
		nix-channel --update
		nix-env -q --json | jq -r 'to_entries | .[].value.pname' | xargs -t -d '\n' nix-env -u
		rm /nix/var/nix/gcroots/auto/*
		nix-collect-garbage -d
		;;
	-h | --help)
		help
		;;
	*)
		echo ",nix: INVALID OPTION: $1 . Options: $(_comma_nix_options)"
		;;
	esac
	exit
fi

if [[ -e /nix ]]; then
	log "/nix directory exists, you are already in NIX."
	exec "$@"
	exit "$?"
fi

# If no arguments given, run user login shell.
if (($# == 0)); then
	shell=$(getent passwd "$LOGNAME")
	shell=${shell##*:}
	shell=${shell:-/bin/bash}
	set -- "$shell" -l
fi

# find proot
if hash ,proot 2>/dev/null; then
	proot=,proot
elif hash proot 2>/dev/null; then
	proot=proot
elif [[ -x ~/bin/proot ]]; then
	proot=~/bin/proot
elif [[ -x ~/.local/bin/proot ]]; then
	proot=~/.local/bin/proot
else
	fatal "proot not found!"
fi

addenv() {
	# shellcheck disable=SC2163
	export "$1"
}

addenv NIX=1
# NIX_CONF_DIR=/nix/etc/nix
addenv NIXPKGS_ALLOW_UNFREE=1
addenv NIX_CONF_DIR=~/.nix/etc/nix/
# https://nixos.wiki/wiki/Locales
if dir_is_not_empty /usr/lib/locale/locale-archive; then
	addenv LOCALE_ARCHIVE=/usr/lib/locale/local-archive
fi
# https://github.com/NixOS/nix/issues/3155
tmp=/etc/ssl/certs/ca-bundle.crt
if [[ -e "$tmp" ]]; then
	addenv NIX_SSL_CERT_FILE="$tmp"
fi
# do not mix host tmux socket with nix tmux socket
addenv TMUX_TMPDIR=/tmp/tmux-$UID-nix
if [[ ! -e "$TMUX_TMPDIR" ]]; then
	mkdir -v -m 700 "$TMUX_TMPDIR"
fi
if [[ ! -e ~/.nix ]]; then
	mkdir -v -m 700 ~/.nix
fi

script() {
	if [ -r ~/.nix-profile/etc/profile.d/nix.sh ]; then
		# shellcheck disable=1090
		. ~/.nix-profile/etc/profile.d/nix.sh
	else
		echo ",nix: ~/.nix-profile/etc/profile.d/nix.sh does not exists! Consider running ,nix --bootstrap" >&2
	fi
	exec "$@"
}

exec "$proot" -b ~/.nix:/nix sh -c "$(declare -f script)"' && script "$@"' _ "$@"
