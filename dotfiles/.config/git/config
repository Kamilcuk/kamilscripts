[user]
	name = Kamil Cukrowski
	email = kamilcukrowski@gmail.com
[push]
	default = simple
[github]
	user = Kamilcuk
[color]
	ui = true

[mergetool "meld"]
	cmd = meld --auto-merge \"$LOCAL\" \"$BASE\" \"$REMOTE\" --output \"$MERGED\" --label \"MERGE (REMOTE BASE MY)\"
	trustExitCode = false
[mergetool "fugitive"]
	# cmd = # vim -f -c \"Gvdiffsplit!\" \"$MERGED\"
	cmd = vim -f -d -c \"wincmd l\" -c \"normal gg\" -c \"normal ]n\" \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
	trustExitCode = false
[mergetool "vim_mergetool"]
	cmd = vim -d -f -c \"MergetoolStart\" \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
	trustExitCode = false
[mergetool "merge3"]
	cmd = vim -d -c \"wincmd l\" \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
[mergetool]
	prompt = false
	keepBackup = false
	trustExitCode = false
[merge]
	tool = meld
	# tool = vim_mergetool
	# conflictstyle = diff3

[difftool "meld"]
	cmd = meld \"$LOCAL\" \"$REMOTE\" --label \"DIFF (ORIGINAL MY)\"
[diff]
	guitool = meld
	noprefix = false
	mnemonicprefix = true

[sendemail]
	smtpencryption = tls
[pull]
	rebase = true
	ff = only

[guitool "git checkout $REVISION -- $FILENAME"]
	cmd = git checkout "$REVISION" -- "$FILENAME"
	needsfile = yes
	noconsole = yes
	confirm = yes
[guitool "Remove file"]
	cmd = rm "$FILENAME"
	needsfile = yes
	noconsole = yes
	confirm = yes
[guitool "Open in gvim"]
	cmd = gvim "$FILENAME"
	needsfile = yes
	noconsole = yes
[guitool "Remove trailing blanks"]
	cmd = sed -i -e 's/[[:blank:]]*$//' "$FILENAME"
	needsfile = yes
	confirm = yes
[guitool "Open in eclipse"]
	cmd = eclipse "$FILENAME"
	noconsole = yes
	needsfile = yes
[guitool "Rebase onto..."]
	cmd = git rebase $REVISION
	revprompt = yes
[guitool "Rebase/Continue"]
	cmd = git rebase --continue
[guitool "Rebase/Skip"]
	cmd = git rebase --skip
[guitool "Rebase/Abort"]
	cmd = git rebase --abort
[guitool "Pull with Rebase"]
	cmd = git pull --rebase

[blame]
	date = human

[core]
	pager = less

[submodule]
	recurse = false

[alias]
	test1 = "!f() { echo ${1} | awk '{gsub(/^remotes\\/[^\\/]*\\//, "")}{print}'; }; f"
	s = status
	lo = log --pretty=format:\"%h %ce %cd %s\" --graph
	co = checkout
	#ci = commit
	#cm = commit -a -m
	#st = status
	#br = branch
	m3 = mergetool -t merge3
	#mt = mergetool
	ac = commit -a -m
	acp = "! f() { set -x ; git commit -a -m \"$*\" && git push; } ; f"
	aacp  = "! f() { set -x ; git add -A && git commit -m \"$*\" && git push; } ; f"
	allcp = "! f() { set -x ; git add -A && git commit -m \"$*\" && git push; } ; f"
	qdAddAmendPushForce = "! f() {    : git commit ; ,git qdAddAmendPushForce    \"$@\"; }; f"
	qlAllAddAmendPushForce = "! f() { : git commit ; ,git qlAllAddAmendPushForce \"$@\"; }; f"
	mergeto     = "!f() { : git checkout ; ,git mergeto     \"$@\"; }; f"
	mergetopush = "!f() { : git checkout ; ,git mergetopush \"$@\"; }; f"
	convertGitRepoToSubmodule = ",git convertGitRepoToSubmodule"
	log1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	log2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
[init]
	defaultBranch = master
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[credential]
	helper = store

[gui]
	fontui = -family \"LiterationSans Nerd Font\" -size 10 -weight normal -slant roman -underline 0 -overstrike 0
	fontdiff = -family \"LiterationMono Nerd Font\" -size 10 -weight normal -slant roman -underline 0 -overstrike 0

[credential]
	helper = store --file ~/.config/git/credentials
